{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Table of contents","text":"<p> emCode User Manual </p>"},{"location":"#table-of-contents","title":"Table of contents","text":"<p>Forewords </p> <ol> <li> <p>Install emCode </p> </li> <li> <p>Develop a project </p> </li> <li> <p>Manage the boards </p> </li> <li> <p>Find solutions to issues </p> </li> </ol> <p>Appendixes </p>"},{"location":"Appendixes/","title":"Appendixes","text":"<ul> <li>Release notes </li> <li>Release history </li> <li>Changes by emCode </li> <li>Glossary </li> <li>Index of boards and platforms </li> <li>Legal notice </li> </ul>"},{"location":"Appendixes/Glossary/","title":"Glossary","text":"<p>The glossary provides a short definition of the most common terms, and provides links to the related entries.</p>"},{"location":"Appendixes/Glossary/#4d-systems","title":"4D Systems","text":"<p>The 4D Systems boards combine a colour touch screen with a controller.</p> <ul> <li> <p>The IoD boards are powered by an ESP8266 MCU, They rely on the ESP8266 boards package for the Arduino IDE with a modified file and the specific TFT display library.</p> </li> <li> <p>The PICadillo-35T board combines a PIC32 MCU with a 480x320 TFT screen. The IDE used to be MPIDE with additional files and the specific TFT display library. As MPIDE is deprecated, the board is supported by the Arduino IDE with the chipKIT boards package.</p> </li> </ul> <p>Related entries: Arduino , Boards ,  chipKIT , MPIDE </p>"},{"location":"Appendixes/Glossary/#adafruit","title":"Adafruit","text":"<p>Adafruit offers a large range of highly-compact boards based on the ATtiny85x and the ATmega328P.</p> <p>The installation of the Adafruit boards is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Boards </p> <p>Install: Install the Adafruit platform </p> <p>Upload: Upload to Adafruit Trinket and Pro Trinket boards , Upload to Feather nRF52, Upload to Feather M0 and M4 boards </p> <p>Debug: Debug Feather nRF52, Debug Feather M0 and M4 </p>"},{"location":"Appendixes/Glossary/#application-libraries","title":"Application libraries","text":"<p>The application libraries are optional libraries to provide additional features, like managing the specific I\u00b2C and SPI ports.</p> <p>They are defined by each of the IDEs.</p> <p>By default, no application library is included.</p> <p>They require to be explicitly mentioned with the <code>#include</code> statement on the main sketch and listed on the main <code>Makefile</code> after the <code>APP_LIBS_LIST</code> variable.</p> <p>The embedXcode+ edition lists all the application libraries for the selected platform on the main <code>Makefile</code>.</p> <p>Related entries: Framework , Libraries </p>"},{"location":"Appendixes/Glossary/#architecture","title":"Architecture","text":"<p>The MCUs are grouped in families or architectures.</p> <p>As example, one characteristic of the architectures is the number of bits used to process data. It could be</p> <ul> <li> <p>8-bit for the ATtiny and ATmega,</p> </li> <li> <p>16-bit for the MSP430</p> </li> <li> <p>or 32-bit for the ARM.</p> </li> </ul> <p>Other characteristics include the structure of the hardware and the instruction set.</p> <p>Each architecture requires its dedicated tool-chain.</p> <p>Related entries: Arduino , Boards , MCU , Particle , Platform , Tool-chain </p>"},{"location":"Appendixes/Glossary/#arducam","title":"ArduCAM","text":"<p>ArduCAM specialises in cameras and offers two boards with WiFi and an Arduino form-factor.</p> <p>The ArduCAM CC3200 is based on the CC3200 and runs on Energia.</p> <p>The ArduCAM ESP8266 is based on ESP8266 and runs on Arduino 1.6 IDE. The installation is performed with the Boards Manager.</p> <p>Related entries: Arduino , Boards , Energia , ESP8266 </p>"},{"location":"Appendixes/Glossary/#arduino","title":"Arduino","text":"<p>The Arduino name includes hardware, a framework and an IDE.</p> <p>The boards are based on two major architectures, one 8-bit, others 32-bit:</p> <ul> <li> <p>8-bit ATtiny and ATmega,</p> </li> <li> <p>32-bit ARM Cortex-M with different MCUs:</p> <ul> <li> <p>32-bit ARM SAM for the Arduino Due and the Arduino Zero Pro,</p> </li> <li> <p>32-bit ARM SAMD for the Arduino Zero and the Arduino M0 Pro.</p> </li> <li> <p>32-bit ARM nRF52 for the Arduino Primo boards, now discontinued,</p> </li> <li> <p>32-bit ARM STM32F4 for the Arduino Star Otto boards, never released,</p> </li> <li> <p>32-bit ARM nRF528x for the Arduino Nano 33 BLE boards, based on Mbed-OS</p> </li> </ul> </li> </ul> <p>The Arduino IDE version 1.8 now supports all the boards from previous organisations and IDEs, Arduino.CC with IDE version 1.6 and Arduino.ORG with IDE version 1.7.</p> <p>Related entries: 4D Systems , Adafruit , Architecture , ArduCAM , ARM mbed , ATTinyCore , Boards , DFRobot , ESP32 , ESP8266 , Framework , Glowdeck , IDE , Intel , Internet of Things , LightBlue Bean , Little Robot Friends , MediaTek LinkIt , Microduino , Microsoft , Moteino , MPIDE , panStamp , Particle , RedBear , RFduino , Seeeduino , Simblee , TinyCircuits , Udoo Neo </p> <p>Install: Install the Arduino platform </p> <p>Upload: Upload to Arduino Leonardo , Upload to Arduino Y\u00fan using Ethernet or WiFi , Upload to Arduino M0 Pro , Upload to Arduino Zero </p> <p>Debug: Check the configuration , Connect the Segger J-Link to the Arduino Due , Select the USB Port for the Arduino M0 Pro </p>"},{"location":"Appendixes/Glossary/#arm-mbed","title":"ARM mbed","text":"<p>The ARM mbed framework is designed for the ARM MCUs.</p> <p>It includes a hardware abstraction layer and runs on a large range of boards based on Cortex-M0, M3 and M4 MCUs. It also features a real time operating system, or RTOS.</p> <p>Up to now, mbed was available solely online. It can now be downloaded and used off line with standard tools as the GCC tool-chain and the OpenOCD debugger.</p> <p>Most of the high level libraries of ARM mbed are written in C++. The mbed SDK has gone through major updates, first with Mbed-OS 3.0 and now Mbed-OS 5.0</p> <p>Support for the mbed SDK is discontinued.</p> <p>The Mbed-OS is also used as an underlying SDK for the Arduino framework, for example for the Nano 33 BLE boards.</p> <p>The Nucleo boards are now supported by the STM32duino platform.</p> <p>Related entries: Arduino , Boards , C++ language , Framework , Freedom , GCC GNU Compiler Collection , Nordic , Nucleo , OpenOCD Open On-Chip Debugger , RedBear ,  STM32duino </p>"},{"location":"Appendixes/Glossary/#attinycore","title":"ATtinyCore","text":"<p>The ATtinyCore supports the ATtiny MCUs.</p> <p>The installation of the ATtinyCore boards is  performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Boards </p> <p>Install: Install the ATtinyCore platform </p>"},{"location":"Appendixes/Glossary/#bbc-microbit","title":"BBC micro:bit","text":"<p>The BBC micro:bit is built around the Nordic nRF51 with a Bluetooth radio. It also features a hardware debugger.</p> <p>Related entries: Boards , Debugger </p> <p>Install: Install the BBC micro:bit board </p> <p>Upload: Reset the BBC micro:bit board to factory default </p>"},{"location":"Appendixes/Glossary/#beaglebone","title":"BeagleBone","text":"<p>The BeagleBone is a board featuring a Cortex-A8 AM3358 processor from Texas Instruments and running on Linux. The recommended Linux distribution is Debian.</p> <p>Support for the BeagleBone board has been discontinued since embedXcode release 5.0.</p> <p>Related entries: Boards </p>"},{"location":"Appendixes/Glossary/#boards","title":"Boards","text":"<p>A board is hardware defined by its MCU.</p> <p>For example, the LaunchPad Stellaris is based on the ARM Cortex-M4 LM4F120H5QR MCU.</p> <p>All the embedded computing boards use a Processing-based Wiring-derived Arduino- like IDE or run on the mbed platform.</p> <p>For the Wiring / Arduino framework, the boards share the same Processing-based IDE, use the same Wiring-derived framework and bring the same Arduino-like programming with sketches written in C++.</p> <p>The IDE includes the tool-chain specific to the boards.</p> <p>For the mbed framework, the boards feature an ARM Cortex-M0, -M0+, M3 or M4, use the same mbed SDK on the GCC tool-chain.</p> <p>Related entries: 4D Systems , Adafruit , Architecture , ArduCAM , Arduino , ARM mbed , ATTinyCore , BBC micro:bit , BeagleBone , C++ language , chipKIT , DFRobot , Digistump , ESP32 , ESP8266 , Framework , Freedom , Glowdeck , IDE , Intel , LaunchPad , LightBlue Bean , Little Robot Friends , Maple , MCU , MediaTek LinkIt , Microduino , Microsoft , Moteino , Nordic , Nucleo , panStamp , Particle , Platform , RedBear , RFduino , Robotis , Seeeduino , Simblee , Teensy , TinyCircuits , Udoo Neo , Wiring </p>"},{"location":"Appendixes/Glossary/#c-language","title":"C++ language","text":"<p>The C++ is a programming language based on the C language. It features object-oriented features like classes.</p> <p>It is used for programming the embedded computing boards.</p> <p>Related entries: ARM mbed , Boards , File .cpp , File .h , File .hpp , File .ino , File .pde , Framework , IDE , Sketch , Tool-Chain </p>"},{"location":"Appendixes/Glossary/#chipkit","title":"chipKIT","text":"<p>chipKIT uses the PIC32 MCUs.</p> <p>The IDE used to be MPIDE. The installation of the chipKIT board is now performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>An optional chipKIT PGM provides an external programmer-debugger to the chipKIT boards.</p> <p>Related entries: 4D Systems , Boards , Debugger , MPIDE </p>"},{"location":"Appendixes/Glossary/#core-libraries","title":"Core libraries","text":"<p>The core libraries include all the basic functions required for development.</p> <p>Each platform provides its own set compatible with the Wiring and Arduino framework.</p> <p>All the core libraries are included for compilation using one single <code>#include</code> statement on the main sketch. The same <code>#include</code> statement is also required on the header files.</p> <p>This is done with</p> <ul> <li> <p>the <code>#include \"Arduino.h\"</code> statement for the Arduino, Energia, Microduino and Teensy platforms,</p> </li> <li> <p>the <code>#include \"Wiring.h\"</code> for the call , while Wiring platform, and</p> </li> <li> <p>the <code>#include \"WProgram.h\"</code> for the chipKIT MPIDE and Maple IDE platforms.</p> </li> </ul> <p>Related entries: File .h , Framework , Libraries </p>"},{"location":"Appendixes/Glossary/#cosa","title":"Cosa","text":"<p>Cosa is an object-oriented framework compatible with Arduino for the AVR-based boards.</p> <p>The installation of the Cosa framework is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Framework </p>"},{"location":"Appendixes/Glossary/#debugger","title":"Debugger","text":"<p>Debugging allows to execute a program one line at a time, check and change the values of the variables, trace the calls of functions, \u2026 It consists on a combination of hardware and software.</p> <p>There are two ways of debugging:</p> <ul> <li> <p>Software debugging, most of the time performed by injecting code like the basic <code>printf(\"i=%d\\n\", i)</code> or <code>Serial.println(i, DEC);</code>.</p> </li> <li> <p>Hardware debugging, with a specific chip called a debugger or emulator along the MCU being debugged, and dedicated external applications.</p> </li> </ul> <p>Some boards, like the LaunchPad boards by Texas Instruments and the Nucleo boards by STMicroelectronics, include a built-in hardware debugger.</p> <p>To use the hardware debugger, two external applications are required, based on a client-server model: a client connects to a server. The most widely used client is GDB. The server is a proprietary or open-source driver, and includes MSPDebug, Segger J-Link, ST-Link or OpenOCD.</p> <p>The chipKIT PGM provides an external programmer-debugger to the chipKIT boards.</p> <p>Related entries: BBC micro:bit , chipKIT , Energia , IDE , LaunchPad , GDB GNU Debugger ,  MPIDE , MSPDebug , Segger J-Link programmer-debugger , Tool-chain , XDS110 programmer-debugger </p>"},{"location":"Appendixes/Glossary/#dfrobot","title":"DFRobot","text":"<p>The BLuno and Wido boards from DFRobot provide an easy introduction to the internet-of-things.</p> <p>The BLuno board integrates Bluetooth 4.0 or BLE into a standard Arduino Uno board and the Wido board integrates WiFi into a standard Arduino Leonardo board.</p> <p>The BLuno board is considered as a standard Arduino Uno board and the Wido board as a standard Arduino Leonardo board, so no specific plug-in is required.</p> <p>Related entries: Arduino , Boards </p> <p>Install: Install the DFRobot platform </p>"},{"location":"Appendixes/Glossary/#digistump","title":"Digistump","text":"<p>The Digistump platform offers different boards.</p> <ul> <li> <p>The Digispark is based on the ATtiny85 and requires a specific upload procedure.</p> </li> <li> <p>The DigiX is compatible with the Arduino Due.</p> </li> </ul> <p>The coming Oak is based on the popular ESP8266.</p> <p>The installation of the Digistump boards is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Boards </p>"},{"location":"Appendixes/Glossary/#embedxcode","title":"embedXcode","text":"<p>embedXcode is deprecated and replaced by emCode.</p> <p>embedXcode is a template for Xcode. It eases development for the most popular embedded computing boards.</p> <p>It comes in two editions. The embedXcode standard edition focuses on core features and the embedXcode+ edition provides extended functionalities like project sharing and external debugging.</p> <p>Just like embedXcode for the boards running on the Wiring / Arduino framework, embedXcode relies on the IDEs of the boards for the frameworks and tool-chains.</p> <p>The features specific to each edition are listed at Compare the editions .</p> <p>embedXcode relies on the IDEs of the boards for the frameworks and tool-chains.</p> <p>Related entries: embedXcode standard edition , embedXcode+ edition , emCode , Framework , IDE , Visual Studio Code , Xcode </p>"},{"location":"Appendixes/Glossary/#embedxcode-standard-edition","title":"embedXcode standard edition","text":"<p>embedXcode is deprecated and replaced by emCode.</p> <p>embedXcode is a template for Xcode. It eases development for the most popular embedded computing boards.</p> <p>The embedXcode standard edition focuses on core features.</p> <p>The features specific the embedXcode standard edition are listed at Compare the editions .</p> <p>Related entries: embedXcode , embedXcode+ edition , emCode , Framework , IDE , Visual Studio Code , Xcode </p>"},{"location":"Appendixes/Glossary/#embedxcode-edition","title":"embedXcode+ edition","text":"<p>embedXcode is deprecated and replaced by emCode.</p> <p>embedXcode is a template for Xcode. It eases development for the most popular embedded computing boards.</p> <p>The embedXcode+ edition provides extended functionalities like project sharing and external debugging.</p> <p>The features specific the embedXcode+ edition are listed at Compare the editions .</p> <p>Related entries: embedXcode , embedXcode standard edition , emCode , Framework , IDE , Visual Studio Code , Xcode </p>"},{"location":"Appendixes/Glossary/#emcode","title":"emCode","text":"<p>emCode is a set of tools to ease development for the most popular embedded computing boards.</p> <p>emCode still relies on the Arduino SDK but no longer targets Apple hardware and software. Instead, it is designed to be used with the excellent Visual Studio Code IDE on Linux or Windows Linux Sub-system (WSL).</p> <p>Related entries: IDE , Visual Studio Code </p> <p>Install: Install emCode </p>"},{"location":"Appendixes/Glossary/#energia","title":"Energia","text":"<p>Energia is the Arduino 1.0-based IDE for the LaunchPad boards.</p> <p>Although all the LaunchPad line of boards managed by Energia include a hardware debugger, the IDE doesn\u2019t feature the corresponding application.</p> <p>So embedXcode uses two external applications and tools for debugging: GDB, or GNU debugger, already included in the GCC tool-chain, and OpenOCD, or Open On-Chip Debugger.</p> <p>Related entries: ArduCAM , Debugger , Energia MT , GCC GNU Compiler Collection , IDE , LaunchPad , Open On- Chip Debugger , RedBear , XDS110 programmer-debugger </p>"},{"location":"Appendixes/Glossary/#energia-mt","title":"Energia MT","text":"<p>Energia Multi-Tasking or Energia MT is an extension of Energia based on TI-RTOS, the real-time operating system from Texas Instruments. Energia MT runs on a selected range of boards.</p> <p>The Galaxia Library provides the main RTOS elements encapsulated in easy-to-use objects.</p> <p>Related entries: Energia , LaunchPad </p>"},{"location":"Appendixes/Glossary/#esp32","title":"ESP32","text":"<p>The ESP32 by Espressif Systems is a SoC featuring WiFi and Bluetooth.</p> <p>There are many boards based on the ESP32, to be programmed using the Wiring / Arduino framework.</p> <p>The installation of the ESP32 board is performed with the Boards Manager on the Arduino IDE with a modified file and specific libraries for WiFi and Bluetooth.</p> <p>Related entries: Arduino , Boards , ESP8266 , IDE , Internet of Things </p> <p>Install: Install the Espressif platform </p> <p>Upload: Upload to ESP32 boards using WiFi </p> <p>Debug: Install the OpenOCD driver for ESP32 , Connect the ESP-Prog to the ESP32 board </p>"},{"location":"Appendixes/Glossary/#esp8266","title":"ESP8266","text":"<p>The ESP8266 by Espressif Systems is a SoC featuring a WiFi radio and a limited set of inputs/outputs.</p> <p>There are many boards based on the ESP8266, some of them more advanced like the NodeMCU board. Although promoted for Lua, the NodeMCU board can be programmed using the Wiring / Arduino framework.</p> <p>The NodeMCU boards support over-the-air upload.</p> <p>The installation of the ESP8266 board is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: ArduCAM , Arduino , Boards , ESP32 , IDE , Internet of Things </p> <p>Install: Install the Espressif platform , Install the NodeMCU platform </p> <p>Upload: Upload to NodeMCU 1.0 board , Upload to ESP8266 NodeMCU boards using WiFi </p>"},{"location":"Appendixes/Glossary/#file-cpp","title":"File .cpp","text":"<p>File extension for C++ code file.</p> <p>The <code>.cpp</code> C++ code file defines the classes and functions declared in a <code>.h</code> header file.</p> <p>The files with <code>.pde</code> or <code>.ino</code> extensions are actually C++ code.</p> <p>Related entries: C++ language , File .h , File .hpp , File .ino , File .pde , Sketch </p>"},{"location":"Appendixes/Glossary/#file-docset","title":"File .docset","text":"<p>File extension for documentation set, Apple\u2019s proprietary format for Xcode help.</p> <p>Related entries: File .tex </p>"},{"location":"Appendixes/Glossary/#file-h","title":"File .h","text":"<p>File extension for header file.</p> <p>A header file contains the list of public constants, variables, classes and functions defined in a <code>.c</code> C or <code>.cpp</code> C++ code file.</p> <p>A header file also lists the required libraries with <code>#include</code> statements.</p> <p>Among other libraries, it is highly recommended to mention the core libraries. This is done using one single <code>#include</code> statement.</p> <p>Related entries: C++ language , Core libraries , File .cpp , File .hpp , Libraries </p>"},{"location":"Appendixes/Glossary/#file-hpp","title":"File .hpp","text":"<p>Same as <code>.h</code>, but aimed at a <code>.cpp</code> C++ code file.</p> <p>The embedXcode standard edition only accepts <code>.h</code> header files.</p> <p>The embedXcode+ edition accepts both <code>.h</code> and <code>.hpp</code> header files.</p> <p>However, <code>.hpp</code> header files may not be compatible with standard IDEs.</p> <p>Related entries: C++ language , Core libraries , File .cpp , File .h , Libraries </p>"},{"location":"Appendixes/Glossary/#file-ino","title":"File .ino","text":"<p>File extension for the sketch, the main part of a program.</p> <p>The <code>.ino</code> extension is used by Arduino 1.0 and 1.5, Digispark, Energia and Teensy.</p> <p>It replaces the <code>.pde</code> extension.</p> <p>The <code>.pde</code> and <code>.ino</code> files aren\u2019t recognised as C++ code by Xcode. During the first compilation, the project is prepared by embedXcode: the files are recognised as C++ code to allow code-sense.</p> <p>Related entries: C++ language , File .cpp , File .pde , Sketch </p>"},{"location":"Appendixes/Glossary/#file-pde","title":"File .pde","text":"<p>File extension for the sketch, the main part of a program.</p> <p>The <code>.pde</code> extension is used by Arduino 0023, Maple and Wiring.</p> <p>It has been superseded by the <code>.ino</code> extension.</p> <p>The <code>.pde</code> and <code>.ino</code> files aren\u2019t recognised as C++ code by Xcode. During the first compilation, the project is prepared by embedXcode: the files are recognised as C++ code to allow code-sense.</p> <p>Related entries: C++ language , File .cpp , File .ino , Sketch </p>"},{"location":"Appendixes/Glossary/#file-tex","title":"File .tex","text":"<p>File extension for LaTeX file, a language for documents with high quality formatting.</p> <p>The LaTeX files are generated by Doxygen and converted into PDF documents.</p> <p>Related entries: File .docset </p>"},{"location":"Appendixes/Glossary/#framework","title":"Framework","text":"<p>The framework includes a set of libraries (including core and application libraries) that provide an hardware abstraction layer.</p> <p>The libraries are invoked by the <code>#include</code> statement.</p> <p>Thanks to the hardware abstraction layer, the same code can virtually run on any boards with an IDE based on that framework.</p> <p>The framework for the boards is mostly written in C and C++.</p> <p>The two references are Wiring and Arduino.</p> <p>Related entries: Application libraries , Arduino , ARM mbed , Boards , C++ language , Core libraries , Cosa , embedXcode , embedXcode+ , IDE , Libraries , MCU , Platform , Tool-chain , Wiring </p>"},{"location":"Appendixes/Glossary/#freedom","title":"Freedom","text":"<p>The Freedom boards feature ARM MCUs from Freescale and run the mbed SDK with the GCC tool-chain.</p> <p>Support for the mbed SDK is discontinued.</p> <p>Related entries: ARM mbed , Boards , GCC GNU Compiler Collection , OpenOCD Open On-Chip Debugger </p>"},{"location":"Appendixes/Glossary/#glowdeck","title":"Glowdeck","text":"<p>The Glowdeck board can also be used as a development board. It relies on a 32-bit ARM architecture.</p> <p>The Glowdeck board requires a plug-in for the Arduino IDE.</p> <p>Related entries: Arduino , Boards , IDE </p>"},{"location":"Appendixes/Glossary/#gnu-compiler-collection","title":"GNU Compiler Collection","text":"<p>The GCC or GNU Compiler Collection is de facto standard for many micro-controllers. It is part of the GNU tool-chain.</p> <p>A specific version is available for the ARM MCUs.</p> <p>Related entries: ARM mbed , Energia , Freedom , GDB GNU Debugger ,  Nordic , Nucleo , OpenOCD Open On-Chip Debugger , Particle , Tool-Chain </p>"},{"location":"Appendixes/Glossary/#gnu-debugger","title":"GNU Debugger","text":"<p>The GDB or GNU Debugger is de facto standard debugging tools for many micro-controllers. It is part of the GNU tool-chain.</p> <p>It is based on a client-server model. The client runs on GDB, and the server is a proprietary or open-source driver, and includes MSPDebug, Segger J-Link, ST-Link or OpenOCD.</p> <p>Related entries:  GCC GNU Compiler Collection ,  MSPDebug , OpenOCD Open On-Chip Debugger , Segger J-Link programmer-debugger , ST-Link ,Tool-Chain </p>"},{"location":"Appendixes/Glossary/#ide","title":"IDE","text":"<p>IDE stands for integrated development environment and is an application used for developing programs.</p> <p>The IDEs used for the boards are based on the Processing IDE, making them very similar.</p> <p>They feature a text editor and runs on Windows, Linux or Mac OS X. They use on the Wiring and Arduino frameworks, use the C++ language and rely on different tool-chains.</p> <p>They are used to develop programs to be run on different boards. Each board has its own version of the IDE, differentiated by the colours of the interface.</p> <p>Another examples of IDE are Xcode and Visual Studio Code.</p> <p>Related entries: Arduino , Boards , C++ language , Debugger , embedXcode , embedXcode+ , Energia , ESP32 , ESP8266 , Framework , Glowdeck , Intel , LightBlue Bean , Maple IDE , MediaTek LinkIt , Microduino , MPIDE , panStamp , Platform , Processing , RFduino , Robotis OpenCM , Seeeduino , Simblee , Teensyduino , TinyCircuits , Tool-chain , Udoo Neo , Visual Studio Code Wiring , Xcode </p>"},{"location":"Appendixes/Glossary/#intel","title":"Intel","text":"<p>In June 2017, Intel announced the end of support for the Galileo and Edison boards mid-December 2017.</p> <p>The Galileo and Edison boards by Intel features a 32-bit Pentium processor on an Arduino-compatible form-factor board.</p> <p>The installation of the Intel boards is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Contrary to other boards, the Galileo is not powered through USB.</p> <ul> <li> <p>First always connect the power supply to power the board.</p> </li> <li> <p>Then check the Power LED is on.</p> </li> <li> <p>Finally, connect the board to the computer through USB.</p> </li> </ul> <p>Powering the board directly through USB may damage the board.</p> <p>Related entries: Arduino , Boards , IDE , Internet of Things </p>"},{"location":"Appendixes/Glossary/#internet-of-things","title":"Internet of Things","text":"<p>The Internet of Things or IoT is a network of objects.</p> <p>The things are objects powered by a micro-controller and featuring sensors and actuators.</p> <p>The network can be local \u2013LAN or local area network\u2013, or wide \u2013WAN or wide area network, through a connection to internet\u2013 via a router.</p> <p>Connection is done through Bluetooth, Bluetooth Low Energy, WiFi, Ethernet, sub-1 GHz, LoRa, among other protocols.</p> <p>Related entries: Arduino , ESP32 , ESP8266 , Intel , LaunchPad , LightBlue Bean , MediaTek LinkIt , Microsoft , Moteino , panStamp , Particle , RedBear , RFduino , Simblee , Udoo Neo </p>"},{"location":"Appendixes/Glossary/#launchpad","title":"LaunchPad","text":"<p>The LaunchPad boards are built by Texas Instruments and feature different architectures, most of them being supported by Energia:</p> <ul> <li> <p>16-bit MSP430G2, MSP430F and MSP430FR,</p> </li> <li> <p>16-bit C2000,</p> </li> <li> <p>32-bit Cortex-M3 CC1310 with sub-1 GHz, CC1350 with sub-1 GHz and Bluetooth Low Energy,</p> </li> <li> <p>32-bit Cortex-M3 CC2650 with Bluetooth Low Energy,</p> </li> <li> <p>32-bit Cortex-M4 CC1312 with sub-1 GHz, CC1352 with sub-1 GHz and Bluetooth Low Energy,</p> </li> <li> <p>32-bit Cortex-M4 CC32xx with WiFi,</p> </li> <li> <p>32-bit Cortex-M4 Stellaris or Tiva C Series.</p> </li> <li> <p>32-bit Cortex-M4 MSP432.</p> </li> </ul> <p>The IDE is Energia, with the RTOS-based Energia Multi-Tasking extension for selected boards.</p> <p>All the LaunchPad boards include a programmer-debugger, to be used with MSPDebug, DSLite or OpenOCD.</p> <p>Related entries: Boards , Debugger , Energia , Energia MT , Internet of Things , XDS110 programmer-debugger </p> <p>Install: Install the LaunchPad platform </p> <p>Configure: Set options for selected LaunchPad boards </p> <p>Upload: Upload to LaunchPad C2000 , Upload to LaunchPad CC3200 WiFi , Upload to LaunchPad MSP430F5529 and MSP430FR5969 </p> <p>Debug: Check the configuration , Configure the LaunchPad CC3200 WiFi </p>"},{"location":"Appendixes/Glossary/#libraries","title":"Libraries","text":"<p>There are four kinds of libraries:</p> <ul> <li> <p>The core libraries include all the basic functions required for development. Each platform provides its own set compatible with the Wiring or Arduino framework.</p> </li> <li> <p>The application libraries are optional libraries to provide additional features, like managing the specific UART, I\u00b2C and SPI ports.</p> </li> <li> <p>The user\u2019s libraries are developed, or downloaded and installed, by the user, and stored under the <code>Library</code> sub-folder on the sketchbook folder.</p> </li> <li> <p>The local libraries are part of the project and located on the same folder as the main sketch.</p> </li> </ul> <p>The embedXcode+ edition introduces a variant for the local libraries, the pre-compiled libraries.</p> <ul> <li>Instead of using the source code, the pre-compiled libraries are already built and ready to use.</li> </ul> <p>Libraries are managed with an <code>#include</code> statement on the main sketch and header files and with variables on the main <code>Makefile</code>.</p> <p>Related entries: Application libraries , Core libraries , File .h , Framework , Local libraries , User\u2019s libraries </p>"},{"location":"Appendixes/Glossary/#lightblue-bean","title":"LightBlue Bean","text":"<p>In June 2018, Punch Through Design announced it was discontinuing the Bean boards.</p> <p>The LightBlue Bean by Punch Through Design combines an Atmega328P with a CC2540-based Bluetooth Low Energy radio. The board fits into a match-box.</p> <p>LightBlue provides a plug-in to be installed on top of the Arduino IDE. Please refer to the relevant section for installation.</p> <p>Upload and serial console are performed over-the-air through Bluetooth.</p> <p>Related entries: Arduino , Boards , IDE , Internet of Things </p>"},{"location":"Appendixes/Glossary/#little-robot-friends","title":"Little Robot Friends","text":"<p>The Little Robot Friends is a nice robot with sensors \u2013touch, sound, light\u2013 and actuators \u2013buzzer, LEDs. It can also be programmed.</p> <p>First generation ran on an ATmega328P and required a plug-in for the Arduino IDE 1.0. The installation of the Little Robot Friends AVR board is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Second generation features an SAMD MCU. The installation of the Little Robot Friends SAMD board is performed manually but requires the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Boards </p>"},{"location":"Appendixes/Glossary/#local-libraries","title":"Local libraries","text":"<p>The local libraries are part of the project and located on the same folder as the main sketch.</p> <p>They require to be explicitly mentioned with the <code>#include</code> statement on the main sketch.</p> <p>By default, all the local libraries are included.</p> <p>The embedXcode+ edition allows to create folders for local libraries and select them after the <code>USER_LIBS_LIST</code> variable on the main <code>Makefile</code>.</p> <p>Related entries: Libraries , Pre-compiled libraries </p>"},{"location":"Appendixes/Glossary/#maple","title":"Maple","text":"<p>The Maple boards are based on 32-bit ARM MCUs.</p> <p>Related entries: Boards , Maple IDE , Microduino , Robotis </p>"},{"location":"Appendixes/Glossary/#maple-ide","title":"Maple IDE","text":"<p>MapleIDE is the Wiring-based IDE for the Maple boards.</p> <p>The MapleIDE requires special drivers.</p> <p>The Maple environment misses two important libraries*: <code>strings.h</code> and <code>stream.h</code>.</p> <p>Related entries: IDE , Maple , Microduino , Robotis OpenCM </p>"},{"location":"Appendixes/Glossary/#mcu","title":"MCU","text":"<p>MCU stands for micro-controller unit and includes all the parts of a computer: processing unit, read only memory or EEPROM, flash memory to store the programs and random-access memory or SRAM to store data. The MCUs are grouped in families or architectures.</p> <p>It also includes general purpose inputs outputs or GPIOs. Some of them can be used for specialised buses like, among the most popular:</p> <ul> <li> <p>UART or universal asynchronous receiver/transmitter, most commonly serial port,</p> </li> <li> <p>SPI or serial peripheral interface,</p> </li> <li> <p>I\u00b2C or inter-integrated circuit,</p> </li> <li> <p>TWI or two wire interface,</p> </li> <li> <p>I\u00b2S or inter inter-chip sound,</p> </li> <li> <p>CAN or controller area network.</p> </li> </ul> <p>Other extras may include a real-time clock, a FPU or floating-point unit, \u2026</p> <p>Related entries: Architecture , Boards , Framework , Platform , Tool-chain </p>"},{"location":"Appendixes/Glossary/#mediatek-linkit","title":"MediaTek LinkIt","text":"<p>The MediaTek LinkIt boards are dedicated to IoT.</p> <p>The MediaTek LinkIt One board features WiFi, Bluetooth 2.0 and 4.0 BLE, GSM and GPRS, GPS, on an Arduino form-factor.</p> <p>The MediaTek LinkIt Smart 7688 Duo has the same dual-core configuration as the Arduino Y\u00fan board. The processor runs on Linux for WiFi and while the controller is an ATmega328 compatible with Arduino.</p> <p>The MediaTek LinkIt 7697 board features WiFi, Bluetooth 2.0 and 4.0 BLE, on an compact form-factor.</p> <p>The installation of the MediaTek boards is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Boards , IDE , Internet of Things </p>"},{"location":"Appendixes/Glossary/#microduino","title":"Microduino","text":"<p>The Microduino boards feature two different architectures on a highly compact form-factor.</p> <p>The 8-bit ATmega architecture includes the Microduino-Core with an ATmega328P at 16 MHz and 5V, the Microduino-Core+ with an ATmega644PA at 16 MHz and 5V and the Microduino-Core USB with an ATmega32u4 at 16 MHz. Those boards run on a plug-in for the Arduino IDE.</p> <p>The 32-bit architecture corresponds to the Microduino-Core STM32 board, and uses the MapleIDE as IDE.</p> <p>Related entries: Arduino , Boards , IDE , Maple , Maple IDE </p>"},{"location":"Appendixes/Glossary/#microsoft","title":"Microsoft","text":"<p>Microsoft has launched an IoT DevKit for its Azure cloud service.</p> <p>The board combines a Cortex-M4 with WiFi and a large selection of sensors.</p> <p>The installation of the Microsoft platform is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Boards , Internet of Things </p> <p>Install: Install the Microsoft platform </p> <p>Upload: Upload to Microsoft Azure IoT DevKit </p>"},{"location":"Appendixes/Glossary/#moteino","title":"Moteino","text":"<p>The Moteino platform by LowPowerLab combines an ATMega328 with a RFM69 sub-1GHz or a RFM95 LoRa radio.</p> <p>The installation of the Moteino platform is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>The RFM69 sub-1GHz-based board requires the RFM69 library, while the RFM95 LoRa-based board requires the LoRa library from RadioHead.</p> <p>Related entries: Arduino , Boards , Internet of Things </p> <p>Install: Install the Moteino platform </p>"},{"location":"Appendixes/Glossary/#mpide","title":"MPIDE","text":"<p>MPIDE is the Arduino 0023-based IDE for the chipKIT boards. A beta release is based on Arduino 1.5.</p> <p>MPIDE stands for Multi-Platform IDE and targets boards with a PIC32 MCU.</p> <p>MPIDE is deprecated. Use instead the Boards Manager featured by Arduino.CC IDE release 1.6.5.</p> <p>Related entries: 4D Systems , Arduino , chipKIT , Debugger , IDE </p>"},{"location":"Appendixes/Glossary/#mspdebug","title":"MSPDebug","text":"<p>MSPDebug is an open-source driver and runs as a server for GDB.</p> <p>It is used for the LaunchPad boards based on the MSP430 MCUs from Texas Instruments. It is part of the Energia bundle and installed with Energia.</p> <p>Related entries: GDB GNU Debugger </p>"},{"location":"Appendixes/Glossary/#nordic","title":"Nordic","text":"<p>The Nordic boards provide an easy introduction to the internet-of-things, with Bluetooth 4.0 or BLE. The boards are based on the nRF51822 SoC, which combines a Bluetooth Low Energy radio and a Cortex-M0 MCU.</p> <p>The boards run on the mbed SDK with the GCC tool-chain.</p> <p>Support for the mbed SDK is discontinued.</p> <p>Related entries: ARM mbed , Boards , GCC GNU Compiler Collection , OpenOCD Open On-Chip Debugger </p>"},{"location":"Appendixes/Glossary/#nucleo","title":"Nucleo","text":"<p>The Nucleo boards feature ARM MCUs from STMicroelectronics and run the mbed SDK with the GCC tool-chain.</p> <p>Support for the mbed SDK is discontinued.</p> <p>The Nucleo boards are now supported by the STM32duino platform.</p> <p>Related entries: ARM mbed , Boards , GCC GNU Compiler Collection , OpenOCD Open On-Chip Debugger , STM32duino </p>"},{"location":"Appendixes/Glossary/#open-on-chip-debugger","title":"Open On-Chip Debugger","text":"<p>The Open On-Chip Debugger, or OpenOCD, provides tools for programming and debugging MCUs. It runs with other software like GDB from the GCC tool-chain.</p> <p>It requires a hardware programmer-debugger.</p> <p>Related entries: ARM mbed , Energia , GCC GNU Compiler Collection , GDB GNU Debugger , Tool-chain </p>"},{"location":"Appendixes/Glossary/#panstamp","title":"panStamp","text":"<p>The panStamp platform features a sub-1 GHz radio and includes three architectures, one 8 bits, another 16 bits and the last 32 bits, each with a dedicated boards package managed by the Boards Manager on the Arduino 1.8 IDE.</p> <p>The 8-bit architecture corresponds to the panStamp AVR with an ATmega328P at 16 MHz and 5V, while the 16-bit architecture corresponds to the panStamp NG based on the MSP430. Both the panStamp AVR and panStamp NG are discontinued. Finally, the 32-architecture corresponds to the panStamp Quantum based on the STM32L4.</p> <p>Related entries: Arduino , Boards , IDE , Internet of Things </p>"},{"location":"Appendixes/Glossary/#particle","title":"Particle","text":"<p>The Particle Core board combines an ARM STM32F103 with the CC3000 WiFi radio from Texas Instruments.</p> <p>Particle provides a dedicated cloud to manage the board from anywhere in the world. A compiled sketch can be uploaded though USB connection or over-the-air using WiFi and the Particle Cloud.</p> <p>Particle relies on the Wiring / Arduino framework and use the standard GCC tool-chain.</p> <p>Up to now, there\u2019s only an online IDE. The offline IDE called Particle-Dev and based on Atom is currently in development.</p> <p>Particle was previously Spark.</p> <p>Related entries: Architecture , Arduino , Boards , GCC GNU Compiler Collection , Internet of Things , Tool-chain , Wiring </p>"},{"location":"Appendixes/Glossary/#platform","title":"Platform","text":"<p>A platform is a mix of IDE, frameworks, boards, architectures and tool-chains.</p> <p>As an example, the Arduino platform includes</p> <ul> <li> <p>An IDE called Arduino;</p> </li> <li> <p>Two frameworks, Arduino 1.0 and Arduino 1.5, the later still in beta;</p> </li> <li> <p>Many different boards, which can be grouped in two architectures:</p> </li> <li> <p>the 8-bit ATmega-based boards, as Arduino Uno or Arduino Mega2560,</p> </li> <li> <p>and the 32-bit SAM-based Arduino Due board;</p> </li> <li> <p>Two tool-chains, one for each architecture.</p> </li> </ul> <p>Related entries: Architecture , Boards , Framework , IDE , MCU , Tool-chain </p>"},{"location":"Appendixes/Glossary/#pre-compiled-libraries","title":"Pre-compiled libraries","text":"<p>The embedXcode+ edition introduces a variant for the local libraries, the pre-compiled libraries.</p> <p>Instead of using the source code, the pre-compiled libraries are already built and ready to use.</p> <p>Just like the local libraries, they are part of the project and located on the same folder as the main sketch, they require to be explicitly mentioned by the <code>#include</code> statement on the main sketch and, they are all included by default.</p> <p>A folder for a pre-compiled library, for example <code>LocalLibrary</code>, includes at least three files.</p> <ul> <li> <p>The file <code>LocalLibrary.a</code> is the pre-compiled library.</p> </li> <li> <p>One or more <code>.h</code> files correspond to the header files.</p> </li> <li> <p>The additional file <code>.board</code> gives the board or MCU the library has been compiled against.</p> </li> </ul> <p>The embedXcode+ edition checks the consistency of the pre-compiled libraries with the current target based on the file <code>.board</code>, and includes the pre-compiled libraries with extension <code>.a</code> during linking.</p> <p>Related entries: Local libraries </p>"},{"location":"Appendixes/Glossary/#processing","title":"Processing","text":"<p>All the boards use the Processing IDE, adapted for C++.</p> <p>Processing doesn\u2019t feature any board. Instead, it runs on the main computer and provides an easy interface for displaying graphs based on data acquired from the board.</p> <p>Related entries: IDE </p>"},{"location":"Appendixes/Glossary/#raspberry-pi","title":"Raspberry Pi","text":"<p>The Raspberry Pi boards are single-board computers running on Linux. A board package is available for the Arduino IDE.</p> <p>Related entries: RasPiArduino </p>"},{"location":"Appendixes/Glossary/#raspiarduino","title":"RasPiArduino","text":"<p>The RasPiArduino board package brings the Wiring / Arduino SDK to the Raspberry Pi boards. Unless other boards packages, it is not managed by the Board Manager but installed instead on the <code>hardware</code> sub-folder of the Arduino sketchbook folder.</p> <p>Related entries: Arduino , Raspberry Pi </p> <p>Install: Install the RasPiArduino platform , Install the RasPiArduino boards package , Install the tools and SDK on the Raspberry Pi </p> <p>Configure: Set options for Raspberry Pi </p> <p>Upload: Enter Raspberry Pi IP address and password , Upload to Raspberry Pi </p> <p>Debug: Connect to the Raspberry Pi </p>"},{"location":"Appendixes/Glossary/#redbear","title":"RedBear","text":"<p>The RedBear \u2013formerly RedBearLab\u2013 boards provide an easy introduction to the internet-of-things.</p> <p>In March 2018, RedBear announced it was acquired by Particle. As a consequence, RedBear will terminate support for its boards on September 2019.</p> <p>The boards based on the Nordic nRF51822 feature Bluetooth 4.0 or BLE. The Nordic nRF51822 SoC combines a Bluetooth Low Energy radio and a Cortex-M0 MCU. Those boards can be used with the Wiring / Arduino framework as well as with the mbed framework, both with the GCC tool-chain. The installation of the RedBear board is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>The RedBear Duo board runs with the Wiring / Arduino framework and features WiFi and BLE connectivity. It requires a plug-in and a library for the Arduino 1.6.5 IDE.</p> <p>The boards based on the CC3200 feature WiFi. The CC3200 from Texas Instruments combines a WiFi radio and a Cortex-M4 MCU. Those boards are supported natively by the Energia IDE.</p> <p>Support for the mbed SDK is discontinued.</p> <p>Related entries: Arduino , Boards , Energia , Internet of Things , arm mbed , OpenOCD Open On-Chip Debugger </p>"},{"location":"Appendixes/Glossary/#rfduino","title":"RFduino","text":"<p>RFduino combines a Cortex-M0 MCU with Bluetooth Low Energy on a compact board.</p> <p>RFduino requires a plug-in for the Arduino IDE 1.5.</p> <p>Related entries: Arduino , Boards , IDE , Internet of Things , Simblee </p>"},{"location":"Appendixes/Glossary/#robotis","title":"Robotis","text":"<p>The Robotis OpenCM9.04 board is based on the 32-bit ARM MCU.</p> <p>The Robotis OpenCM is the dedicated IDE.</p> <p>Related entries: Boards , Maple , Robotis OpenCM </p>"},{"location":"Appendixes/Glossary/#robotis-opencm","title":"Robotis OpenCM","text":"<p>The Robotis OpenCM is the Wiring-based IDE for the Robotis boards.</p> <p>The Robotis OpenCM requires special drivers.</p> <p>The Robotis environment misses two important libraries*: <code>strings.h</code> and <code>stream.h</code>.</p> <p>Related entries: IDE , Maple IDE , Robotis , Wiring </p>"},{"location":"Appendixes/Glossary/#seeeduino","title":"Seeeduino","text":"<p>Seeed Studio is a hardware manufacturer, especially known for its Grove system.</p> <p>The Seeeduino boards are based on the ATmega 328 or the SAMD compatible with the Arduino Uno and Arduino Zero, or on the Cortex-M SAMD. The Wio Terminal features two MCUs: a general Cortex-M4F SAMD51 and a network-processor RTL8720DN.</p> <p>The installation of the Seeeduino board is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Boards , IDE </p> <p>Install: Install the Seeeduino AVR platform , Install the Seeeduino SAMD platform , Install the Ameba RTL8720DN platform for the Wio Terminal board </p> <p>Upload: Upload to Seeeduino SAMD boards , Upload to the RTL8720DN MCU of the Wio Terminal , Reflash the RTL8720DN MCU as a network-processor for the Wio Terminal board </p> <p>Debug: Connect the Segger J-Link to the Seeeduino Xiao M0 </p>"},{"location":"Appendixes/Glossary/#segger-j-link-programmer-debugger","title":"Segger J-Link programmer-debugger","text":"<p>Segger programmers-debuggers are the de facto standard for Cortex-M. The wide range of models includes the J-Link Edu and the J-Link Edu mini.</p> <p>Segger provides two sets of tools: command-line J-Link and GUI-based Ozone.</p> <p>Related entries: Debugger </p> <p>Install: Install utilities for Segger debugger , Install the Segger J-Link Software Suite , Install the Segger Ozone Graphical Debugger .</p> <p>Debug: Debug the boards with Ozone , Debug the boards with GDB </p>"},{"location":"Appendixes/Glossary/#simblee","title":"Simblee","text":"<p>Simblee is an updated version of the RFduino board.</p> <p>It combines a Cortex-M0 MCU with Bluetooth Low Energy on a compact board.</p> <p>The installation of the Simblee board is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Boards , IDE , Internet of Things , RFduino </p>"},{"location":"Appendixes/Glossary/#sketch","title":"Sketch","text":"<p>A sketch is basically a program written in C++ and based on the Wiring and Arduino framework.</p> <p>The valid file extensions for a sketch are <code>.pde</code> or <code>.ino</code>.</p> <p>Related entries: C++ language , File .cpp , File .ino , File .pde </p>"},{"location":"Appendixes/Glossary/#stm32duino","title":"STM32duino","text":"<p>The STM32duino platform provides an easy solution for the Nucleo and Discovery boards based on the STM32 MCUs.</p> <p>The initial project STM32duino has been renamed Arduino STM32. The new STM32duino project is maintained by STMicroelectronics.</p> <p>The installation of the Arduino STM32 platform is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Related entries: Arduino , Arduino STM32 , Boards , IDE , MapleIDE </p> <p>Install: Install the STM32duino platform </p> <p>Debug: Debug the boards with GDB </p>"},{"location":"Appendixes/Glossary/#arduino-stm32","title":"Arduino STM32","text":"<p>Previously named STM32duino, the Arduino STM32 project provides support for boards based on the STM32F1xx, STM32F3xx and STM32F4xx MCUs.</p> <p>The installation of the Arduino STM32 platform is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>It is now superseded by the new STM32duino project maintained by STMicroelectronics.</p> <p>Related entries: Arduino , Boards , IDE , MapleIDE , STM32duino </p>"},{"location":"Appendixes/Glossary/#st-link-programmer-debugger","title":"ST-Link programmer-debugger","text":"<p>The ST-Link programmer-debugger is specific to STMicroelectronics boards. It includes the hardware programmer-debugger and the software driver compatible with GDB.</p> <p>Although STMicroelectronics recommends STM32CubeProgrammer , which includes ST-Link but requires Java, embedXcode relies on Texane ST-Link, an open-source and native version of the STMicroelectronics ST-Link tools.</p> <p>Related entries: GDB GNU Debugger ,  STM32duino </p> <p>Install: Install the STM32duino platform </p> <p>Debug: Debug the boards with GDB </p>"},{"location":"Appendixes/Glossary/#teensy","title":"Teensy","text":"<p>Teensy includes two major architectures:</p> <ul> <li> <p>8-bit ATmega for Teensy 2 and</p> </li> <li> <p>32-bit ARM for Teensy 3.</p> </li> </ul> <p>The Teensy boards require Teensyduino, a plug-in for the Arduino IDE.</p> <p>Related entries: Boards , Teensyduino </p> <p>Install: Install the Teensy platform </p> <p>Configure: Set options for Teensy </p> <p>Upload: Upload to Teensy 3.0 and 3.1 Boards </p>"},{"location":"Appendixes/Glossary/#teensyduino","title":"Teensyduino","text":"<p>Teensyduino is the Arduino 1.8 IDE-compatible plug-in for the Teensy boards.</p> <p>Please refer to the relevant section for installation to avoid possible conflicts with the Arduino 1.8 IDE.</p> <p>Related entries: IDE , Teensy </p> <p>Install: Install the Teensy platform </p>"},{"location":"Appendixes/Glossary/#tinycircuits","title":"TinyCircuits","text":"<p>TinyCircuits specialises in very compact circuits. The TinyScreen+ embeds a Cortex-M0 with an OLED display.</p> <p>The installation of the TinyScreen+ board is performed with the Boards Manager and the Lbirary Manager on the Arduino 1.6 IDE.</p> <p>Related entries: Arduino , Boards , IDE </p>"},{"location":"Appendixes/Glossary/#tool-chain","title":"Tool-chain","text":"<p>A tool-chain is a set of tools used to build, link, upload and debug a sketch to a board.</p> <p>The tools from the tool-chain are called by the IDE.</p> <p>The MCUs are grouped by architectures and each architecture has its specific tool-chain.</p> <p>Most of the tool-chains used with the embedded computing boards are based on GCC, or GNU Compiler Collection, with GDB, or GNU Debugger, as programmer-debugger.</p> <p>Other tools include programmers and debuggers, like OpenOCD, or Open On-Chip Debugger.</p> <p>Related entries: Architecture , C++ language , Debugger , Framework , GCC GNU Compiler Collection , GDB GNU Debugger , IDE , MCU , OpenOCD Open On-Chip Debugger , Particle , Platform </p>"},{"location":"Appendixes/Glossary/#udoo-neo","title":"Udoo Neo","text":"<p>The Udoo Neo is a board featuring a Freescale i.MX 6SoloX processor from Freescale. The processor is dual core with a Cortex-A9 MPU running on Linux and a Cortex-M4 MCU for real-time GPIO.</p> <p>The MCU supports the Wiring / Arduino framework. Installation relies on the Boards Manager featured by Arduino.CC IDE release 1.6.5.</p> <p>Related entries: Arduino , Boards , IDE , Internet of Things </p>"},{"location":"Appendixes/Glossary/#users-libraries","title":"User\u2019s libraries","text":"<p>The local libraries are part of the project and located on the same folder as the main sketch.</p> <p>By default, no user\u2019s library is included.</p> <p>They require to be</p> <ul> <li> <p>explicitly mentioned with the <code>#include</code> statement on the main sketch,</p> </li> <li> <p>and listed on the main <code>Makefile</code> after the and listed on the main <code>Makefile</code> after the <code>USER_LIBS_LIST</code> variable.</p> </li> </ul> <p>The embedXcode+ edition lists all the user\u2019s libraries for the selected platform on the main <code>Makefile</code>.</p> <p>Related entries: Libraries </p>"},{"location":"Appendixes/Glossary/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code is a light IDE developed by Microsoft. Extensions make it highly customisable.</p> <p>Contrary to embedXcode, emCode relies on Visual Studio Code.</p> <p>Related entries: IDE , emCode </p> <p>Install: Install Visual Studio Code , Install the recommended extensions </p>"},{"location":"Appendixes/Glossary/#wiring","title":"Wiring","text":"<p>Wiring focuses on defining the framework.</p> <p>Some boards are especially designed for Wiring, as the ATmega64-based Wiring S.</p> <p>Related entries: Boards , Framework , IDE , Particle , Robotis OpenCM </p>"},{"location":"Appendixes/Glossary/#xcode","title":"Xcode","text":"<p>Xcode is the official IDE from Apple.</p> <p>Xcode versions 9 and 10 are recommended for embedXcode.</p> <p>For previous versions, consider the legacy releases of embedXcode.</p> <p>emCode no longer runs on Xcode but on Visual Studio Code.</p> <p>Related entries: embedXcode , embedXcode+ , emCode , IDE , Visual Studio Code </p>"},{"location":"Appendixes/Glossary/#xds110-programmer-debugger","title":"XDS110 programmer-debugger","text":"<p>The XDS110 programmer-debugger is specific to Texas Instruments LaunchPad boards.</p> <p>Most of the boards from the SimpleLink portfolio, including the MSP432, CC32xx, CC26xx and CC13xx LaunchPad boards, feature the XDS110 programmer-debugger.</p> <p>Although the default programmer is DSLite, the XDS110 accepts the open-source OpenOCD or Open On-Chip Debugger utility. OpenOCD brings additional features, like selecting one board among multiple connected, as well as debugging, acting as a server for the GDB client, part of the GNU tool-chain.</p> <p>Related entries: Debugger , LaunchPad , GCC GNU Compiler Collection , OpenOCD Open On-Chip Debugger </p> <p>Install: Install debug tools for the LaunchPad boards , Install the OpenOCD driver </p> <p>Upload: Select among multiple boards connected through XDS110 , Upload to LaunchPad boards with XDS110 </p> <p>Debug: Debug the boards with GDB </p>"},{"location":"Appendixes/Glossary/#visit-the-official-websites","title":"Visit the official websites","text":""},{"location":"Appendixes/History/","title":"Release history","text":"<p>Details of the latest release are available at the emCode release notes .</p>"},{"location":"Appendixes/History/#go-to-release-14","title":"Go to release 14","text":"Date Release Comment 04 Sep 2023 14.2.0 Added core target 04 Sep 2023 14.1.8 Updated support for Raspberry Pi Pico boards 15 Aug 2023 14.1.7 Improved general stability 31 Jul 2023 14.1.6 Initial public release 19 Jul 2023 14.1.5 Added TyTools for Teensy boards 03 Jul 2023 14.1.4 Added preliminary support for Seeed nRF52840 Mbed-OS boards 19 Jun 2023 14.1.3 Updated support for Raspberry Pi Pico RP2040 boards 05 Jun 2023 14.1.2 Updated support for Teensy boards 05 Jun 2023 14.1.1 Added support for Xiao ESP32-S3 board 01 Jun 2023 14.1.0 Switched to official Microsoft UF2 tools 30 May 2023 14.0.9 Improved stability for UF2 upload to RP2040 boards 22 May 2023 14.0.8 Improved stability for local pre-compiled libraries 16 May 2023 14.0.7 Improved stability for LaunchPad CC1352 boards 11 May 2023 14.0.6 Added support for Raspberry Pi Debug Probe CMSIS-DAP 09 Apr 2023 14.0.5 Updated support for Raspberry Pi Pico RP2040 boards 02 May 2023 14.0.4 Enhanced stability 24 Apr 2023 14.0.3 Updated support for Teensy boards 24 Apr 2023 14.0.2 Updated support for Raspberry Pi Pico RP2040 boards 24 Apr 2023 14.0.1 Updated support for ESP32 boards 17 Apr 2023 14.0.0 Removed deprecated platforms"},{"location":"Appendixes/History/#go-to-release-13","title":"Go to release 13","text":"Date Release Comment 03 Mar 2023 13.0.7 Updated support for Arduino MBED boards 03 Mar 2023 13.0.6 Updated support for Raspberry Pi Pico RP2040 boards 28 Feb 2023 13.0.5 Updated support for LaunchPad MSP430 GCC-ELF boards 28 Feb 2023 13.0.4 Updated support for Espressif ESP32 boards 16 Feb 2023 13.0.3 Updated support for Raspberry Pi Pico RP2040 boards 09 Feb 2023 13.0.2 Updated support for Seeed SAMD boards 03 Feb 2023 13.0.1 Updated support for Arduino mbed boards 31 Jan 2022 13.0.0 Added archive for core library"},{"location":"Appendixes/History/#go-to-release-12","title":"Go to release 12","text":"Date Release Comment 12 Jan 2022 12.1.21 Refactored shared parameters 03 Jan 2023 12.1.20 Updated support for Raspberry Pi RP2040 boards 22 Dec 2022 12.1.19 Updated support for ESP32 and STM32 boards 19 Dec 2022 12.1.18 Updated support for Raspberry Pi RP2040 boards and Arduino mbed boards 29 Nov 2022 12.1.17 Updated support for Raspberry Pi RP2040 boards 19 Nov 2022 12.1.16 Updated support for Teensy boards 18 Nov 2022 12.1.15 Added support for Seeeduino Xiao nRF52840 12 Nov 2022 12.1.14 Added optional path to user\u2019s library 03 Nov 2022 12.1.13 Updated support for Adadruit SAMD and Arduino AVR boards 18 Oct 2022 12.1.12 Updated support for Raspberry Pi RP2040 boards 14 Oct 2022 12.1.11 Added support for Raspberry Pi W RP2040 board 26 Sep 2022 12.1.10 Updated support for Raspberry Pi RP2040 boards 17 Sep 2022 12.1.9 Updated support for Espressif ESP32 boards 15 Sep 2022 12.1.8 Updated support for Adafruit Feather M0, M4, nRF52 and RP2040 boards 31 Aug 2022 12.1.7 Updated compiler for LaunchPad Cortex-M boards 29 Aug 2022 12.1.6 Updated support for Raspberry Pi RP2040 boards 15 Aug 2022 12.1.5 Updated support for Raspberry Pi RP2040 boards 25 Jul 2022 12.1.4 Updated support for Raspberry Pi RP2040 boards 17 Jul 2022 12.1.3 Updated support for Raspberry Pi RP2040 boards 12 Jul 2022 12.1.2 Added support for iLabs Challenger RP2040 LoRa boards 08 Jul 2022 12.1.1 Updated support for ESP32 boards 01 Jul 2022 12.1.0 Refactored names of variables 24 Jun 2022 12.0.22 Updated support for STM32 Nucleo boards 16 Jun 2022 12.0.21 Updated support for Raspberry Pi RP2040 boards 09 Jun 2022 12.0.20 Updated support for Raspberry Pi RP2040 boards 03 Jun 2022 12.0.19 Improved stability for ST Nucleo boards 14 May 2022 12.0.18 Enhanced stability 12 May 2022 12.0.18 Updated support for Raspberry Pi RP2040 boards 06 May 2022 12.0.17 Updated support for ESP32 boards 26 Mar 2022 12.0.16 Updated support for Raspberry Pi RP2040 boards 24 Mar 2022 12.0.15 Updated support for Raspberry Pi RP2040 boards 19 Apr 2022 12.0.14 Updated distribution tools 06 Apr 2022 12.0.13 Updated support for Arduino mbed boards 24 Mar 2022 12.0.12 Added support for ESP32-Pico-DevKitM-2 board 24 Mar 2022 12.0.11 Updated support for Raspberry Pi RP2040 boards 07 Mar 2022 12.0.10 Updated support for Raspberry Pi RP2040 boards 24 Feb 2022 12.0.9 Updated support for Arduino AVR and SAMD and Adafruit SAMD boards 15 Feb 2022 12.0.8 Improved stability for ESP32 boards 15 Feb 2022 12.0.7 Updated support for Raspberry Pi RP2040 boards 10 Feb 2022 12.0.6 Updated support for Adafruit SAMD boards 03 Feb 2022 12.0.5 Updated support for Raspberry Pi RP2040 boards 28 Jan 2021 12.0.4 Updated support for Adafruit SAMD boards 21 Jan 2021 12.0.3 Updated support for Pico RP2040 17 Jan 2022 12.0.2 Updated support for Teensy boards 14 Jan 2022 12.0.1 Improved stability 13 Jan 2022 12.0.0 New name"},{"location":"Appendixes/History/#go-to-release-11-after-lts-period","title":"Go to release 11 after LTS period","text":"Date Release Comment 13 Jan 2022 11.16.0 Added archive management for local and user libraries 10 Jan 2020 11.15.20 Updated support for Adafruit SAMD and nRF52 boards 10 Jan 2020 11.15.19 Updated support for Espressif ESP32 boards 08 Jan 2021 11.15.18 Implemented multi-INO support 06 Jan 2021 11.15.17 Updated support for Pico RP2040 03 Dec 2021 11.15.16 Updated support for Pico RP2040 29 Dec 2021 11.15.15 Updated support for Pico RP2040 27 Dec 2021 11.15.14 Updated support for Pico RP2040 23 Dec 2021 11.15.13 Updated support for STM32 boards 14 Dec 2021 11.15.12 Updated support for STM32 boards 14 Dec 2021 11.15.11 Updated support for Pico RP2040 06 Dec 2021 11.15.10 Updated support for Pico RP2040 26 Nov 2021 11.15.9 Updated support for Arduino AVR boards 18 Nov 2021 11.15.8 Updated support for Arduino SAMD boards 30 Oct 2021 11.15.7 Updated support for Seeeduino Wio Terminal 20 Oct 2021 11.15.6 Added support for Adafruit Feather RP2040 18 Oct 2021 11.15.5 Improved stability for ESP32 27 Sep 2021 11.15.4 Updated support for Adafruit nRF52 22 Sep 2021 11.15.3 Added support for PicoProbe 21 Sep 2021 11.15.2 Improved stability for RaspiArduino 17 Sep 2021 11.15.1 Added debugging for Pico RP2040 with J-Link and OpenOCD 04 Sep 2021 11.15.0 Added support for Pico RP2040"},{"location":"Appendixes/History/#go-to-embedxcode-releases","title":"Go to embedXcode releases","text":""},{"location":"Appendixes/History/#go-to-release-11-lts-period","title":"Go to release 11 LTS period","text":"<p>Long term support period ended 01 Nov 2021.</p> Date Release Comment 08 Aug 2021 11.14.19 Updated support for Arduino mbed nano and RP2040 boards 16 Jul 2021 11.14.18 Updated support for Arduino mbed nano and RP2040 boards 08 Jul 2021 11.14.17 Updated support for Teensy boards 05 Jul 2021 11.14.16 Updated support for Adafruit nRF52 boards 05 Jul 2021 11.14.15 Updated support for ESP8266 boards 05 Jul 2021 11.14.14 Updated support for Arduino AVR boards 05 Jul 2021 11.14.13 Updated support for Adafruit SAMD boards 18 Jun 2021 11.14.12 Updated support for Arduino mbed Nano and RP2040 boards 31 May 2020 11.14.11 Added support for Nucleo-P WB55RG board 28 May 2020 11.14.10 Updated support for Adafruit SAMD and nRF52 boards 22 May 2020 11.14.9 Updated support for Adafruit SAMD and nRF52 boards 20 May 2020 11.14.8 Improved stability for archives 18 May 2020 11.14.7 Updated support for ESP8266 boards 17 May 2020 11.14.6 Updated support for Raspberry Pi RP2040 boards 14 May 2021 11.14.5 Updated support for Adafruit SAMD boards 28 Apr 2021 11.14.4 Improved stability for Arduino MBED Pico RP2040 20 Apr 2021 11.14.3 Added support for Arduino MBED Pico RP2040 16 Apr 2021 11.14.2 Improved stability 12 Apr 2021 11.14.1 Updated support for ESP32 12 Apr 2021 11.14.0 Updated support for Arduino mbed Nano 33 BLE 19 Feb 2021 11.13.7 Added linker options 18 Feb 2021 11.13.6 Improved stability for Adafruit Feather SAMD boards 08 Feb 2021 11.13.5 Improved stability for MSP430 debugging 01 Feb 2021 11.13.4 Improved stability for LaunchPad MSP432P4111 board 28 Jan 2021 11.13.3 Updated support for Adafruit SAMD boards 30 Dec 2020 11.13.2 Updated support for Arduino MegaAVR boards 28 Dec 2020 11.13.1 Updated support for Arduino SAMD boards 23 Dec 2020 11.13.0 Updated installation utility for new macOS version 21 Dec 2020 11.12.14 Added support for DAPLink on Seeed Xiao board 16 Dec 2020 11.12.13 Updated support for Arduino SAMD boards 12 Dec 2020 11.12.12 Improved stability for J-Link debugging 08 Dec 2020 11.12.11 Added support for BBC micro:bit v2 30 Nov 2020 11.12.10 Improved stability for Teensy 4.1 external SRAM size 26 Nov 2020 11.12.9 Improved stability for Raspberry Pi 23 Nov 2020 11.12.8 Added support for Raspberry Pi 16 Nov 2020 11.12.7 Improved stability for Archive and Unarchive targets 09 Nov 2020 11.12.6 Updated support for Seeed Studio SAMD boards 06 Nov 2020 11.12.5 Updated support for Adafruit SAMD boards 05 Nov 2020 11.12.4 Improved stability for Seeed Wio Terminal WiFi and Bluetooth libraries 04 Nov 2020 11.12.3 Updated support for Seeed Wio Terminal RTL8720DN board 02 Nov 2020 11.12.2 Added OTA upload for legacy RedBear Duo board 28 Oct 2020 11.12.1 Improved stability for legacy RedBear Duo board"},{"location":"Appendixes/History/#go-to-release-11-transition-period","title":"Go to release 11 transition period","text":"<p>Development ended 01 Nov 2020.</p> Date Release Comment 08 Oct 2020 11.12.0 Updated general utilities 06 Oct 2020 11.11.12 Updated support for Arduino SAMD boards 24 Sep 2020 11.11.11 Updated support for Adafruit SAMD boards 18 Sep 2020 11.11.10 Updated support for LaunchPad MSP430 GCC-ELF boards 16 Sep 2020 11.11.9 Updated support for Seeed Studio SAMD boards 16 Sep 2020 11.11.8 Added beta OTA upload for ESP32 boards 16 Sep 2020 11.11.7 Updated support for LaunchPad MSP430 GCC-ELF boards 15 Sep 2020 11.11.6 Added specific binary name and final command 10 Sep 2020 11.11.5 Updated support for Seeed Wio Terminal RTL8720DN board 09 Sep 2020 11.11.4 Updated support for Adafruit SAMD boards 04 Sep 2020 11.11.3 Improved general stability 02 Sep 2020 11.11.2 Updated support for Adafruit nRF52 and SAMD boards 01 Sep 2020 11.11.1 Updated boards list 01 Sep 2020 11.11.0 Updated utilities"},{"location":"Appendixes/History/#go-to-release-11","title":"Go to release 11","text":"Date Release Comment 24 Aug 2020 11.9.11 Added support for Seeed Grove Beginner Kit board 20 Aug 2020 11.9.10 Updated support for Seeeduino SAMD boards 18 Aug 2020 11.9.9 Updated support for Arduino SAMD boards 06 Aug 2020 11.9.8 Updated support for Arduino nRF52 and ESP8266 boards 31 Jul 2020 11.9.7 Updated support for Arduino SAMD and ESP8266 boards 30 Jul 2020 11.9.6 Improved stability for Arduino Leonardo board 24 Jul 2020 11.9.5 Updated support for Teensy 4.1 board 22 Jul 2020 11.9.4 Updated support for Microsoft Azure board 18 Jul 2020 11.9.3 Updated support for Adafruit nRF52 boards 18 Jul 2020 11.9.2 Updated support for LaunchPad MSP430 boards 17 Jul 2020 11.9.1 Updated support for ESP8266 boards 17 Jul 2020 11.9.0 Updated support for Xcode 11.6 on macOS 10.15.6 16 Jul 2020 11.8.11 Updated support for Adafruit SAMD boards 15 Jul 2020 11.8.10 Added support for Seeed Wio Terminal RTL8720DN MCU 13 Jul 2020 11.8.9 Updated support for Seeed SAMD boards 07 Jul 2020 11.8.8 Updated support for Teensyduino 22 Jun 2020 11.8.7 Added parameter for Arduino Leonardo board configuration file 16 Jun 2020 11.8.6 Updated support for Arduino IDE 05 Jun 2020 11.8.5 Improved stability for Seeeduino boards 02 Jun 2020 11.8.4 Improved stability for Seeed Wio Terminal board 01 Jun 2020 11.8.3 Updated support for Seeed Wio Terminal board 29 May 2020 11.8.2 Updated support for Seeed Wio Terminal board 25 May 2020 11.8.1 Updated support for Xcode 11.5 22 May 2020 11.8.0 Added beta support for Arduino Portenta board 22 May 2020 11.7.20 Improved stability for user\u2019s libraries 20 May 2020 11.7.19 Updated support for Teensy boards 18 May 2020 11.7.18 Updated support for STM32 boards 12 May 2020 11.7.17 Updated support for ESP8266 and Adafruit SAMD boards 04 May 2020 11.7.16 Updated support for ESP8266 boards 27 Apr 2020 11.7.15 Updated support for Adafruit SAMD and nRF52 boards 23 Apr 2020 11.7.14 Updated support for Seeed SAMD boards 23 Apr 2020 11.7.13 Updated support for Adafruit SAMD boards 23 Apr 2020 11.7.12 Updated support for Adafruit nRF52 boards 20 Apr 2020 11.7.11 Updated support for MSP430 LaunchPad boards 17 Apr 2020 11.7.10 Updated support for Xcode 11.4.1 15 Apr 2020 11.7.9 Updated support for Tiva C boards 13 Apr 2020 11.7.8 Updated support for MacTeX 2020 07 Apr 2020 11.7.7 Updated support for Arduino megaAVR boards 31 Mar 2020 11.7.6 Improved stability for MSP430 GCC-ELF boards 26 Mar 2020 11.7.5 Improved stability for CC1352 boards 23 Mar 2020 11.7.4 Improved stability for utilities 23 Mar 2020 11.7.3 Updated support for Adafruit Feather nRF52 boards 18 Mar 2020 11.7.2 Improved stability for Seeed Xiao board 16 Mar 2020 11.7.1 Updated support for Arduino SAMD boards 13 Mar 2020 11.7.0 Improved support for ESP32 boards 10 Mar 2020 11.6.19 Updated support for Moteino boards 04 Mar 2020 11.6.18 Improved stability for Teensy 4.0 board 29 Feb 2020 11.6.18 Updated support for Adafruit SAMD boards 29 Feb 2020 11.6.17 Improved stability for Teensy boards 27 Feb 2020 11.6.16 Updated support for CC13x2 boards 26 Feb 2020 11.6.15 Updated support for Arduino SAMD boards 22 Feb 2020 11.6.14 Updated support for Teensy boards 21 Feb 2020 11.6.13 Updated support for Adafruit Feather nRF52 boards 14 Feb 2020 11.6.12 Updated support for Arduino 1.8.12 IDE 12 Feb 2020 11.6.11 Updated support for Teensyduino 1.50 06 Feb 2020 11.6.10 Added beta support for Seeeduino v4 and Xiao boards 06 Feb 2020 11.6.9 Updated support for Adafruit Feather SAMD and nRF52 boards 04 Feb 2020 11.6.8 Updated support for Energia 1.8.10E23 IDE 03 Feb 2020 11.6.7 Updated support for Adafruit nRF52 boards 03 Feb 2020 11.6.6 Added support for Wemos LoLin D32 29 Jan 2020 11.6.5 Improved stability for Ozone debugging 28 Jan 2020 11.6.4 Added support for Feather M4 24 Jan 2020 11.6.3 Improved stability for ESP-Prog debugging 23 Jan 2020 11.6.2 Added support for ESP-Prog programmer-debugger 20 Jan 2020 11.6.1 Improved support for Segger J-Link debug probes 20 Jan 2020 11.6.0 Updated support for Arduino Nano 33 BLE boards 16 Jan 2020 11.5.9 Updated support for Teensyduino 16 Jan 2020 11.5.8 Improved stability for XDS110 programmer-debugger 15 Jan 2020 11.5.7 Updated support for Xcode 11.3.1 14 Jan 2020 11.5.6 Updated stability for Adafruit nRF52 boards 14 Jan 2020 11.5.5 Improved stability for ESP8266 boards 09 Jan 2020 11.5.4 Improved stability for ESP8266 boards 06 Jan 2020 11.5.3 Added debugging for STM32duino boards 06 Jan 2020 11.5.2 Added support for STM32duino boards 02 Jan 2020 11.5.1 Updated support for Adafruit SAMD and nRF52 boards 30 Dec 2019 11.5.0 Improved stability for Intel Curie 30 Dec 2019 11.4.9 Updated support for STM32duino boards 20 Dec 2019 11.4.8 Improved support for XDS110 programmer-debugger 18 Dec 2019 11.4.7 Renamed MSP432P401R LaunchPad 17 Dec 2019 11.4.6 Updated support for ATtiny and ESP8266 boards 12 Dec 2019 11.4.5 Improved stability for utilities 11 Dec 2019 11.4.4 Updated support for Xcode 11.3 on macOS 10.15.2 10 Dec 2019 11.4.3 Updated support for STM32duino boards 09 Dec 2019 11.4.2 Added debugging for Feather nRF52840 06 Dec 2019 11.4.1 Updated list of legacy boards 04 Dec 2019 11.4.0 Updated support for Microsoft, STM32duino and ESP8266 boards 28 Nov 2019 11.3.9 Updated support for Arduino Nano 33 BLE, STM32duino and ESP8266 boards 20 Nov 2019 11.3.8 Added support for MSP432P41111 LaunchPad board 15 Nov 2019 11.3.7 Added support for ESP32-CAM Wrover board 14 Nov 2019 11.3.6 Updated support for ESP8266 and Seeeduino AVR boards 12 Nov 2019 11.3.5 Improved management of serial console for boards with dual USB 09 Nov 2019 11.3.4 Added support for MSP430FR2476 LaunchPad board 08 Nov 2019 11.3.3 Added debugging for CC13x0 and CC13x2 LaunchPad boards 06 Nov 2019 11.3.2 Improved stability for Arduino Leonardo USB-based projects 06 Nov 2019 11.3.1 Updated support for Adafruit SAMD and nRF52 boards 04 Nov 2019 11.3.0 Updated support for Xcode 11.2 30 Oct 2019 11.2.7 Improved stability for Adafruit nRF52832 boards 28 Oct 2019 11.2.6 Updated support for Adafruit SAMD boards 24 Oct 2019 11.2.5 Updated support for LaunchPad MSP432 and Adafruit nRF52832 boards 23 Oct 2019 11.2.4 Improved stability for Arduino AVR boards 14 Oct 2019 11.2.3 Updated support for Doxygen 12 Oct 2019 11.2.2 Added partition schemes for ESP32 boards 10 Oct 2019 11.2.1 Updated support for Xcode 09 Oct 2019 11.2.0 Updated support for macOS 10.15 Catalina 09 Oct 2019 11.1.12 Updated support for Teensyduino boards 07 Oct 2019 11.1.11 Updated support for STM32duino and Adafruit SAMD boards 02 Oct 2019 11.1.10 Updated support for ESP32 boards 27 Sep 2019 11.1.9 Updated support for Adafruit nRF52 boards 23 Sep 2019 11.1.8 Updated support for chipKIT boards 23 Sep 2019 11.1.7 Updated support for ATtiny boards 20 Sep 2019 11.1.6 Updated support for STM32duino 20 Sep 2019 11.1.5 Added support for LaunchPad CC13x2 boards 20 Sep 2019 11.1.4 Updated support for Arduino MegaAVR boards 18 Sep 2019 11.1.3 Updated support for STM32duino boards 16 Sep 2019 11.1.2 Updated support for ESP32 boards 16 Sep 2019 11.1.1 Updated support for Arduino 1.8.10 IDE 12 Sep 2019 11.1.0 Updated support for Xcode 11 12 Sep 2019 11.0.23 Updated support for Arduino Nano 33 BLE 05 Sep 2019 11.0.22 Improved stability for utilities 03 Sep 2019 11.0.21 Improved general stability for first release 30 Aug 2019 11.0.20 Improved stability for Arduino Nano Every, 33 BLE and 33 IoT \u2013 not released 29 Aug 2019 11.0.19 Updated support for Xcode 11 beta 7 \u2013 not released 26 Aug 2019 11.0.18 Added beta support for Arduino Nano Every \u2013 not released 26 Aug 2019 11.0.17 Updated support for Adafruit nRF52 and ATtiny boards \u2013 not released 26 Aug 2019 11.0.16 Improved stability for Teensy 4.0 \u2013 not released 23 Aug 2019 11.0.15 Updated support for Xcode 11.0 beta 6 \u2013 not released 20 Aug 2019 11.0.14 Updated beta support for Arduino Nano 33 BLE \u2013 not released 14 Aug 2019 11.0.13 Added beta support for Teensy 4.0 \u2013 not released 12 Aug 2019 11.0.12 Improved stability for MSP432R401P LaunchPad (red) \u2013 not released 09 Aug 2019 11.0.11 Updated support for Adafruit nRF52 boards \u2013 not released 08 Aug 2019 11.0.10 Added beta support for Arduino Nano 33 BLE \u2013 not released 06 Aug 2019 11.0.9 Updated support for LaunchPad MSP432P boards 05 Aug 2019 11.0.8 Updated support for Adafruit nRF52 boards \u2013 not released 30 Jul 2019 11.0.7 Updated support for Xcode 11.0 beta 5 \u2013 not released 29 Jul 2019 11.0.6 Updated support for STM32duino boards \u2013 not released 28 Jul 2019 11.0.5 Updated support for ATTiny boards \u2013 not released 22 Jul 2019 11.0.4 Updated support for Xcode 11.0 beta 4 \u2013 not released 5 Jul 2019 11.0.3 Updated support for Xcode 11.0 beta 3 \u2013 not released 24 Jun 2019 11.0.2 Updated Check new release procedure and utility \u2013 not released 17 Jun 2019 11.0.1 Updated support for Xcode 11.0 beta 2 \u2013 not released 6 Jun 2019 11.0.0 Updated support for Xcode 11.0 beta 1 \u2013 not released"},{"location":"Appendixes/History/#go-to-release-10","title":"Go to release 10","text":"Date Release Comment 10 Jul 2019 10.9.9 Updated support for Arduino SAMD and Adafruit nRF52 boards 08 Jul 2019 10.9.8 Improved stability for Arduino Leonardo board 03 Jul 2019 10.9.7 Updated support for Arduino SAMD boards 01 Jul 2019 10.9.6 Updated support for STM32duino boards 18 Jun 2019 10.9.5 Updated support for Adafruit SAMD boards 17 Jun 2019 10.9.4 Updated support for Arduino SAMD boards 11 Jun 2019 10.9.3 Added beta support for panStamp Quantum 11 Jun 2019 10.9.2 Updated support for Adafruit Feather nRF52 07 Jun 2019 10.9.1 Improved stability for PDF generation 03 Jun 2019 10.9.0 Improved stability for excluded files 28 May 2019 10.8.9 Updated support for Adafruit SAMD board 27 May 2019 10.8.8 Added support for Adafruit Feather M4 board 20 May 2019 10.8.7 Updated support for ESP8266 boards 20 May 2019 10.8.6 Improved stability for Arduino SAMD boards 06 May 2019 10.8.5 Updated support for MacTeX 2019 06 May 2019 10.8.4 Improved stability for ESP32 boards 03 May 2019 10.8.3 Improved stability for LaunchPad boards 29 Apr 2019 10.8.2 Updated support for Teensy boards 25 Apr 2019 10.8.1 Updated support for Adafruit SAMD boards 24 Apr 2019 10.8.0 Updated support for Adafruit SAMD boards 16 Apr 2019 10.7.9 Updated support for ESP32 boards 15 Apr 2019 10.7.8 Improved stability for installation utility 10 Apr 2019 10.7.7 Added support for Feather PyPortal M4 board 08 Apr 2019 10.7.6 Added beta support for ATtiny boards 08 Apr 2019 10.7.5 Improved stability for Teensy boards 06 Apr 2019 10.7.4 Updated support for Microsoft Azure board 06 Apr 2019 10.7.3 Updated support for Arduino SAMD boards 04 Apr 2019 10.7.2 Updated installation utility 02 Apr 2019 10.7.1 Updated support for STM32duino boards 02 Apr 2019 10.7.0 Improved stability for MSP432 boards 27 Mar 2019 10.6.9 Updated support for Moteino boards 21 Mar 2019 10.6.8 Improved stability for ESP32 boards 20 Mar 2019 10.6.7 Improved stability for Adafruit nRF52 board 19 Mar 2019 10.6.6 Improved stability for Tiva C LaunchPad boards 18 Mar 2019 10.6.5 Updated support for Arduino 1.8.9 IDE 14 Mar 2019 10.6.4 Improved stability for ESP32 boards 04 Mar 2019 10.6.3 Updated support for Adafruit SAMD boards 01 Mar 2019 10.6.2 Updated support for STM32duino boards 27 Feb 2019 10.6.1 Updated naming of functions for Energia MT 26 Feb 2019 10.6.0 Updated support for STM32duino boards 25 Feb 2019 10.5.9 Improved stability for multi-layered local libraries 22 Feb 2019 10.5.8 Improved multi-layered local libraries 20 Feb 2019 10.5.7 Improved support for nRF52 boards 16 Feb 2019 10.5.6 Added support for .hpp header files 16 Feb 2019 10.5.5 Updated support for Arduino SAM board 14 Feb 2019 10.5.4 Updated support for DigiSpark board 12 Feb 2019 10.5.3 Added board configuration file check and update 08 Feb 2019 10.5.2 Updated support for STM32duino and ESP8266 boards 06 Feb 2019 10.5.1 Improved stability for BBC micro:bit debugging 05 Feb 2019 10.5.0 Added support for BBC micro:bit 04 Feb 2019 10.4.9 Improved stability for MSP430 with large memory 04 Feb 2019 10.4.8 Updated support for Microsoft Azure board 28 Jan 2019 10.4.7 Improved stability for Info and Tools sections 28 Jan 2019 10.4.6 Improved Info and Tools sections 28 Jan 2019 10.4.5 Updated support for Intel Curie board 21 Jan 2019 10.4.4 Improved stability for ESP32 boards 17 Jan 2019 10.4.3 Updated support for Adafruit nRF52 and ESP32 boards 08 Jan 2019 10.4.2 Improved stability for MSP432 LaunchPad boards 07 Jan 2019 10.4.1 Updated support for Adafruit nRF52 boards 28 Dec 2018 10.4.0 Improved stability for excluded libraries 21 Dec 2018 10.3.9 Improved stability for Arduino MKR boards 18 Dec 2018 10.3.8 Updated support for Microsoft Azure board 14 Dec 2018 10.3.7 Improved stability for serial port selection 14 Dec 2018 10.3.6 Updated support for Teensy boards 10 Dec 2018 10.3.5 Added beta support for Arduino MKR boards 10 Dec 2018 10.3.4 Updated support for Arduino 1.8.8 IDE 03 Dec 2018 10.3.3 Updated support for STM32duino and ESP32 boards 03 Dec 2018 10.3.2 Updated support for STM32duino and Arduino SAMD boards 22 Nov 2018 10.3.1 Added beta support for Feather M4 board 21 Nov 2018 10.3.0 Added support for MSP430G2-ET LaunchPad 15 Nov 2018 10.2.9 Updated support for Adafruit Feather M0 and nRF52832 boards 15 Nov 2018 10.2.8 Updated support for Adafruit Feather M0 and nRF52832 boards 14 Nov 2018 10.2.7 Improved stability for ESP8266 boards 12 Nov 2018 10.2.6 Updated document utilities 12 Nov 2018 10.2.5 Updated support for STM32duino boards 07 Nov 2018 10.2.4 Updated support for Adafruit SAMD boards 05 Nov 2018 10.2.3 Updated support for Xcode 10.1 and macOS 10.14.1 05 Nov 2018 10.2.2 Updated support for Adafruit SAMD boards 02 Nov 2018 10.2.1 Added code live check 31 Oct 2018 10.2.0 Improved stability for MSP430 boards 30 Oct 2018 10.1.9 Updated support for Energia 1.8.7E21 IDE 29 Oct 2018 10.1.8 Added experimental support for MSP430 GCC 7.3.1 22 Oct 2018 10.1.7 Added support for MSP432E401 Ethernet boards 19 Oct 2018 10.1.6 Improved stability for Arduino SAMD boards 16 Oct 2018 10.1.5 Improved stability for MSP432 board 15 Oct 2018 10.1.4 Improved stability for CC3200 boards 12 Oct 2018 10.1.3 Updated support for MSP432 boards 12 Oct 2018 10.1.2 Improved stability for ESP8266 boards 08 Oct 2018 10.1.1 Updated support for Energia 1.8.7E20 IDE 04 Oct 2018 10.1.0 Updated support for MSP430 and MSP432 boards 03 Oct 2018 10.0.9 Improved stability for included boards 01 Oct 2018 10.0.8 Added link to generated reference website 29 Sep 2018 10.0.7 Improved stability for installation procedure 27 Sep 2018 10.0.6 Added IDE path to board configuration files 24 Sep 2018 10.0.5 Tested macOS 10.14 Mojave \u2013 not released 20 Sep 2018 10.0.4 Updated support for Microsoft Azure board \u2013 not released 20 Sep 2018 10.0.3 Updated support for Xcode 10.0 \u2013 not released 18 Sep 2018 10.0.2 Updated legacy boards \u2013 not released 18 Sep 2018 10.0.1 Improved stability for project preparation \u2013 not released 14 Sep 2018 10.0.0 Updated support for Xcode 10.0 GM \u2013 not released"},{"location":"Appendixes/History/#go-to-release-9","title":"Go to release 9","text":"Date Release Comment 20 Sep 2018 9.6.8 Updated support for Adafruit nRF53 and STM32duino boards 18 Sep 2018 9.6.7 Improved stability for Teensy boards 14 Sep 2018 9.6.6 Updated support for Arduino 1.8.7 IDE 12 Sep 2018 9.6.5 Updated support for Adafruit and TinyCircuits SAMD boards 06 Sep 2018 9.6.4 Improved stability for utilities 06 Sep 2018 9.6.3 Updated support for Teensyduino 1.43 04 Sep 2018 9.6.2 Improved stability for utilities 31 Aug 2018 9.6.1 Improved stability for ESP32 boards 28 Aug 2018 9.6.0 Improved stability for MSP432 Red LaunchPad 27 Aug 2018 9.5.9 Updated support for Arduino 1.8.6 IDE 23 Aug 2018 9.5.8 Improved stability for ESP8266 22 Aug 2018 9.5.7 Added beta support for LittleRobotFriends SAMD board 20 Aug 2018 9.5.6 Updated support for ESP32 boards 16 Aug 2018 9.5.5 Updated Adafruit SAMD, Energia MSP432, LinkIt 7697, Microsoft and panStamp boards 14 Aug 2018 9.5.4 Added integrity check 09 Aug 2018 9.5.3 Improved general stability 08 Aug 2018 9.5.2 Improved stability for CC13x0 boards 08 Aug 2018 9.5.1 Updated support for ESP8266 boards 30 Jul 2018 9.5.0 Updated support for Microsoft board 23 Jul 2018 9.4.9 Improved stability for ESP32 boards 20 Jul 2018 9.4.8 Updated support for ESP32 boards 18 Jul 2018 9.4.7 Updated support for Adafruit nRF52 and Arduino SAMD boards 02 Jul 2018 9.4.6 Updated support for Adafruit SAMD and STM32duino boards 26 Jul 2018 9.4.5 Updated support for Teensy boards 16 Jun 2018 9.4.4 Improved stability 15 Jun 2018 9.4.3 Improved stability for Arduino Mega256 boards 14 Jun 2018 9.4.2 Updated support for chipKIT and Microsoft boards 06 Jun 2018 9.4.1 Improved stability for CC3220 boards 31 May 2018 9.4.0 Added experimental support for GCC MSP430 6.4.0.32 31 May 2018 9.3.9 Updated support for Moteino 21 May 2018 9.3.8 Improved stability for utilities 17 May 2018 9.3.7 Updated support for Adafruit SAMD and STM32duino boards 09 May 2018 9.3.6 Improved stability for LaunchPad MSP430G2955 07 May 2018 9.3.5 Improved stability for Adafruit Feather M0 boards 04 May 2018 9.3.4 Improved stability for ESP32 memory sizes 30 Apr 2018 9.3.3 Updated support for STM32duino boards 25 Apr 2018 9.3.2 Updated support for MSP430G2955 18 Apr 2018 9.3.1 Updated support for LinkIt and STM32duino boards 16 Apr 2018 9.3.0 Updated support for Adafruit and STM32duino boards 10 Apr 2018 9.2.9 Updated support for MSP432 red board 03 Apr 2018 9.2.8 Updated support for RedBear and Microsoft boards 26 Mar 2018 9.2.7 Updated support for chipKIT and Microsoft boards 15 Mar 2018 9.2.6 Improved stability for utilities 14 Mar 2018 9.2.5 Updated support for MSP432 red board 06 Mar 2018 9.2.4 Updated support for ESP32 boards 27 Feb 2018 9.2.3 Improved stability for CC1350 SensorTag 26 Feb 2018 9.2.2 Improved stability for folder management 23 Feb 2018 9.2.1 Updated support for Arduino AVR boards 22 Feb 2018 9.2.0 Added Share target 20 Feb 2018 9.1.9 Improved stability for Distribute target 20 Feb 2018 9.1.8 Improved stability for ESP8266 boards 16 Feb 2018 9.1.7 Improved stability for reference location 16 Feb 2018 9.1.6 Updated debugging against CC3200 with OpenOCD 0.10.0 16 Feb 2018 9.1.5 Improved stability for Arduino SAMD boards 14 Feb 2018 9.1.4 Updated support for chipKIT boards 09 Feb 2018 9.1.3 Improved stability for Adafruit M0 08 Feb 2018 9.1.2 Improved stability for Adafruit nRF52 29 Jan 2018 9.1.1 Improved stability for main sketch.cpp 29 Jan 2018 9.1.0 Added beta support for ftDuino 24 Jan 2018 9.0.9 Updated support for STM32duino boards 23 Jan 2018 9.0.8 Updated support for LaunchPad boards 22 Jan 2018 9.0.7 Updated support for Teensy boards 15 Jan 2018 9.0.6 Improved stability for RedBear Duo 12 Jan 2018 9.0.5 Updated support for Adafruit nRF52 board 12 Jan 2018 9.0.4 Updated support for Microsoft Azure IoT DevKit 05 Jan 2018 9.0.3 Updated support for ESP8266 02 Jan 2018 9.0.2 Improved stability for Microsoft Azure IoT DevKit 02 Jan 2018 9.0.1 Improved stability for LaunchPad MSP430 boards 02 Jan 2018 9.0.0 Updated package for legacy boards"},{"location":"Appendixes/History/#go-to-release-8","title":"Go to release 8","text":"Date Release Comment 19 Dec 2017 8.4.2 Improved stability for Microsoft Azure DevKit 16 Dec 2017 8.4.1 Added support for LaunchPad CC3220S and CC3220SF boards 15 Dec 2017 8.4.0 Improved stability for legacy boards 14 Dec 2017 8.3.9 Updated list of legacy boards 08 Dec 2017 8.3.8 Improved stability for legacy MSP430G2 boards 04 Dec 2017 8.3.7 Improved stability for utilities 01 Dec 2017 8.3.6 Updated support for Arduino SAMD boards 28 Nov 2017 8.3.5 Improved stability for new release 22 Nov 2017 8.3.4 Updated support for Microsoft Azure DevKit 20 Nov 2017 8.3.3 Improved stability for Arduino SAMD boards 16 Nov 2017 8.3.2 Added support for LaunchPad MPS430FR2433 16 Nov 2017 8.3.1 Improved stability for main <code>Makefile</code> 15 Nov 2017 8.3.0 Updated support for Adafruit nRF52 boards 14 Nov 2017 8.2.9 Updated boards packages 13 Nov 2017 8.2.8 Added RedBear Nano nRF52832 board 08 Nov 2017 8.2.7 Added upload to Microsoft IoT DevKit through MSD 07 Nov 2017 8.2.6 Improved stability for Teensy threads 06 Nov 2017 8.2.5 Added LTO for Arduino AVR 02 Nov 2017 8.2.4 Improved stability for LaunchPad CC3200 02 Nov 2017 8.2.3 Updated support for Xcode 9.1 27 Oct 2017 8.2.2 Improved stability for Adafruit nRF52 0.7.5 27 Oct 2017 8.2.1 Added debugging for Microsoft Azure DevKit 26 Oct 2017 8.2.0 Improved stability for Microsoft Azure DevKit 20 Oct 2017 8.1.9 Updated support for Arduino nRF52 1.0.2 20 Oct 2017 8.1.8 Updated support for Mediatek LinkIt 7697 0.10.5 20 Oct 2017 8.1.7 Updated support for Adafruit SAMD 1.0.20 20 Oct 2017 8.1.6 Updated support for Microsoft DevKit 1.2.0 20 Oct 2017 8.1.5 Added help links 19 Oct 2017 8.1.4 Improved stability for Adafruit Feather M0 09 Oct 2017 8.1.3 Improved Distribute target 07 Oct 2017 8.1.2 Improved stability for macOS 10.13 High Sierra 06 Oct 2017 8.1.1 Updated support for macOS 10.13 High Sierra 06 Oct 2017 8.1.0 Improved upload procedure for Teensy boards 04 Oct 2017 8.0.9 Improved stability for utilities 04 Oct 2017 8.0.8 Updated support for Arduino 1.8.5 IDE 03 Oct 2017 8.0.7 Updated support for Adafruit nRF52 board 02 Oct 2017 8.0.6 Updated support for Arduino SAMD board 28 Sep 2017 8.0.5 Updated support for Adafruit nRF52 board 12 Sep 2017 8.0.4 Added compiler options in main <code>Makefile</code> 08 Sep 2017 8.0.3 Updated support for Segger Ozone 04 Sep 2017 8.0.2 Updated list of supported boards 04 Sep 2017 8.0.1 Improved stability for Mediatek LinkIt 7697 28 Aug 2017 8.0.0 Added support for Seeeduino v4 board"},{"location":"Appendixes/History/#go-to-release-7","title":"Go to release 7","text":"Date Release Comment 28 Aug 2017 7.6.9 Added support for Seeeduino v4 board 25 Aug 2017 7.6.8 Updated support for MSP430 1.0.2 boards package 23 Aug 2017 7.6.7 Updated support for boards packages 21 Aug 2017 7.6.6 Updated support for Glowdeck board 21 Aug 2017 7.6.5 Added support for Wemos D1 R2 18 Aug 2017 7.6.4 Added support for Mediatek LinkIt 7697 16 Aug 2017 7.6.3 Updated support for Microsoft IoT DevKit 02 Aug 2017 7.6.2 Improved stability for Arduino Primo Core board 01 Aug 2017 7.6.1 Added J-Link and Ozone for Arduino Primo and Primo Core boards 31 Jul 2017 7.6.0 Improved stability for Arduino Primo board 24 Jul 2017 7.5.9 Improved stability for utilities 13 Jul 2017 7.5.8 Added support for 4D Systems gen4 IoD boards 13 Jul 2017 7.5.7 Added support for ESP32-DevC board 13 Jul 2017 7.5.6 Added support for Arduino Primo board 11 Jul 2017 7.5.5 Updated support for Microsoft DevKit 10 Jul 2017 7.5.4 Updated support for boards packages 04 Jul 2017 7.5.3 Improved stability for compact main.cpp 03 Jul 2017 7.5.2 Improved stability for Intel Edison Yocto and MCU 01 Jul 2017 7.5.1 Improved stability for non-building targets 30 Jun 2017 7.5.0 Added compact main.cpp 26 Jun 2017 7.4.9 Updated support for RedBear Duo 23 Jun 2017 7.4.8 Updated support for Arduino 1.8.3 19 Jun 2017 7.4.7 Improved parallel build stability 15 Jun 2017 7.4.6 Added support for Microsoft IoT DevKit 14 Jun 2017 7.4.5 Updated support for parallel build 06 Jun 2017 7.4.4 Updated support for LaunchPad MSP430FR5969 17 May 2017 7.4.3 Updated debug for MSP430 10 May 2017 7.4.2 Improved general stability 09 May 2017 7.4.1 Improved general modularity 04 May 2017 7.4.0 Improved general modularity 02 May 2017 7.3.9 Added debugging for Adafruit Feather nRF52 with Segger J-Link 02 May 2017 7.3.8 Updated support for Arduino SAMD and Energia MSP432 25 Apr 2017 7.3.7 Updated support for Doxygen 20 Apr 2017 7.3.6 Updated support for Arduino M0 Pro 12 Apr 2017 7.3.5 Updated support for Intel Curie 101 10 Apr 2017 7.3.4 Improved stability for Teensy upload 06 Apr 2017 7.3.3 Improved stability for platforms management 04 Apr 2017 7.3.2 Updated support for Simblee 1.1.2 04 Apr 2017 7.3.1 Updated support for Teensyduino 1.36 04 Apr 2017 7.3.0 Updated support for Xcode 8.3 04 Apr 2017 6.2.0 Updated support for Xcode 8.3 26 Mar 2017 7.2.7 Added support for Adafruit Feather nRF52 26 Mar 2017 7.2.6 Updated support for Adafruit Feather M0 24 Mar 2017 7.2.5 Updated support for Arduino 1.8.2 20 Mar 2017 7.2.4 Added support for Arduino Star Otto 15 Mar 2017 7.2.3 Updated support for red MSP432 LaunchPad 14 Mar 2017 7.2.2 Improved stability for board as parameter 09 Mar 2017 7.2.1 Improved stability for RFduino and Simblee 06 Mar 2017 7.2.0 Added support for MiniCore boot-loader 02 Mar 2017 7.1.9 Some cleaning 27 Feb 2017 7.1.8 Updated support for STM32duino 24 Feb 2017 7.1.7 Improved general stability 24 Feb 2017 7.1.6 Updated support for Arduino Due 24 Feb 2017 7.1.5 Updated support for Udoo Neo 21 Feb 2017 7.1.4 Improved stability for ESP8266 boards 21 Feb 2017 7.1.3 Improved stability for utilities 20 Feb 2017 7.1.2 Improved stability for user\u2019s libraries 18 Feb 2017 7.1.1 Released version 17 Feb 2017 7.1.0 Added support for Segger Ozone 16 Feb 2017 7.0.9 Improved project structure 15 Feb 2017 7.0.8 Improved stability for Intel Edison board 14 Feb 2017 7.0.7 Improved output for report 14 Feb 2017 7.0.6 Improved stability for debugging 13 Feb 2017 7.0.5 Centralised Xcode-managed Builds folder 10 Feb 2017 7.0.4 Improved stability for publish targets 09 Feb 2017 7.0.3 Improved information on tools 08 Feb 2017 7.0.2 Improved stability for project preparation 07 Feb 2017 7.0.1 Updated utilities 06 Feb 2017 7.0.0 Centralised makefiles and utilities"},{"location":"Appendixes/History/#go-to-release-6","title":"Go to release 6","text":"Date Release Comment 10 Feb 2017 6.1.7 Improved stability for LaunchPad boards 09 Feb 2017 6.1.6 Improved stability for Arduino boards 06 Feb 2017 6.1.5 Improved stability for Intel Curie board 31 Jan 2017 6.1.4 Added compact target for MSP430G2553 30 Jan 2017 6.1.3 Updated support for Teensyduino 1.35 26 Jan 2017 6.1.2 Improved information on tools 24 Jan 2017 6.1.1 Updated support for RedBear 18 Jan 2017 6.1.0 Improved stability for Arduino M0 and Zero 18 Jan 2017 6.0.9 Improved general stability 18 Jan 2017 6.0.8 Added specific template for Teensy boards 16 Jan 2017 6.0.7 Updated support for CC2650 EMT and C2000 10 Jan 2017 6.0.6 Updated support for Arduino 1.8.1 IDE 10 Jan 2017 6.0.5 Updated support for MediaTek LinkIt Smart 7884 Duo 10 Jan 2017 6.0.4 Updated support for CC3200 EMT 07 Jan 2017 6.0.3 Improved stability for chipKIT boards 06 Jan 2017 6.0.2 Updated support for Glowdeck 04 Jan 2017 6.0.1 Updated support for LaunchPad CC3200 EMT 02 Jan 2017 6.0.0 Updated support for Arduino 1.8.0"},{"location":"Appendixes/History/#go-to-release-5","title":"Go to release 5","text":"Date Release Comment 24 Dec 2016 5.4.7 Updated support for Teensyduino 1.33 22 Dec 2016 5.4.6 Updated support for Xcode 8.2.1 20 Dec 2016 5.4.5 Added support for MSP430FR2311 and MSP430FR5994 20 Dec 2016 5.4.4 Updated support for CC1310 platform 3.7.2 16 Dec 2016 5.4.3 Improved installer stability 16 Dec 2016 5.4.2 Added support for STM32duino 14 Dec 2016 5.4.1 Added support for Bean Command-Line Loader 09 Dec 2016 5.4.0 Updated support for Arduino Zero 1.6.8 25 Nov 2016 5.3.9 Added support for TinyScreen+ 22 Nov 2016 5.3.8 Improved stability for extended native platform 16 Nov 2016 5.3.7 Improved libraries selection 03 Nov 2016 5.3.6 Improved stability for utilities 28 Oct 2016 5.3.5 Updated support for Xcode 8.1 17 Oct 2016 5.3.4 Improved stability for chipKIT boards 10 Oct 2016 5.3.3 Improved libraries management 08 Oct 2016 5.3.2 Added pre-compiled libraries creation and removal 06 Oct 2016 5.3.1 Added support for local pre-compiled libraries 04 Oct 2016 5.3.0 Added support for LaunchPad CC1310 29 Sep 2016 5.2.9 Improved stability for Light Blue 28 Sep 2016 5.2.8 Updated options for optimisation and debugging 27 Sep 2016 5.2.7 Updated support for Arduino.ORG 1.7.11 24 Sep 2016 5.2.6 Updated support for macOS 10.12 Sierra 16 Sep 2016 5.2.5 Added support for LightBlue Bean+ 14 Sep 2016 5.2.4 Updated support for Xcode 8 04 Sep 2016 5.2.3 Added support for Teensy 3.5 and 3.6 08 Sep 2016 5.2.2 Improved stability for MSP430 30 Aug 2016 5.2.1 Added board powered by Segger J-Link 28 Aug 2016 5.2.0 Updated support for Teensyduino 1.30 26 Aug 2016 5.1.9 Updated support for Intel Curie 1.0.6 26 Aug 2016 5.1.8 Updated support for Energia 1.6.11E19 24 Aug 2016 5.1.7 Added debugging for Arduino Due with Segger J-Link 20 Aug 2016 5.1.6 Added debugging for Adafruit Feather M0 with Segger J-Link 18 Aug 2016 5.1.5 Added debugging for Arduino.CC Zero 16 Aug 2016 5.1.4 Improved library management for Arduino Due 12 Aug 2016 5.1.3 Improved stability for Energia 1.6.10E18 official release 11 Aug 2016 5.1.2 Updated support for ESP8266 release 2.3.0 08 Aug 2016 5.1.1 Updated support for platforms 22 Jul 2016 5.1.0 Improved board management for Energia 1.6.10E18 15 Jul 2016 5.0.9 Improved path management for Teensy 15 Jul 2016 5.0.8 Improved serial console 09 Jul 2016 5.0.7 Tested with Xcode 8 on macOS 10.12 Sierra 24 Jun 2016 5.0.6 Stability enhancements for Energia 1.6.10E18 22 Jun 2016 5.0.5 Stability enhancements for RedBear Duo 17 Jun 2016 5.0.4 Stability enhancements for RedBear Blend 16 Jun 2016 5.0.3 Fix for Arduino IDE conflict with RedBear Duo 15 Jun 2016 5.0.2 Updated Tiva C boards tags 10 Jun 2016 5.0.1 Stability enhancements for Energia 1.6.10E18 04 Jun 2016 5.0.0 Updated support for Energia 1.6.10E18"},{"location":"Appendixes/History/#go-to-release-4","title":"Go to release 4","text":"Date Release Comment 31 Jul 2016 4.5.9 Improved unknown board management 04 Jul 2016 4.5.8 Added Arduino Due with Atmel ICE 02 Jul 2016 4.5.7 Stability enhancements for Arduino USB 23 Jun 2016 4.5.6 Dedicated folder embedXcode 4 08 May 2016 4.5.5 Updated support for Simblee 07 May 2016 4.5.4 Updated support for Adafruit 06 May 2016 4.5.3 Added generic support for Energia Multi-Tasking 28 Apr 2016 4.5.2 Added support for ArduCAM 27 Apr 2016 4.5.1 Stability improvements for RedBearLabs WiFi boards 22 Apr 2016 4.5.0 Added support for Arduino Tian 21 Apr 2016 4.4.9 Updated support for Microduino 1.6.8 18 Apr 2016 4.4.8 Updated support for Doxygen 1.8.11 15 Apr 2016 4.4.7 Added Style target 12 Apr 2016 4.4.6 Updated support for NodeMCU 08 Apr 2016 4.4.5 Updated support for Intel Edison Yocto and MCU SDKs 04 Apr 2016 4.4.4 Updated support for RedBear Duo 30 Mar 2016 4.4.3 Utilities stability improvement 29 Mar 2016 4.4.2 Stability improvements for Arduino Leonardo and LaunchPad CC3200 21 Mar 2016 4.4.1 Added support for Intel Curie 101 11 Mar 2016 4.4.0 Improved support for CC2650 SensorTag 07 Mar 2016 4.3.9 Improved support for Adafruit Feather M0 and Arduino Due 02 Mar 2016 4.3.8 Stability improvements for mbed 29 Feb 2016 4.3.7 Added beta support for Simblee 28 Feb 2016 4.3.6 Improved support for LinkIt One 27 Feb 2016 4.3.5 Updated debug for Arduino.ORG M0 Pro 23 Feb 2016 4.3.4 Updated platform versions for Arduino.CC IDE 19 Feb 2016 4.3.3 Added support for Adafruit Feather M0 18 Feb 2016 4.3.2 Utilities stability improvement 16 Feb 2016 4.3.1 Installation package stability improvement 15 Feb 2016 4.3.0 Added support for Mediatek LinkIt 7688 Smart Duo 13 Feb 2016 4.2.6 Updated platform versions for Arduino CC 1.6.5 10 Feb 2016 4.2.5 Added support for Moteino 08 Feb 2016 4.2.4 Rebased support for mbed 06 Feb 2016 4.2.3 Added support for RedBear Duo 06 Feb 2016 4.2.2 Added support for Digistump Oak 30 Jan 2016 4.2.1 Updated support for Teensyduino 1.27 and mbed 112 25 Jan 2016 4.2.0 Added support for UDOO Neo M4 22 Jan 2016 4.1.9 Support for Arduino.CC Zero 22 Jan 2016 4.1.8 Updated Intel Galileo and Edison upload 16 Jan 2016 4.1.7 Stability improvement for Arduino preferences 15 Jan 2016 4.1.6 Updated support for chipKIT 1.1.0 10 Jan 2016 4.1.5 Updated support for chipKIT 1.0.1 28 Dec 2015 4.1.4 Stability improvement for Arduino.CC 1.6.7 22 Dec 2015 4.1.3 Updated support for Arduino.CC 1.6.7 17 Dec 2015 4.1.2 Added support for Freedom K64F 15 Dec 2015 4.1.1 Stability improvement for ESP8266 2.0.0 14 Dec 2015 4.1.0 Support for MediaTek LinkIt One 12 Dec 2015 4.0.8 Stability enhancements for panStamp AVR 1.5.3 and MSP 1.0.6 09 Dec 2015 4.0.7 Updated support for Arduino.CC 1.6.6 with AVR 1.6.9 boards 05 Dec 2015 4.0.6 Stability enhancements for Energia 17 22 Nov 2015 4.0.5 OTA upload for ESP8266 NodeMCU 14 Nov 2015 4.0.4 Updated support for mbed 108 12 Nov 2015 4.0.3 Stability improvement for Energia 17 08 Nov 2015 4.0.2 Support for Arduino 1.6.6 and updated boards 03 Nov 2015 4.0.1 Stability improvement for Arduino.CC 1.6.5 01 Nov 2015 4.0.0 Support for Arduino 1.6.5 and Energia 17"},{"location":"Appendixes/History/#go-to-release-3","title":"Go to release 3","text":"Date Release Comment 26 Oct 2015 3.0.5 Support for Xcode 7.1 on Mac OS X 10.11 El Capitan 30 Sep 2015 3.0.4 Stability improvement for Arduino IDE check 25 Sep 2015 3.0.3 Stability enhancement for mbed 24 Sep 2015 3.0.2 Stability enhancement for Arduino Due and LaunchPad CC3200 14 Sep 2015 3.0.1 Support for Xcode 7 31 Jul 2015 3.0.0 New project and new file creation procedures"},{"location":"Appendixes/History/#go-to-release-2","title":"Go to release 2","text":"Date Release Comment 17 Jul 2015 2.9.9 Stability enhancements for Energia MT 09 Jul 2015 2.9.8 Updated support for mbed SDK 102 02 Jul 2015 2.9.7 Updated support for Energia 16 29 Jun 2015 2.9.6 Added support for NodeMCU 1.0 19 Jun 2015 2.9.5 Added debugging for MSP432 16 Jun 2015 2.9.4 Improved utilities 08 Jun 2015 2.9.3 Updated support for ESP8266 29 May 2015 2.9.2 Support for Intel Edison MCU 28 May 2015 2.9.1 Support for BeagleBone 27 May 2015 2.9.0 Updated support for LaunchPad C2000 14 May 2015 2.8.9 Updated support for Spark now Particle 09 May 2015 2.8.8 Updated support for Adafruit, Cosa, LightBlue, panStamp, RedBear, RFduino, Teensy 06 May 2015 2.8.7 Added support for LaunchPad C2000 F28069 04 May 2015 2.8.6 Improved support for Microduino 29 Apr 2015 2.8.5 Support for network and WiFi libraries on chipKIT WF32 and WiFire 27 Apr 2015 2.8.4 Updated support for Digispark board 27 Apr 2015 2.8.3 Stability enhancements 25 Apr 2015 2.8.2 Added support for RedBear CC3200 boards 20 Apr 2015 2.8.1 Added support for NodeMCU board 15 Apr 2015 2.8.0 Added support for ESP8266 12 Apr 2015 2.7.9 Added debugging for Arduino Zero Pro 10 Apr 2015 2.7.8 Added support for Arduino Zero Pro 10 Apr 2015 2.7.7 Added support for chipKIT DP32 and WiFire 07 Apr 2015 2.7.6 Updated support for Teensyduino 1.22 02 Apr 2015 2.7.5 Installer stability improvements 01 Apr 2015 2.7.4 Support for updated Spark Core 01 Apr 2015 2.7.3 Support for MSP432 and Energia MT 26 Mar 2015 2.7.2 Stability enhancements 23 Mar 2015 2.7.1 Stability improvements 20 Mar 2015 2.7.0 Updated support for RedBear 20 Mar 2015 2.6.9 Support for Intel Arduino IDE 1.6.0 20 Mar 2015 2.6.8 Support for Teensyduino 1.21 12 Mar 2015 2.6.7 Support for MPIDE 2014-08-21 and 1.5 12 Mar 2015 2.6.6 Support for Intel Edison on Yocto framework 10 Mar 2015 2.6.5 Support for Intel Edison on Wiring / Arduino framework 08 Mar 2015 2.6.4 mbed SDK updated to release 94 02 Mar 2015 2.6.3 Stability improvement for Arduino 1.6.0 20 Feb 2015 2.6.2 Support for Arduino 1.6.0 02 Feb 2015 2.6.1 Local libraries potential issue fixed 30 Jan 2015 2.6.0 Support for LaunchPad C2000 F28027 08 Jan 2015 2.5.0 Updated pre-compiled frameworks 06 Jan 2015 2.4.5 Support for RedBear on mbed 06 Jan 2015 2.4.4 Support for Nordic nRF51822 on mbed 06 Jan 2015 2.4.3 Stability enhancements for Spark Core 31 Dec 2014 2.4.2 Installation package stability enhancement 26 Dec 2014 2.4.1 Stability enhancements 20 Dec 2014 2.4.0 Support for Spark Core board 18 Nov 2014 2.3.3 Stability improvement for Robotis CM 12 Nov 2014 2.3.2 Support for Little Robot Friends 08 Nov 2014 2.3.1 Stability improvement from mbed 08 Nov 2014 2.3.0 Stability improvement from Xcode 6 04 Nov 2014 2.2.5 Support for Teensyduino 1.20 03 Nov 2014 2.2.4 Support for RedBear on Arduino 30 Oct 2014 2.2.3 Support for Adafruit Trinket 28 Oct 2014 2.2.2 Information message 26 Oct 2014 2.2.1 Stability enhancements 25 Oct 2014 2.2.0 Self-contained installation packages 24 Oct 2014 2.1.6 Stability enhancements 22 Oct 2014 2.1.5 Autonomous boards configuration files for mbed 22 Oct 2014 2.1.4 Support for Freedom KL25Z 20 Oct 2014 2.1.3 Support for Mac OS X 10.10 Yosemite 09 Oct 2014 2.1.2 Support for Nucleo F401RE on mbed with pre-compiled library 07 Oct 2014 2.1.1 Support for DFRobot Wido 05 Oct 2014 2.1.0 Support for Nucleo F401RE on mbed 01 Oct 2014 205 Fix for LaunchPad CC3200 uploader 30 Sep 2014 204 Support for RFduino 28 Sep 2014 203 Upgrade utility for Xcode 6 and embedXcode+ 22 Sep 2014 202 Stability enhancements 20 Sep 2014 201 Support for Xcode 6.0.1 and Mac OS X 10.9.5"},{"location":"Appendixes/History/#go-to-release-1","title":"Go to release 1","text":"Date Release Comment 20 Sep 2014 177 Support for Robotis OpenCM9.04 06 Sep 2014 176 Cleaner build process 01 Sep 2014 175 Support for LaunchPad CC3200 19 Aug 2014 174 Improved debugging for LaunchPad boards 08 Aug 2014 173 Support for PICadillo-35T 02 Aug 2014 172 Support for MPIDE-2014-03-16 31 Jul 2014 171 Support for Galileo board 29 Jul 2014 170 Stability enhancements for Arduino and Cosa 18 Jul 2014 169 Improved Document and Distribute targets 12 Jul 2014 168 Support for Arduino Micro board 10 Jul 2014 167 Stability enhancement 09 Jul 2014 166 Support for Arduino 1.5.7 05 Jul 2014 165 Improved debug for LaunchPad 20 Jun 2014 164 Support for LightBlue Bean 16 Jun 2014 163 Support for Arduino Nano and Mini 04 Jun 2014 162 Updated support for Cosa 01 Jun 2014 161 Stability enhancement 22 May 2014 160 Support for chipKIT PGM programmer-debugger 14 May 2014 159 Fix for Arduino 1.5.6 intricate libraries 11 May 2014 158 Maximum size for RAM 08 May 2014 157 Stability enhancement 08 May 2014 156 Set USB type and keyboard layout for Teensy 07 May 2014 155 Set path for IDE applications 05 May 2014 154 Optional serial console for Fast target 30 Apr 2014 153 Arduino Y\u00fan password and address 28 Apr 2014 152 Improved boards USB ports names 23 Apr 2014 151 Added My Boards configuration file 19 Apr 2014 150 Stability enhancement 17 Apr 2014 149 Stability enhancement 16 Apr 2014 148 Fix for project with spaces in name or path 06 Apr 2014 147 Support for Cosa framework 04 Apr 2014 146 Support for Microduino Core32u4 28 Mar 2014 145 Main sketch <code>.cpp</code> compilation fixed 27 Mar 2014 144 Correct release numbering 26 Mar 2014 143 Improved code-sense for libraries 23 Mar 2014 142 Updated utility for Arduino Y\u00fan over-the-air upload 14 Mar 2014 141 Stability improvement 12 Mar 2014 140 Maintenance fix for Teensy 3.1 12 Mar 2014 139 Stability improvement for Arduino Leonardo 10 Mar 2014 138 Arduino Pro mini ATmega328-3.3V board added 05 Mar 2014 137 Stability improvement for warning messages 04 Mar 2014 136 Stability improvement 01 Mar 2014 135 Optional warning messages 26 Feb 2014 133 Selection of local libraries 22 Feb 2014 133 Local libraries in folders 10 Feb 2014 132 Warning and patches for Arduino 1.5.5 06 Feb 2014 131 Improved indexing for code-sense 04 Feb 2014 130 Stability improvement for Arduino Mega2560 on Arduino 1.5.5 01 Feb 2014 129 Support for Teensy 3.0 and 3.1 on Teensyduino 1.17 28 Jan 2014 128 Stability improvement for Arduino Y\u00fan 26 Jan 2014 127 Support for Arduino Y\u00fan with upload through USB and over-the-air 22 Jan 2014 126 Stability improvement for Teensy 3.0 20 Jan 2014 125 Stability improvement for MPIDE 16 Jan 2014 124 Support for MPIDE release 20130715 07 Jan 2014 123 Stability enhancement 04 Jan 2014 122 Support for Microduino boards 16 Dec 2013 121 Support for Energia 11 10 Dec 2013 120 Support for DFRobot BLuno board 06 Dec 2013 119 Improved support for Stellaris-Tiva C 28 Nov 2013 118 External debugging for LaunchPad MSP430FR5739 28 Nov 2013 117 Arduino Uno with USB tinyISP back 26 Nov 2013 116 External debugging for MSP430 and Stellaris LaunchPad boards 24 Nov 2013 115 External debugging for MSP430 LaunchPad boards 14 Nov 2013 114 Libraries listed on main <code>Makefile</code> 10 Nov 2013 113 Stability improvement 08 Nov 2013 112 Support for Protostack 28-pin AVR board with USB tinyISP and USB ASP programmers 26 Oct 2013 111 Improved code-sense for Xcode 5 24 Oct 2013 110 Mac OS X 10.9 Mavericks compatibility and extended options for programmer 20 Oct 2013 109 Fixed utilities when project on separate volume 12 Oct 2013 108 Support for Arduino Uno USB tinyISP and improved update management 20 Sep 2013 107 Stability improvement 16 Sep 2013 106 Support for Xcode 5 on OS X 10.8 12 Sep 2013 105 Clearer boards names and new icons, support for LaunchPad MSP430F5529 10 Aug 2013 104 Select among two connected boards 01 Aug 2013 103 First release of embedXcode and embedXcode+ 29 Jul 2013 102 Improved utilities 27 Jul 2013 101 Stability enhancements"},{"location":"Appendixes/History/#go-to-release-0","title":"Go to release 0","text":"Date Release Comment 20 Jul 2013 61 Template for one single platform 16 Jul 2013 60 Automatic uninstall procedure 10 Jul 2013 59 Stability enhancement for Doxygen 08 Jul 2013 58 Management of file names with space 06 Jul 2013 57 Elapsed time for build and link 02 Jul 2013 56 Stability enhancement for Arduino Robot 24 Jun 2013 55 User Manual as electronic book 22 Jun 2013 54 Support for Arduino Robot 06 Jun 2013 53 Project configuration improved stability 28 May 2013 52 Project configuration stability enhancement 23 May 2013 51 Project configuration with user\u2019s libraries 20 May 2013 50 Arduino and Digispark 1.0.4 compatibility 10 May 2013 49 Improved code-sense for core libraries 06 May 2013 48 Compilation of main.cpp for embedXcode only 28 Apr 2013 47 Pre-processing variable EMBEDXCODE 26 Apr 2013 46 Excluded libraries from core, application and user 21 Apr 2013 45 Support for chipKIT Max32 board 21 Apr 2013 44 Compatibility for MPIDE version 0x01000202 19 Apr 2013 43 Release number check 16 Apr 2013 42 Maintenance release 16 Apr 2013 41 Estimated RAM usage 13 Apr 2013 40 Arduino Duemilanove configuration file 12 Apr 2013 39 Arduino architecture new variables 08 Apr 2013 38 embedXcode_prepare for OS X 10.7 05 Apr 2013 37 Stability enhancement with revised main() 27 Mar 2013 36 Configurations folder name fixed 26 Mar 2013 35 Support for OS X 10.7 Lion and 10.8 Mountain Lion 21 Mar 2013 34 Support for Digispark release 1.04 15 Mar 2013 33 Patch for libraries Libraries in sketchbook 15 Mar 2013 32 Full automatic project configuration 05 Mar 2012 31 Automatic project configuration 05 Mar 2012 30 Full support for Digispark (build, link and upload tested) 28 Feb 2013 29 Support for Digispark 26 Feb 2013 28 Alternative core and application libraries management 02 Feb 2013 27 Support for Tensyduino release 1.12 plug-in for Arduino IDE 15 Jan 2013 26 Support for Arduino Due (build, link and upload tested) 14 Dec 2012 25 New target for distribution 01 Jan 2013 25 Updated year 08 Jan 2013 25 Fix for Esplora issue on Arduino 1.0.3 10 Dec 2012 24 Fixed MAPLE_IDE variable and added Energia 9 support for Stellaris 24 Nov 2012 23 Fixed WiFi issue on Arduino 1.0.2 and 1.5 15 Nov 2012 22 New Make and Fast optimised targets 13 Nov 2012 21 Stability enhancement and better information 09 Nov 2012 20 Support for Teensy 3.0 28 Oct 2012 19 Support for StellarPad 26 Oct 2012 18 Support for Arduino Due (build and link tested, upload not tested) 21 Oct 2012 17 Selection of the pde, ino or cpp extension for the sketch 08 Oct 2012 16a Updated Install the template and Select the target sections 25 Sep 2012 16 Support for FraunchPad 11 Sep 2012 15a New installer and User Manual 01 Sep 2012 15 Support for Leonardo 25 Jun 2012 14 HEX and BIN files size optimisation 14 Jun 2012 13 Built-in self-documentation 05 Jun 2012 12 IDE-based identification for all platforms 03 Jun 2012 11 MCU- or IDE-based platform identification for #include library 23 May 2012 10 Leaflabs Maple implementation 16 Apr 2012 9 Code-sense reference defined by selected board 08 Apr 2012 8 Bugs fixed 05 Apr 2012 7 Wiring 1.0 and Energia 1.0 implementations 15 Mar 2012 6 All Arduino/chipKIT/Wiring/Energia and user\u2019s libraries included by default 12 Mar 2012 5 Bugs fixed 06 Mar 2012 4 Arduino 1.0 implementation 26 Feb 2012 3 Modular makefiles 18 Feb 2012 2 Improvements 14 Feb 2012 1 Multi-application, check-as-you-type, template 14 Feb 2012 0g Initial release for Xcode template 08 Feb 2012 0f Code-sense, click-to-error with standard targets 06 Feb 2012 0e Code checking while typing with Index as target 06 Feb 2012 0d User\u2019s Libraries 04 Feb 2012 0c Code-sense operational 02 Feb 2012 0b chipKIT operational 22 Jan 2012 0a Initial release for Xcode project"},{"location":"Appendixes/Indexes/","title":"Index of boards and platforms","text":"<p>This index lists the boards and platforms and provides links to the related pages.</p> <ul> <li> <p>Active boards are under active development and fully supported by emCode.</p> </li> <li> <p>Legacy boards are usually declared end-of-life by the manufacturer. emCode supports them but development is halted.</p> </li> <li> <p>Boards on hold are those for which the hardware and software provided by the manufacturer do not meet the expected quality and stabilty. Development is halted and may resume when the manufacturer improves the hardware and software.</p> </li> </ul>"},{"location":"Appendixes/Indexes/#active","title":"Active","text":"<ul> <li>Feather M0 and M4</li> <li>Feather ESP32</li> <li>Feather RP2040</li> <li>Feather nRF52832 and nRF52840</li> <li>Arduino ESP32</li> <li>Arduino Mbed-OS</li> <li>Arduino MegaAVR</li> <li>Arduino RP2040</li> <li>Arduino SAM</li> <li>Arduino SAMD</li> <li>Espressif ESP32</li> <li>Raspberry Pi Pico RP2040</li> <li>STM32</li> <li>Teensy</li> </ul>"},{"location":"Appendixes/Indexes/#legacy","title":"Legacy","text":"<ul> <li>Trinket and Trinket Pro AVR</li> <li>Feather ESP8266</li> <li>Arduino AVR</li> <li>Manage the Arduino Y\u00fa boards</li> <li>Arduino nRF52</li> <li>Espressif ESP8266</li> <li>Index</li> <li>Microsoft AZ3166</li> </ul>"},{"location":"Appendixes/Indexes/#on-hold","title":"On hold","text":"<ul> <li>Grove Beginner Kit for Arduino</li> <li>SenseCAP Indicator</li> <li>Xiao ESP32-C3</li> <li>Xiao expansion board</li> <li>Xiao M0 and Wio Terminal</li> <li>Xiao RP2040</li> <li>Xiao nRF52840 Mbed-OS</li> <li>Xiao nRF52840</li> </ul>"},{"location":"Appendixes/Legal/","title":"Legal notice","text":""},{"location":"Appendixes/Legal/#copyright","title":"Copyright","text":"<p>\u00a9 Rei Vilo, 2010-2023</p> <p>All rights reserved</p>"},{"location":"Appendixes/Legal/#licence","title":"Licence","text":"<p>emCode is under the Creative Common licence Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-SA 4.0) .</p> <p></p>"},{"location":"Appendixes/Legal/#disclaimer","title":"Disclaimer","text":"<p>The emCode software, including the related documentation, is provided to you \u201cas is,\u201d and we make no express or implied warranties whatsoever with respect to its functionality, operability, or use, including, without limitation, any implied warranties of merchantability, fitness for a particular purpose, or infringement. We expressly disclaim any liability whatsoever for any direct, indirect, consequential, incidental or special damages, including, without limitation, lost revenues, lost profits, losses resulting from business interruption or loss of data, regardless of the form of action or legal theory under which the liability may be asserted, even if advised of the possibility or likelihood of such damages.</p>"},{"location":"Appendixes/Legal/#brand-names-and-trademarks","title":"Brand names and trademarks","text":"<p>All brand names and trademarks mentioned in this website are the property of their respective owners.</p> <p>None of the brands mentioned in this website sponsor, authorise, or endorse emCode. Similarly, emCode does not sponsor, authorise, or endorse any of the brands mentioned in this website.</p>"},{"location":"Appendixes/Legal/#external-links","title":"External links","text":"<p>This website may contain links to external websites that are not provided or maintained by or in any way affiliated with it. Similarly, this website does not guarantee the accuracy, relevance, timeliness, or completeness of any information on these external websites.</p> <p>emCode has no affiliate partnerships and does not earn any commission on products purchased through links. The absence of partnerships keep the editorial content free from any influence.</p>"},{"location":"Appendixes/Legal/#gpdr","title":"GPDR","text":"<p>This section lists the options related to privacy. The new General Data Protection Regulation or GDPR enforcement started 25 May 2018.</p> <p>It is not entirely clear whether personal websites like the websites listed below are concerned by GDPR.</p> <p>The emCode and related documentation are hosted by GitHub, which has implemented GDPR as per the Data Protection Addendum .</p> <p>However, GitHub may use different cookies, such as technical cookies, necessary to enable the website to function properly; and analytical cookies, used to follow-up traffic and improve user experience.</p> <ul> <li> <p>Read the GitHub Marketplace Developer Agreement .</p> </li> <li> <p>Check the options on your browser preferences.</p> </li> <li> <p>Learn more about Google Analytics  and install the Google Analytics Opt-out Browser Add-on  available for Google Chrome, Mozilla Firefox, Apple Safari and Microsoft Edge.</p> </li> </ul>"},{"location":"Appendixes/Release/","title":"emCode 14.1.6 release notes","text":"<p>\u200bemCode is the continuation of embedXcode.</p> <p>emCode relies on Visual Studio Code and runs on Linux, including Windows Linux Sub-system (WSL).</p>"},{"location":"Appendixes/Release/#scope","title":"Scope","text":"<p>Release 14.1.6 is the initial public release of emCode.</p>"},{"location":"Appendixes/Section6/","title":"Tests","text":"<p>This section provides the versions of the operating system, IDEs and plug-ins, as well as the list of the boards tested.</p>"},{"location":"Appendixes/Section6/#operating-system-and-xcode","title":"Operating system and Xcode","text":"Element Version macOS 10.15.7 Xcode 11.7 <p>Danger</p> <p>embedXcode does not support macOS 11 Big Sur and Xcode 12.</p> <p>For more information on macOS 11 and Xcode 12,</p> <ul> <li>Please refer to Assessing macOS 11 and Xcode 12 .</li> </ul>"},{"location":"Appendixes/Section6/#ides-boards-and-plug-ins-versions","title":"IDEs, boards and plug-ins versions","text":""},{"location":"Appendixes/Section6/#active-platforms","title":"Active platforms","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment Adafruit Arduino 1.8 AVR 1.4.14 nRF52 1.3.0 For Feather nRF52832 and nRF52840 boards SAMD 1.7.11 For Feather M0 and M4 boards Arduino Arduino 1.8.13 16 June 2020 All versions prior to 1.8.0 are deprecated AVR 1.8.6 mbed-nano 3.0.1 For Nano 33 BLE boards mbed-RP2040 3.0.1 For Raspberry Pi Pico RP2040 boards, not recommended MegaAVR 1.8.7 For Nano Every board nRF52 1.0.2 For Primo and Primo Core boards SAM 1.6.12 For Due board SAMD 1.8.13 For Nano 33 IoT, Zero, M0 and Tian boards ATtinyCore Arduino 1.8 1.3.3 Espressif Arduino 1.8 ESP32 2.0.5 Valid for other ESP32 and ESP32C3-based boards ESP8266 3.0.1 Valid for other ESP8266-based boards LaunchPad Energia 1.8.10E23 17 Dec 2019 Actually released 02 Feb 2020 CC13x0 EMT 4.9.1 For CC1310- and CC1350-based boards CC13x2 EMT 5.31.0-beta3 For CC1312- and CC1352-based boards CC3200 1.0.3 CC3220 EMT 5.6.2 For CC3220S and CC3220SF LaunchPad boards MSP430 1.0.7 For MSP430G2, MPS430F and MSP430FR LaunchPad boards MSP430 ELF 2.1.0 For MPS430FR LaunchPad boards MSP432E EMT 5.19.0 For MSP432E401Y and TM4C1294XL LaunchPad boards MSP432P EMT 5.29.0-beta1 For red MSP432P4111 LaunchPad board MSP432R EMT 5.29.0 For red MSP432P401R LaunchPad board Tiva C 1.0.4 For LM4F- and TM4C-based LaunchPad boards MiniCore Arduino 1.8 2.0.1 Boot-loader for AVR ATmega boards nRF5 boards Arduino 1.8 0.7.0 Additional libraries are required Seeeduino Arduino 1.8 AVR 1.3.0 For Seeeduino and Seeed Grove Beginner Kit SAMD 1.8.0 For Xiao and Wio Terminal board Realtek 3.0.7 For RTL8720DN on Wio Terminal board RasPiArduino Arduino 1.8 0.0.1 For Raspberry Pi boards, not recommended RP2040 Arduino 1.8 2.6.4 For Raspberry Pi RP2040-based boards STM32 Arduino 1.8 2.3.0 For Nucleo and Discovery boards Teensy Teensyduino 1.54 04 Jul 2021"},{"location":"Appendixes/Section6/#legacy-platforms","title":"Legacy platforms","text":"<p>Support for the following platforms is either put on hold or discontinued.</p> Platform IDE Package Date Comment Arduino Arduino 1.8 STM32F4 1.0.1 For never released Star Otto board Arducam Arduino 1.6.5 ESP8266 2.2.0 For ArduCAM ESP8266 board chipKIT Arduino 1.8 2.1.0 Including 4D Systems PICadillo board Cosa Arduino 1.8 1.2.0 For AVR boards Digistump Arduino 1.8 AVR 1.6.7 For Digispark board Oak 1.0.6 For Oak board ftDuino Arduino 1.8 0.0.13 Beta! Intel Arduino 1.8 Galileo 1.6.7+1.0 No longer supported by Intel Edison 1.6.7+1.0 No longer supported by Intel Curie 2.0.4 No longer supported by Intel LaunchPad Energia 1.6.10E18 C2000 09 Dec 2015 Beta! Migrated from Energia 0101E0017 CC2650 09 Dec 2015 Beta! Migrated from Energia 0101E0017 CC3200 EMT 1.0.0 No longer available MSP432 EMT 3.8.0 For discontinued black MSP432 LaunchPad board Energia 0101E0012 MSP430G2 18 Mar 2014 Beta! Migrated from Energia 0101E0012 LightBlue Arduino 1.8 Bean Loader 1.12.6 For discontinued Bean and Bean+ boards Little Robot Friends Arduino 1.8 Library 1.6.0 Library 1.0 is no longer supported Little Robot Friends 2.2.0 Beta support for library 2.0 MediaTek LinkIt Arduino 1.8 One 1.1.23 For LinkIt One board Duo 0.1.8 For Smart 7688 Duo board in Arduino mode 7697 0.10.21 For LinkIt 7697 board Microsoft Arduino 1.8 AZ3166 2.0.0 For AZ3166 IoT DevKit board Microduino Arduino 1.8.4 Microduino 5.0 25 Mar 2019 For AVR-based boards Maple IDE 0.0.12 For STM32-based boards Moteino Arduino 1.8 1.6.1 Additional libraries are required panStamp Arduino 1.8 AVR 1.5.7 panStamp AVR NRG 1.1.0 panStamp NRG STM32L4 0.0.28 panStamp Quantum boards Particle Firmware 0.3.4 22 Oct 2014 Development on hold RedBear Arduino 1.8 AVR 1.0.3 For discontinued AVR boards nRF51822 1.0.8 For discontinued nRF51822 and BLE nano boards nRF52832 0.0.2 For discontinued nRF52832 boards STM32F2 0.3.3 For discontinued RedBear Duo board Energia 1.6.10E18 For discontinued CC3200-based boards RFduino Arduino 1.8 2.3.1 For discontinued RFduino board Robotis Robotis OpenCM 1.0.2 23 May 2013 Based on Maple IDE Simblee Arduino 1.8 1.1.4 For discontinued RFduino board STM32duino Arduino 1.8 1.8 For Nucleo and Discovery boards Arduino STM32 Arduino 1.8 2019.12.31 For STM32F1 and STM32F4 boards TinyCircuits Arduino 1.8 1.0.8 Udoo Neo Arduino 1.8 1.6.7 For Arduino 1.6.5 IDE only Wiring Wiring 1.0.1 28 Oct 2014 Discontinued Edison Yocto SDK 3.0 Mar, 15, 2016 No longer supported by Intel Edison MCU MCU SDK 1.0.10 24 Apr 2015 No longer supported by Intel"},{"location":"Appendixes/Section6/#what-has-been-tested","title":"What has been tested","text":"<p>The test protocol includes build and link, upload and run of a functioning sketch on the boards. Obviously, the tests are performed only on the boards and programmers owned.</p>"},{"location":"Appendixes/Section6/#active-platforms_1","title":"Active platforms","text":"<p>Support for the following platforms is active.</p> Platform Officially tested Tested by users Not tested Adafruit Adafruit Atmega32u4 Breakout Board (with Adafruit USBtinyISP), Adafruit Trinket 5V 16MHz, Adafruit Pro Trinket 5V 16MHz, Adafruit Feather M0 Bluefruit LE, Adafruit Feather M0 (with USB or Segger J-Link), Adafruit Feather M4 (with MSD, USB or Segger J-Link), Adafruit Feather nRF52832 (with USB or Segger J-Link), Adafruit Feather nRF52832 (with MSD, USB or Segger J-Link) Adafruit Trinket 3V 8MHz, Pro Trinket 3V 12MHz, Adafruit Feather 32u4, Adafruit Huzzah ESP8266, Adafruit PyPortal M4 (with MSD or USB) Arduino Arduino Uno, Arduino Due, Arduino Duemilanove, Mega2560, Mini Pro 5V, Arduino Leonardo, Arduino Uno with MiniCore boot-loader, Arduino Uno (with Adafruit USBtinyISP), Arduino Due (with USB or Segger J-Link), Arduino Y\u00fan (with USB, WiFi or Ethernet), Arduino Tian (with USB, WiFi or Ethernet), Arduino M0 Pro, Arduino Zero, Arduino Primo, Arduino Nano Every, Arduino Nano 33 BLE, Arduino Nano 33 IoT Arduino Micro, Mini Pro 3.3V, Arduino Due (with Atmel ICE) Arduino Mini, Arduino Nano, Arduino MKR FOX 1200, Arduino MKR GSM 1400, Arduino MKR NB 1500, Arduino MKR WAN 1300, Arduino MKR WiFi 1000, Arduino MKR WiFi 1010, Arduino MKR Zero, Arduino Portenta H7 (M4 core), Arduino Portenta H7 (M7 core) ATtinyCore ATtiny84 BBC micro:bit BBC micro:bit v1, BBC micro:bit v2 ESP32 ESP32-DevC, Adafruit Huzzah ESP32 (with USB or ESP-Prog), ESP32-CAM Wrover, ESP32-Pico (with USB or ESP-Prog) Adafruit Huzzah ESP32 (with WiFi), Wemos LoLin D32, ESP32 DevKitC (Minimal SPIFFS), ESP32-DevC (with WiFi) ESP8266 ESP8266-01, NodeMCU board 0.9 and 1.0 Wemos D1 R2 LaunchPad LaunchPad MSP430G2 with MSP430G2553, LaunchPad MSP430G2-ET with MSP430G2553, LaunchPad MSP430F5529, LaunchPad MSP430FR2433, LaunchPad MSP430FR4133, LaunchPad MSP430FR5969, LaunchPad MSP430FR5994, LaunchPad MSP430FR6989, Experimenter Board MSP430FR5739, LaunchPad MSP432P401R, LaunchPad MSP432E401Y, LaunchPad LM4F120, LaunchPad TM4C123, LaunchPad TM4C129 Ethernet, LaunchPad TM4C129 EMT, LaunchPad CC1310, LaunchPad CC1350, LaunchPad CC3200 LaunchPad MSP430FR2311, SensorTag CC1350, LaunchPad CC2650, LaunchPad CC3200, LaunchPad C2000 LaunchPad F28027, LaunchPad F28069, LaunchPad F28377S, LaunchPad MSP432E4111 LaunchPad MSP430G2 with MSP430G2231, LaunchPad MSP430G2 with MSP430G2452 Microsoft Azure IoT DevKit Moteino Moteino NodeMCU NodeMCU board 0.9 and 1.0 (with USB and WiFi) RasPiArduino Raspberry Pi 3B RP2040 Raspberry Pi Pico Seeeduino Seeeduino v4, Xiao M0 (with MSD, USB or Segger J-Link), Wio Terminal (with MSD or USB) STM32duino Nucleo STM32F401RE Arduino STM32 Maple 3 (Flash), Microduino Core STM32 (Flash) Nucleo F103RB (ST-Link) Teensy Teensy 3.0, Teensy 3.1, Teensy LC, Teensy 3.5, Teensy 3.6, Teensy 4.0 Teensy 3.2, Teensy 4.1 Teensy 2.0 <p>Users have reported successful use of embedXcode on other boards. If you\u2019re successful with another board, please report it to me so I can update the list. Thank you!</p>"},{"location":"Appendixes/Section6/#legacy-platforms_1","title":"Legacy platforms","text":"<p>Support for the following platforms is either put on hold or discontinued.</p> Platform Officially tested Tested by users Not tested Arduino Arduino Otto Star (with USB or Segger J-Link) ArduCAM ArduCAM ESP8266 and ArduCAM CC3200 Cosa Arduino Uno chipKIT chipKIT Uno32, chipKIT uC32, chipKIT DP32, chipKIT WF32, chipKIT WiFire Rev.B, chipKIT Uno32 (with chipKIT PGM) chipKIT Max32, chipKIT WiFire Rev.C DFRobot BLuno and Wido Digistump Digispark Oak DigiX ftDuino ftDuino Glowdeck Glowdeck (with BLE) Glowdeck (with USB or Segger J-Link) Intel Intel Curie, Intel Galileo, Intel Galileo Gen2 on Wiring / Arduino, Intel Edison on Wiring / Arduino (with USB and WiFi), Intel Edison on Yocto and MCU (with USB and WiFi) LaunchPad Black LaunchPad MSP432P401 LightBlue LightBlue Bean Bluetooth Little Robot Friends Little Robot Friends AVR, Little Robot Friends Dock Little Robot Friends SAMD Maple Maple revision 5 Mediatek LinkIt MediaTek LinkIt One, MediaTek LinkIt Smart 7688 Duo on Wiring / Arduino, Mediatek LinkIT 7697 Microduino Microduino Core and Core+ (with FT232R), Microduino Core32u4, Microduino STM32 nRF5 boards RedBear Blend nRF51822, RedBear Blend nRF51822 panStamp panStamp AVR (with panStick), panStamp NRG 1.1 (with panStick) panStamp Quantum Particle Particle Core USB and WiFi Particle Photon Protostack Protostack 28-pin AVR board (with Adafruit USB tinyISP or Protostack USB ASP) RedBear RedBear nRF51822, RedBear Duo and Blend nRF52832 on Wiring / Arduino, RedBear CC3200, RedBear CC3200 Mini on Energia and Energia MT RedBear BLE Nano on Wiring / Arduino, RedBear CC3200 Micro on Energia and Energia MT, RedBear Nano nRF52832 on Wiring / Arduino RedBear Blend RFduino RFduino Robotis Robotis OpenCM 9.04 Simblee Simblee Sparkfun Sparkfun Uno (with Sparkfun 5V FTDI basic programmer) Udoo Neo Udoo Neo (M4) (with USB and WiFi) Wiring Wiring S"},{"location":"Appendixes/Section6/#update-to-energia-1610e18-and-187e21","title":"Update to Energia 1.6.10E18 and 1.8.7E21","text":"<p> Release 1.6.10E18 of Energia changes the boards tags and discontinues support for the CC2650 SensorTag and C2000 LaunchPad boards.</p> <p>Release 1.8.7E21 of Energia isn\u2019t self-contained and requires the installation of the Java 8 JDK for external utilities.</p> <p>For the conversion table and the update procedure,</p> <ul> <li>Please refer to section Energia old and new boards tags .</li> </ul> <p>For the installation and use of Energia release 0101E0017 for CC2650 SensorTag and C2000 LaunchPad boards,</p> <ul> <li>Please refer to section Install the C2000 LaunchPad Platform .</li> </ul> <p>To install Java 8,</p> <ul> <li>Please refer to section Install Java 8 .</li> </ul>"},{"location":"Appendixes/Section6/#energia-old-and-new-boards-tags","title":"Energia old and new boards tags","text":"<p>Release 1.6.10E18 of Energia changes the boards tags.</p> LaunchPad Old New CC3200 WiFi <code>lpcc3200</code> <code>CC3200-LAUNCHXL</code> LM4F120 Stellaris <code>lplm4f120h5qr</code> <code>EK-TM4C123GXL</code> MSP430F5529 <code>lpmsp430f5529_25</code> <code>MSP-EXP430F5529LP</code> MSP430FR4133 <code>lpmsp430fr4133</code> <code>MSP-EXP430FR4133LP</code> MSP430FR5739 <code>lpmsp430fr5739</code> <code>MSP-EXP430FR5739LP</code> MSP430FR5969 <code>lpmsp430fr5969</code> <code>MSP-EXP430FR5969LP</code> MSP430FR6989 <code>lpmsp430fr6989</code> <code>MSP-EXP430FR6989LP</code> MSP430G2553 <code>lpmsp430g2553</code> <code>MSP-EXP430G2553LP</code> MSP432P401 EMT Red <code>MSP-EXP432P401RR</code> <code>MSP-EXP432P401R</code> TM4C123 Tiva C <code>lptm4c1230c3pm</code> <code>EK-TM4C123GXL</code> TM4C129 Connected <code>lptm4c1294ncpdt</code> <code>EK-TM4C1294XL</code>"},{"location":"Appendixes/Section6/#install-java-8","title":"Install Java 8","text":"<p>The Energia 1.8 IDE isn\u2019t self-contained and requires the installation of the Java 8 JDK for external utilities. If the Java 8 JDK isn\u2019t available, Energia prompts an error message.</p> <p></p> <p>If you don\u2019t plan to use the Energia IDE, there is no need for installing the Java 8 JDK as embedXcode doesn\u2019t require it.</p> <ul> <li>Go to Java SE Development Kit 8 Downloads  on the Oracle website.</li> </ul> <p></p> <ul> <li> <p>Download and install the <code>jdk-8u111-macosx-x64</code> package.</p> </li> <li> <p>Relaunch Energia 1.8 IDE.</p> </li> </ul>"},{"location":"Appendixes/Section6/#adafruit-nrf52-old-and-new-boards-tags","title":"Adafruit nRF52 old and new boards tags","text":"<p> Release 0.9.0 of the Adafruit nRF52 boards package changes the tags and the names of the boards. The Feather nRF52 board is now called Feather nRF52832.</p> Feather Old New nRF52832 <code>feather52</code> <code>feather52832</code> Feather nRF52 Feather nRF52832 <p>If a project uses the old definition,</p> <ul> <li> <p>Create a new project with the Adafruit nRF52 board.</p> </li> <li> <p>Copy the <code>Configurations</code> folder of the new project to the <code>Configurations</code> folder of the initial project.</p> </li> <li> <p>Reselect the board on the initial project.</p> </li> </ul> <p>The two options for the boot-loader, <code>s132v201</code> and <code>s132v6</code> are replaced by a single one, <code>s132v6</code>.</p> <p>The boards Adafruit Feather nRF52 and Adafruit Feather nRF52 s132v510 are no longer supported.</p> <ul> <li>Use the boards Adafruit Feather nRF52832 s132v611 instead.</li> </ul> <p>If the Feather nRF52832 board has been used with a previous version of Adafruit nRF52 boards package, the boot-loader of the board needs to be updated when moving to release 0.9.0.</p> <ul> <li>Please follow the procedure Flashing the Bootloader  at the Adafruit website.</li> </ul>"},{"location":"Appendixes/Section6/#bbc-micro-bit-old-and-new-boards-names","title":"BBC micro-bit old and new boards names","text":"<p> With the introduction of the new BBC micro-bit v2 based on the nRF52833 MCU, the name of the board configuration file ot the previous version based on the nRF51822 MCU is now <code>nRF BBC micro-bit v1 nRF51</code>.</p> BBC micro-bit Old New v1 <code>nRF BBC micro-bit nRF51</code> <code>nRF BBC micro-bit v1 nRF51</code> v2 <code>BBC micro-bit v2 nRF52</code>"},{"location":"Boards/","title":"Manage the boards","text":"<p>This section lists the peculiarities of specific boards grouped by platforms, for installation, development, upload and debugging.</p> <ul> <li>Manage the Adafruit platform </li> <li>Manage the Arduino platform </li> <li>Manage the Espressif platform </li> <li>Manage the Microsoft platform </li> <li>Manage the RP2040 platform </li> <li>Manage the Seeed platform </li> <li>Manage the STM32 platform </li> <li>Manage the Teensy platform </li> </ul>"},{"location":"Boards/Adafruit/","title":"Manage the Adafruit platform","text":"<p> The Adafruit platform includes boards based on ESP8266, ESP32, nRF52, SAMD, RP2040 and AVR.</p> <p>The installation is performed with Arduino-CLI.</p> <ul> <li>Feather ESP8266 </li> <li>Feather ESP32 </li> <li>Feather nRF52832 and nRF52840 </li> <li>Feather M0 and M4 </li> <li>Feather RP2040 </li> <li>Trinket and Trinket Pro AVR </li> </ul>"},{"location":"Boards/Adafruit/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform Package Date Comment AVR 1.4.14 nRF52 1.3.0 For Feather nRF52832 and nRF52840 boards SAMD 1.7.11 For Feather M0 and M4 boards emCode 13.0.3 09 Feb 2023"},{"location":"Boards/Adafruit/#visit-the-official-websites","title":"Visit the official websites","text":"Adafruit IDE Arduino CLI or IDE Website http://www.adafruit.com Download https://learn.adafruit.com/introducing-trinket/setting-up-with-arduino-ide Wiki http://ladyada.net/products/atmega32u4breakout/ Forum http://forums.adafruit.com"},{"location":"Boards/Adafruit/AVR/","title":"Manage the Adafruit AVR Trinket and Trinket Pro boards","text":"","tags":["Legacy"]},{"location":"Boards/Adafruit/AVR/#install","title":"Install","text":"<p>To use the Adafruit AVR Trinket and Trinket Pro boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://adafruit.github.io/arduino-board-index/package_adafruit_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install adafruit:avr\n</code></pre></p> <p>For both the Trinket and Trinket Pro, Adafruit acknowledges stability issues with the direct USB upload.</p> <p>For the Trinket Pro, Adafruit recommends to use a standard FTDI programmer for a better reliability.</p> <p>For the Adafruit M0 and M4 boards, Adafruit offers a drag-and-drop feature to flash the board. Called UF2 for USB Flashing Format, this option turns the boards into a mass storage device. However, the executable needs to be converted into a  <code>.uf2</code> file. The utility for the conversion is provided with the Adafruit nRF52 boards package.</p> <p>For more information,</p> <ul> <li> <p>Please refer to the section Install the FTDI driver  and to the page Using FTDI Cables  on the Adafruit website.</p> </li> <li> <p>Please refer to the page UF2 Bootloader Details  and Updating the bootloader .</p> </li> </ul>","tags":["Legacy"]},{"location":"Boards/Adafruit/AVR/#upload","title":"Upload","text":"<p> The Trinket and Pro Trinket boards from Adafruit require a specific procedure.</p> <p>For the Pro Trinket, Adafruit recommends to use a standard FTDI programmer for a better reliability. For more information,</p> <ul> <li>Please refer to the Using FTDI Cables  page on the Adafruit website.</li> </ul> <p>Proceed as follow:</p> <ul> <li> <p>Plug the Adafruit board in.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> <li> <p>Wait for the message window:</p> </li> </ul> <p></p> <ul> <li>Press the Reset button on the board.</li> </ul> <p></p> <ul> <li> <p>The red LED starts flashing.</p> </li> <li> <p>Click on OK.</p> </li> </ul> <p></p> <p>By default, those boards don\u2019t feature a serial-to-USB communication.</p> <p>For more information,</p> <ul> <li>Please refer to the pages Programming with AVRdude  for the Trinket boards and Setting-Up the Arduino IDE  for the Pro Trinket boards.</li> </ul>","tags":["Legacy"]},{"location":"Boards/Adafruit/Cortex-M/","title":"Manage the Adafruit Feather M0 and M4 boards","text":"","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#install","title":"Install","text":"<p>To install the Adafruit Feather M0 and M4 boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://adafruit.github.io/arduino-board-index/package_adafruit_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install adafruit:samd\n</code></pre></p> <p>For more information on the Feather M0,</p> <ul> <li>Please refer to the section Arduino IDE Setup .</li> </ul> <p>For more information on the Feather M4,</p> <ul> <li>Please refer to the section Arduino IDE Setup .</li> </ul> <p>For debugging against the Feather M0 and M4, use the Segger J-Link emulator.</p> <p>For more information,</p> <ul> <li>Please refer to the section Install utilities for Segger debugger  and to the page Proper Debugging of ATSAMD21 Processors  on the Adafruit website.</li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#upload","title":"Upload","text":"<p> For the Adafruit Feather M0 and M4 boards, Adafruit offers two options to upload the executable to the boards.</p> <p>The first option is the standard upload procedure through serial over USB.</p> <p>The second option, called UF2 for USB Flashing Format, turns the board into a mass storage device. Programming is done with a simple drag-and-drop or copy of the executable onto the mass storage device.</p>","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#upload-using-standard-usb","title":"Upload using standard USB","text":"<p>Before uploading using the standard USB procedure,</p> <ul> <li> <p>Plug the Adafruit board in.</p> </li> <li> <p>Check the LED on the board is green.</p> </li> <li> <p>Otherwise, double-press the Reset button on the board to enter boot-loader mode.</p> </li> </ul> <p>For more information,</p> <ul> <li>Please refer to the page Manually bootloading .</li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#upload-using-uf2","title":"Upload using UF2","text":"<p>For the Adafruit Feather M0 and M4 boards, this drag-and-drop procedure requires a specific format. The executable needs to be converted into a <code>.uf2</code> file. The utility for the conversion is provided by the Adafruit nRF52 boards package.</p> <p>To install the Adafruit nRF52 boards package,</p> <ul> <li>Please refer to Install the Adafruit platform  section.</li> </ul> <p>Before uploading,</p> <ul> <li> <p>Plug the Adafruit board in.</p> </li> <li> <p>Check a volume called <code>FEATHERBOOT</code> is shown on the desktop.</p> </li> <li> <p>Otherwise, double-press the Reset button on the board to activate it.</p> </li> <li> <p>Check the LED on the board is green.</p> </li> </ul> <p>For more information on the Feather M0 and the UF2 boot-loader,</p> <ul> <li>Please refer to the pages UF2 Bootloader Details , Installing the UF2 Bootloader , UF2 Bootloader Details  and Updating the boot-loader .</li> </ul> <p>For more information on the Feather M4 and the UF2 boot-loader,</p> <ul> <li>Please refer to the pages UF2 Bootloader Details , Entering Bootloader Mode  and Manually bootloading .</li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/Cortex-M/#debug","title":"Debug","text":"<p> The Adafruit Feather M0 exposes the SWD signals through SWCLK and SWDIO pads and the Adafruit Feather M4 through a 2x5 0.05\u201d connector.</p> <p>Cables and pins should be soldered to connect the Segger J-Link programmer-debugger.</p> <p> Example of SWD implementation for the Feather M4 board, front and rear</p> <p>For more information on how to prepare the boards,</p> <ul> <li>Please refer to Segger J-Link with Adafruit Feather M4 .</li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/","title":"Manage the Adafruit Feather ESP32 boards","text":"","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/#install-the-feather-esp32-boards","title":"Install the Feather ESP32 boards","text":"<p>To install the Adafruit Feather ESP32 boards,</p> <ul> <li>Please refer to Install the Espressif platform .</li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/#upload","title":"Upload","text":"","tags":["Active"]},{"location":"Boards/Adafruit/ESP32/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Adafruit/ESP8266/","title":"Manage the Adafruit Feather ESP8266 boards","text":"","tags":["Legacy"]},{"location":"Boards/Adafruit/ESP8266/#install","title":"Install","text":"<p>To install the Adafruit Feather ESP8266 boards,</p> <ul> <li>Please refer to Install the Espressif platform .</li> </ul> <p>For more information on the installation of the Adafruit boards,</p> <ul> <li>Please refer to Setting up with Arduino IDE  on the Adafruit website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/Adafruit/ESP8266/#develop","title":"Develop","text":"","tags":["Legacy"]},{"location":"Boards/Adafruit/ESP8266/#upload","title":"Upload","text":"","tags":["Legacy"]},{"location":"Boards/Adafruit/ESP8266/#debug","title":"Debug","text":"","tags":["Legacy"]},{"location":"Boards/Adafruit/RP2040/","title":"Manage the Adafruit Feather RP2040 boards","text":"","tags":["Active"]},{"location":"Boards/Adafruit/RP2040/#install-the-feather-rp2040","title":"Install the Feather RP2040","text":"<p>For the Feather boards based on the RP2040,</p> <ul> <li>Please refer to Install the Raspberry Pi Pico RP2040 platform .</li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/RP2040/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Adafruit/RP2040/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"","tags":["Active"]},{"location":"Boards/Adafruit/RP2040/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"","tags":["Active"]},{"location":"Boards/Adafruit/RP2040/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["Active"]},{"location":"Boards/Adafruit/RP2040/#upload","title":"Upload","text":"","tags":["Active"]},{"location":"Boards/Adafruit/RP2040/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/","title":"Manage the Adafruit Feather nRF52832 and nRF52840 boards","text":"","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#install","title":"Install","text":"<p>To install the Adafruit Feather nRF52832 and nRF52840 boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://adafruit.github.io/arduino-board-index/package_adafruit_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install adafruit:nrf52\n</code></pre></p> <p>The Feather nRF52832 board (previously named Feather nRF52) requires the installation of additional tools.</p> <ul> <li>Please refer to the Third Party Tool Installation of nrfutil (OS X and Linux Only)  on the Adafruit website.</li> </ul> <p>Adafruit now includes in the boards package a customised version of the <code>nrfutil</code> utility, named <code>adafruit-nrfutil</code>.</p> <p>Similarly, if the Feather nRF52832 board (previously named Feather nRF52) has been used with a previous version of Adafruit nRF52 boards package, the boot-loader of the boards needs to be updated when moving to release 0.9.0.</p> <ul> <li>Please follow the procedure Flashing the Bootloader  at the Adafruit website.</li> </ul> <p>When using Serial,</p> <ul> <li>Add to the main <code>Makefile</code></li> </ul> <p><pre><code>APP_LIBS_LIST = Adafruit_TinyUSB_Arduino\n</code></pre></p> <ul> <li>Add to the main sketch</li> </ul> <p><pre><code>#include \"Adafruit_TinyUSB.h\"\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#develop","title":"Develop","text":"<p>emCode adds the following libraries automatically for Serial, file system and Bluetooth:</p> <p><pre><code>APP_LIBS_LIST += Adafruit_TinyUSB_Arduino\nAPP_LIBS_LIST += Adafruit_LittleFS InternalFileSytem\nAPP_LIBS_LIST += Adafruit_nRFCrypto Bluefruit52Lib\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#use-the-libraries-for-serial","title":"Use the libraries for Serial","text":"<ul> <li>Add to the main sketch</li> </ul> <p><pre><code>#include \"Adafruit_TinyUSB.h\"\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#upload","title":"Upload","text":"<p> For the Adafruit Feather nRF52832 and nRF52840 boards, Adafruit offers up to three options to upload the executable to the boards.</p> <p>The first option is the standard upload procedure through serial over USB.</p> <p>The second option, called UF2 for USB Flashing Format, turns the board into a mass storage device. Programming is done with a simple drag-and-drop or copy of the executable onto the mass storage device. This option is only available on the Adafruit Feather nRF52840 board.</p> <p>The third option uses an external programmer-debugger like the Segger J-Link. The Adafruit Feather nRF52840 board comes with the SWD 2x5 1.27 mm connector. It needs to be soldered on the Adafruit Feather nRF52832 board.</p>","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#upload-using-uf2","title":"Upload using UF2","text":"<p>For the Adafruit Feather nRF52840, the drag-and-drop procedure requires the same specific format as for the Adafruit Feather M0 and M4 boards. The Adafruit nRF52 boards package includes the utility to convert the executable into a  <code>.uf2</code> file. This option is not available on the Adafruit Feather nRF52832 board.</p> <p>Before uploading to the Adafruit Feather nRF52840,</p> <ul> <li> <p>Select the board Adafruit Feather nRF52840 s140b611 (MSD).</p> </li> <li> <p>Plug the Adafruit board in.</p> </li> <li> <p>Check a volume called <code>FTHR840BOOT</code> is shown on the desktop.</p> </li> <li> <p>Otherwise, double-press the Reset button on the board to activate it.</p> </li> <li> <p>Check the LED on the board is green.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul> <p>For more information on the Feather nRF52840,</p> <ul> <li>Please refer to the page Update Bootloader .</li> </ul> <p>For more information on the Feather nRF52832,</p> <ul> <li>Please refer to the page Flashing the Bootloader .</li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#upload-using-segger-j-link","title":"Upload using Segger J-Link","text":"<p>The Adafruit Feather nRF52840 board provides the SWD 2x5 1.27 mm connector, while the Adafruit Feather nRF52832 board provisions the pads to solder the connector on.</p> <p>Depending on the Segger J-Link model, the programmer-debugger can power the board. Otherwise, the board requires an external LiPo or USB.</p> <ul> <li> <p>Connect the programmer-debugger to the board.</p> </li> <li> <p>If the programmer-debugger doesn\u2019t power the board, use an external LiPo or USB.</p> </li> <li> <p>Select the board Adafruit Feather nRF52832 s132v611 (J-Link) or Adafruit Feather nRF52840 s140b611 (J-Link) to use J-Link,</p> </li> <li> <p>Select the board Adafruit Feather nRF52832 s132v611 (Ozone) or Adafruit Feather nRF52840 s140b611 (Ozone) to use Ozone.</p> </li> <li> <p>Launch any of the targets All, Upload, Fast or Debug.</p> </li> </ul>","tags":["Active"]},{"location":"Boards/Adafruit/nRF52/#debug","title":"Debug","text":"<p> The Segger J-Link provides a JTAG 2x10 2.54 mm 0.1\u201d connector while the Adafruit Feather nRF52832 and nRF52840 feature a 2x5 1.27 mm 0.05\u201d SWD connector.</p> <ul> <li>Use for example the JTAG (2x10 2.54 mm) to SWD (2x5 1.27 mm) Cable Adapter Board  and a 10-pin 2x5 Socket-Socket 1.27 mm IDC (SWD) Cable - 150 mm long  from Adafruit, or similar hardware.</li> </ul> <p>The Adafruit Feather nRF52832 only provisions the pads, but the SWD connector needs to be soldered.</p> <ul> <li>Use for example the SWD 2x5 1.27 mm 0.05\u201d Connector  or the even more compact Mini SWD 2x5 1.27 mm 0.05\u201d Connector  from Adafruit, or similar hardware.</li> </ul> <p>The Segger J-Link Edu mini provides the same 2x5 1.27 mm 0.05\u201d SWD connector as the Adafruit Feather nRF52840.</p> <ul> <li>Just use the 10-way flat cable provided with the Segger J-Link Edu mini.</li> </ul> <p>If the software suite for the Segger J-Link isn\u2019t installed,</p> <ul> <li>Follow the procedure at Install the Segger J-Link Software Suite .</li> </ul> <p>Because the Adafruit Feather nRF52 boards run on FreeRTOS, J-Link requires specific plug-ins. Ozone manages FreeRTOS better than the command-line J-Link utility and is thus strongly recommended.</p>","tags":["Active"]},{"location":"Boards/Arduino/","title":"Manage the Arduino platform","text":"<p> The Arduino platform includes boards based on the AVR, MegaAVR, SAM, SAMD, nRF52, RP2040.</p> <p>The installation is performed with Arduino-CLI.</p> <ul> <li>Arduino AVR ;</li> <li>Arduino MegaAVR ;</li> <li>Arduino SAM ;</li> <li>Arduino SAMD ;</li> <li>Arduino ESP32 ;</li> <li>Arduino nRF52 ;</li> <li>Arduino RP2040 ;</li> <li>Arduino Mbed-OS .</li> </ul>"},{"location":"Boards/Arduino/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Package Release Date Comment AVR 1.8.6 mbed-nano 3.5.1 For Nano 33 BLE boards mbed-RP2040 3.5.4 For Raspberry Pi Pico RP2040 boards, not recommended MegaAVR 1.8.7 For Nano Every board nRF52 1.0.2 For Primo and Primo Core boards, archived SAM 1.6.12 For Due board SAMD 1.8.13 For Nano 33 IoT, Zero, M0 and Tian boards emCode 13.0.1 03 Feb 2023 Last update"},{"location":"Boards/Arduino/#visit-the-official-websites","title":"Visit the official websites","text":"Arduino Arduino IDE https://github.com/arduino/arduino-ide Arduino CLI https://github.com/arduino/arduino-cli Arduino AVR https://github.com/arduino/ArduinoCore-avr Arduino megaAVR https://github.com/arduino/ArduinoCore-megaavr Arduino SAMD https://github.com/arduino/ArduinoCore-samd Arduino SAM https://github.com/arduino/ArduinoCore-sam Arduino Mbed-OS https://github.com/arduino/ArduinoCore-mbed Arduino nRF52 https://github.com/arduino/ArduinoCore-primo"},{"location":"Boards/Arduino/AVR/","title":"Manage the Arduino AVR boards","text":"","tags":["Legacy"]},{"location":"Boards/Arduino/AVR/#install","title":"Install","text":"<p>To install the Arduino AVR boards,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:avr\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/AVR/#upload","title":"Upload","text":"<p>The Arduino Leonardo doesn\u2019t rely on an external circuit for the serial over USB connection.</p> <p>There are two steps for upload the executable to the board. First, the main computer turns the serial connection to 1200 bps to trigger the boot-loader. Then, the main computer enumerates the available serial ports and starts uploading.</p> <p>The delay between the two steps can be adjusted. The default value is set to one second.</p> <p><pre><code>DELAY_BEFORE_UPLOAD = 1\n</code></pre></p> <ul> <li> <p>Open the <code>Arduino Leonardo.xcconfig</code> board configuration file.</p> </li> <li> <p>Edit the line with <code>DELAY_BEFORE_UPLOAD</code> and change the value.</p> </li> </ul> <p><pre><code>DELAY_BEFORE_UPLOAD = 2\n</code></pre></p> <p>The values reported as successful are between one and three seconds.</p> <ul> <li> <p>Select the target All or Fast or Upload.</p> </li> <li> <p>Press the button Run or press Cmd+B.</p> </li> </ul>","tags":["Legacy"]},{"location":"Boards/Arduino/ESP32/","title":"Manage the Arduino ESP32 boards","text":"<p>The Arduino ESP32 platform includes the Arduino Nano ESP32 board.</p> <p>Although also supported by the Espressif platform , the Arduino Nano ESP32 board uses a specific protocol for upload. </p>","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#install","title":"Install","text":"<p>To install the Arduino ESP32 boards,</p> <p>To install the Arduino SAM boards,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:esp32\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#upload-with-dfu-util","title":"Upload with dfu-util","text":"<p>The Arduino Nano ESP32 uses a specific uploader.</p> <p>On Linux, the device table needs to be updated.</p> <ul> <li>Launch</li> </ul> <p><pre><code>sudo nano /etc/udev/rules.d/99-arduino.rules\n</code></pre></p> <ul> <li>Add the following line.</li> </ul> <p><pre><code>SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2341\", GROUP=\"plugdev\", MODE=\"0666\"\n</code></pre></p> <ul> <li>Reload the devices table.</li> </ul> <p><pre><code>sudo udevadm control --reload-rules\n</code></pre></p> <p>For more information on udev rules, </p> <ul> <li>Please refer to Fix udev rules on Linux .</li> </ul>","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#upload","title":"Upload","text":"<p>The Arduino Nano ESP32 board uses a specific protocol for upload, <code>dfu-util</code>, instead of the standard <code>esptool.py</code>. </p> <p>In case the board remains unresponsive, </p> <ul> <li>Please follow the procedure Reset the Arduino bootloader on the Nano ESP32 .</li> </ul>","tags":["Active"]},{"location":"Boards/Arduino/ESP32/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Arduino/Mbed/","title":"Manage the Arduino Mbed-OS boards","text":"<p>The Arduino Mbed-OS platform includes the Arduino Nano 33 BLE Sense based on the nRF52840 MCU and the Arduino Nano RP2040 Connect based on the RP2040 MCU.</p>","tags":["Active"]},{"location":"Boards/Arduino/Mbed/#install-the-arduino-nano-33-ble-sense-board","title":"Install the Arduino Nano 33 BLE Sense board","text":"<p>To install the Arduino Nano 33 BLE Sense board,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:mbed_nano\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Arduino/Mbed/#install-the-arduino-nano-rp2040-connect-board","title":"Install the Arduino Nano RP2040 Connect board","text":"<p>There are two options for the Arduino Nano RP2040 Connect board.</p> <p>To install the official Arduino core package based on on Mbed-OS,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:mbed_rp2040\n</code></pre></p> <p>As an alternative for better performance and compatibility,</p> <ul> <li>Use the Raspberry Pi Pico RP2040 platform  on the Arduino Nano RP2040 Connect board.</li> </ul>","tags":["Active"]},{"location":"Boards/Arduino/Mbed/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Arduino/Mbed/#upload","title":"Upload","text":"","tags":["Active"]},{"location":"Boards/Arduino/Mbed/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Arduino/MegaAVR/","title":"Manage the Arduino MegaAVR boards","text":"<p>The Arduino MegaAVR platform includes the Arduino Nano Every.</p>","tags":["Active"]},{"location":"Boards/Arduino/MegaAVR/#install","title":"Install","text":"<p>To install the Arduino MegaAVR boards,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:megaavr\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Arduino/MegaAVR/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Arduino/MegaAVR/#upload","title":"Upload","text":"","tags":["Active"]},{"location":"Boards/Arduino/MegaAVR/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Arduino/RP2040/","title":"Manage the Arduino RP2040 boards","text":"","tags":["Active"]},{"location":"Boards/Arduino/RP2040/#install","title":"Install","text":"<p>There are two options for the Arduino Nano RP2040 Connect board.</p> <p>To install the official Arduino Nano RP2040 Connect core package based on on Mbed-OS,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:mbed_rp2040\n</code></pre></p> <p>As an alternative for better performance and compatibility,</p> <ul> <li>Use the Raspberry Pi Pico RP2040 platform  on the Arduino Nano RP2040 Connect board.</li> </ul>","tags":["Active"]},{"location":"Boards/Arduino/RP2040/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Arduino/RP2040/#upload","title":"Upload","text":"","tags":["Active"]},{"location":"Boards/Arduino/RP2040/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Arduino/SAM/","title":"Manage the Arduino SAM boards","text":"<p>The Arduino SAM platform includes the Arduino Due.</p>","tags":["Active"]},{"location":"Boards/Arduino/SAM/#install","title":"Install","text":"<p>To install the Arduino SAM boards,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:sam\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Arduino/SAM/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Arduino/SAM/#upload","title":"Upload","text":"","tags":["Active"]},{"location":"Boards/Arduino/SAM/#debug","title":"Debug","text":"<p> The Segger J-Link provides a JTAG 2x10 2.54 mm 0.1\u201d connector while the Arduino Due features a 2x5 1.27 mm 0.05\u201d SWD connector.</p> <ul> <li>Use for example the JTAG (2x10 2.54mm) to SWD (2x5 1.27mm) Cable Adapter Board  and a 10-pin 2x5 Socket-Socket 1.27mm IDC (SWD) Cable - 150mm long  from Adafruit, or similar hardware.</li> </ul> <p>If the software suite for the Segger J-Link isn\u2019t installed,</p> <ul> <li> <p>Follow the procedure at Install the Segger J-Link Software Suite .</p> </li> <li> <p>Double-check the orientation of the SWD connector on the Arduino Due schematics.</p> </li> </ul> <p> Arduino Due, SWD to JTAG adaptor, Segger J-Link</p>","tags":["Active"]},{"location":"Boards/Arduino/SAMD/","title":"Manage the Arduino SAMD boards","text":"<p>The arduino SAMD platform includes the Arduino Nano 33 IoT, Arduino Zero, Arduino M0 and Arduino Tian boards.</p>","tags":["Active"]},{"location":"Boards/Arduino/SAMD/#install","title":"Install","text":"<p>To install the Arduino SAMD boards,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:samd\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Arduino/SAMD/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Arduino/SAMD/#upload-to-arduino-m0-pro","title":"Upload to Arduino M0 Pro","text":"<p> The Arduino M0 Pro has two USB connectors: one called native and another called programmer. Both can be used to upload a sketch.</p> <p>However, the programming port offers a better stability and is required for debugging.</p> <p> Programming port left, native USB port right</p> <ul> <li>Click on Allow to proceed.</li> </ul>","tags":["Active"]},{"location":"Boards/Arduino/SAMD/#upload-to-arduino-zero","title":"Upload to Arduino Zero","text":"<p> The Arduino Zero has two USB connectors: one called native and another called programmer. Both can be used to upload a sketch.</p> <p>However, the programming port offers a better stability and is required for debugging.</p> <p> Programming port left, native USB port right</p>","tags":["Active"]},{"location":"Boards/Arduino/SAMD/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Arduino/SAMD/#select-the-usb-port-for-the-arduino-m0-pro","title":"Select the USB Port for the Arduino M0 Pro","text":"<ul> <li>Connect the USB cable to the Programmer USB Port is order to perform debugging. The native USB port doesn\u2019t feature debugging.</li> </ul> <ul> <li>Use the USB Programming port</li> </ul>","tags":["Active"]},{"location":"Boards/Arduino/SAMD/#declare-the-arduino-zero-cmsis-dap-device","title":"Declare the Arduino Zero CMSIS-DAP device","text":"<p>On Linux, the Arduino Zero CMSIS-DAP device may need to be declared.</p> <ul> <li>Open a Terminal window and run</li> </ul> <p><pre><code>sudo nano /etc/udev/rules.d/98-openocd.rules\n</code></pre></p> <ul> <li>Edit</li> </ul> <p><pre><code>ACTION!=\"add|change\", GOTO=\"openocd_rules_end\"\nSUBSYSTEM!=\"usb|tty|hidraw\", GOTO=\"openocd_rules_end\"\nATTRS{product}==\"*CMSIS-DAP*\", MODE=\"664\", GROUP=\"plugdev\"\nLABEL=\"openocd_rules_end\"\n</code></pre></p> <ul> <li> <p>Save and close with ++ctl+o++ Ctrl+X;</p> </li> <li> <p>Update with</p> </li> </ul> <p><pre><code>sudo udevadm control --reload\n</code></pre></p> <p>For more information on CMSIS-DAP,</p> <ul> <li>Please refer to Arduino Zero error: unable to find CMSIS-DAP device</li> </ul>","tags":["Active"]},{"location":"Boards/Arduino/Yun/","title":"Manage the Arduino Y\u00fa boards","text":"","tags":["Legacy"]},{"location":"Boards/Arduino/Yun/#upload-to-arduino-yn-using-ethernet-or-wifi","title":"Upload to Arduino Y\u00fan using Ethernet or WiFi","text":"<p>Although the Arduino Y\u00fan requires no specific procedure, the Ethernet or WiFi network needs to be installed and configured successfully before any upload, and the RSA key fingerprint of the Arduino Y\u00fan needs to be known.</p> <ul> <li> <p>Check that the router has discovered the Arduino Y\u00fan and note the IP address.</p> </li> <li> <p>Check the main computer knows the RSA key fingerprint of the Arduino Y\u00fan.</p> </li> <li> <p>Also, keep the password of the Arduino Y\u00fan at hand.</p> </li> <li> <p>Disconnect all the SPI devices from the ICSP connector as the WiFi module uses SPI to communicate with the Arduino.</p> </li> </ul> <p>It is recommended to proceed with a test of the over-the-air upload with the Arduino IDE, through Ethernet or WiFi, to be sure that the main computer recognises the board and knows the RSA key fingerprint of the Arduino Y\u00fan.</p>","tags":["Legacy"]},{"location":"Boards/Arduino/Yun/#check-the-ssh-connection","title":"Check the SSH connection","text":"<p>To check the router has discovered the Arduino Y\u00fan,</p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Type the command <code>arp -a</code> to list all know hosts.</p> </li> </ul> <p>The Arduino Y\u00fan board should appear as <code>arduino.local</code> but often has a different name, as <code>host-001</code>.</p> <p>The default address should be <code>192.168.240.1</code> but may differ according to the settings of the network.</p> <p>To check the main computer knows the RSA key fingerprint of the board,</p> <ul> <li>Open a Terminal window and type the command <code>ssh root@</code> followed by the IP address of the board, <code>192.168.240.1</code> in the example.</li> </ul> <p><pre><code>ssh root@192.168.240.1\n</code></pre></p> <p>If the board is unknown, a message asks for confirmation of the RSA key fingerprint.</p> <p><pre><code>The authenticity of host '192.168.240.1 (192.168.240.1)' can't be established.\nRSA key fingerprint is 00:11:22:33:44:55:66:77:88:99:aa:bb:cc:dd:ee:ff.\nAre you sure you want to continue connecting (yes/no)? yes\n</code></pre></p> <ul> <li>Enter <code>yes</code> and validate.</li> </ul> <p>A message confirms the RSA key fingerprint has been added to the list of know hosts.</p> <p><pre><code>Are you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.240.1' (RSA) to the list of known hosts.\n\nroot@192.168.240.1's password:\n</code></pre></p> <ul> <li>Finally, type in the password to make the connection.</li> </ul> <p><pre><code>BusyBox v1.19.4 (2013-08-07 16:16:02 CEST) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\nroot@Arduino:~#\n</code></pre></p> <p>The Terminal window s displays the splash screen of the Arduino Y\u00fan.</p> <p><pre><code>BusyBox v1.19.4 (2014-04-10 11:08:41 CEST) built-in shell (ash)\nEnter 'help' for a list of built-in commands.\n\n  _______                     ________        __\n |       |.-----.-----.-----.|  |  |  |.----.|  |_\n |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|\n |_______||   __|_____|__|__||________||__|  |____|\n          |__| W I R E L E S S   F R E E D O M\n ----------------------------------------------------\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/Yun/#enter-ip-address-and-password","title":"Enter IP address and Password","text":"<p>During the first compilation, embedXcode looks for the Arduino Y\u00fan board and checks the password.</p> <p>If the Arduino board isn\u2019t found on the network, a window asks for the IP address.</p> <p></p> <ul> <li> <p>Enter the IP address of the Arduino Y\u00fan board.</p> </li> <li> <p>Click on OK to validate or Cancel to cancel.</p> </li> </ul> <p>A message box asks for the password.</p> <p></p> <ul> <li> <p>Enter the password of the Arduino Y\u00fan board.</p> </li> <li> <p>Click on OK to validate or Cancel to cancel.</p> </li> </ul> <p>When validated, the IP address is saved on the main <code>Makefile</code> of the project.</p> <p></p> <p>The IP address and the password are only asked once.</p> <ul> <li> <p>To erase the IP address, just delete the whole line.</p> </li> <li> <p>To edit the IP address, just change the value of the macro <code>SSH_ADDRESS</code>.</p> </li> </ul> <p>Warning</p> <p>The password is not encrypted.</p> <ul> <li> <p>To erase the password, just delete the whole line.</p> </li> <li> <p>To edit the password, just change the value of the macro <code>SSH_PASSWORD</code>.</p> </li> </ul> <p>For more information about the Arduino Y\u00fan installation and over-the-air upload,</p> <ul> <li>Please refer to the Guide to the Arduino Y\u00fan  on the Arduino website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/Arduino/Yun/#upload-the-sketch","title":"Upload the sketch","text":"<p>Once the checks have been successfully performed, proceed as follow:</p> <ul> <li> <p>Connect the Arduino Y\u00fan board to the network through WiFi or Ethernet.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul>","tags":["Legacy"]},{"location":"Boards/Arduino/Yun/#upload-a-website-to-the-arduino-yn","title":"Upload a website to the Arduino Y\u00fan","text":"<p>embedXcode can upload a website automatically to the Arduino Y\u00fan.</p> <p>There are three requirements. First, upload is done through Ethernet or WiFi connection. Second, the project has a folder named <code>www</code> with at least a file named <code>index.html</code>. Third, the Arduino Y\u00fan has a microSD-card inserted on the slot.</p> <p>During upload, the content of the www folder is copied to the microSD-card automatically and made available with a browser at the address <code>/sd/TemperatureWebPanel</code>.</p> <p>Once upload is completed, embedXcode open the browser at the website main page.</p> <p>The <code>TemperatureWebPanel</code> project contains a <code>www</code> folder.</p> <p></p> <p>For more information,</p> <ul> <li>Please refer to the Temperature Web Panel  at the Arduino main website, and to the page Introduction to Web Server  and the project Sensor Values to HTML Page  at the Arduino Scuola website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/","title":"Manage the Arduino nRF52840 boards","text":"<p>The Arduino nRF52840 platform includes the Arduino Primo and Arduino Primo Core boards.</p>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#install","title":"Install","text":"<p>To install the Arduino nRF52840 boards,</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:nrf52\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#develop","title":"Develop","text":"","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#use-the-bluetooth-library","title":"Use the Bluetooth library","text":"<p>To use the Bluetooth library provided with the boards package,</p> <ul> <li>Edit the main <code>M\u0300akefile</code> with</li> </ul> <p><pre><code>APP_LIBS_LIST = BLE\n</code></pre></p> <ul> <li>Include in the main sketch</li> </ul> <p><pre><code>#include \"BLECentralRole.h\"\n#include \"BLEPeripheral.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#use-the-low-power-library","title":"Use the low-power library","text":"<p>To use the Arduino Low-Power library,</p> <ul> <li>Edit the main <code>M\u0300akefile</code> with</li> </ul> <p><pre><code>USER_LIBS_LIST = Arduino_Low_Power\n</code></pre></p> <ul> <li>Include in the main sketch</li> </ul> <p><pre><code>#include \"ArduinoLowPower.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#use-the-real-time-clock-library","title":"Use the real-time clock library","text":"<p>To use the RTC library provided with the boards package,</p> <ul> <li>Edit the main <code>M\u0300akefile</code> with</li> </ul> <p><pre><code>APP_LIBS_LIST = RTCInt\n</code></pre></p> <ul> <li>Include in the main sketch</li> </ul> <p><pre><code>#include \"RTCInt.h\"\n</code></pre></p> <p>To use the RTC Zero library,</p> <ul> <li>Edit the main <code>M\u0300akefile</code> with</li> </ul> <p><pre><code>USER_LIBS_LIST = RTCZero\n</code></pre></p> <ul> <li>Include in the main sketch</li> </ul> <p><pre><code>#include \"RTCZero.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#use-the-nfc-library","title":"Use the NFC library","text":"<p>To use the NFC library provided with the boards package,</p> <ul> <li>Edit the main <code>M\u0300akefile</code> with</li> </ul> <p><pre><code>APP_LIBS_LIST = NFC\n</code></pre></p> <ul> <li>Include in the main sketch</li> </ul> <p><pre><code>#include \"NFC.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#use-the-sensors-library-on-the-primo-core-board","title":"Use the sensors library on the Primo Core board","text":"<p>To use the NFC library provided with the boards package,</p> <ul> <li>Edit the main <code>M\u0300akefile</code> with</li> </ul> <p><pre><code>APP_LIBS_LIST = CoreSensors\n</code></pre></p> <ul> <li>Include in the main sketch</li> </ul> <p><pre><code>#include \"CoreSensors.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#upload","title":"Upload","text":"","tags":["Legacy"]},{"location":"Boards/Arduino/nRF52/#debug","title":"Debug","text":"","tags":["Legacy"]},{"location":"Boards/Espressif/","title":"Manage the Espressif platform","text":"<p> The Espressif platform includes the ESP8266  and ESP32  boards.</p>"},{"location":"Boards/Espressif/#install-python-3","title":"Install Python 3","text":"<p>The ESP32 and ESP8266 require Python 3.</p> <p>To check whether Python 3 is installed on your main computer,</p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Launch one of the following commands.</p> </li> </ul> <p><pre><code>which python3\npython3 --version\n</code></pre></p> <p>If the answers are <code>python3 not found</code> or <code>command not found: python3</code>, Python 3 needs to be installed.</p> <p><pre><code>sudo apt install python3\n</code></pre></p> <p>The ESP8266 utilities call Python 3 from a specific non-standard folder, and may raise an error.</p> <p>To fix this issue,</p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Launch the following commands.</p> </li> </ul> <p><pre><code>which python3\n/usr/local/bin/\n</code></pre></p> <p>The answer may differ from the example above. Note the path, here <code>/usr/local/bin/</code>, for the next step.</p> <p><pre><code>sudo mkdir /usr/local/bin/\nsudo ln -s /usr/bin/python3 /usr/local/bin/python3\n</code></pre></p> <p>It creates a symbolic link for <code>python3</code> with the path expected by the ESP8266 utilities.</p> <p>For more information on the installation process,</p> <ul> <li>Please refer to the Read Me  page on the ESP8266 repository.</li> </ul>"},{"location":"Boards/Espressif/#install-the-usb-drivers","title":"Install the USB drivers","text":"<p>Depending on the board, a 3.3 V FTDI programmer may be required. The ESP8266-based board requires up to 400 mA.</p> <p>For more information,</p> <ul> <li>Please refer to Installing and Building an Arduino Sketch for the $5 ESP8266 Micro-Controller  by Alasdair Allan.</li> </ul> <p>The default uploader provided with the IDE, <code>esptool</code>, supports all the ESP8266-based boards, including the NodeMCU boards, since release 0.4.5.</p> <p>However, the NodeMCU boards requires the installation of specific serial drivers.</p> <ul> <li>Please follow the instructions at the section Install the NodeMCU board .</li> </ul>"},{"location":"Boards/Espressif/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform Package Date Comment ESP32 2.0.7 Valid for other ESP32 and ESP32C3-based boards ESP8266 3.0.1 Valid for other ESP8266-based boards emCode 13.0.4 28 Feb 2023"},{"location":"Boards/Espressif/#visit-the-official-websites","title":"Visit the official websites","text":"ESP32 IDE Arduino CLI or IDE Website http://espressif.com Download https://github.com/espressif/arduino-esp32 Wiki http://esp32.net Forum https://www.esp32.com Forum http://bbs.espressif.com ESP8266 IDE Arduino CLI or IDE Website http://espressif.com Download https://github.com/esp8266/Arduino Wiki http://www.esp8266.com/wiki/doku.php Documentation https://arduino-esp8266.readthedocs.io/en Forum http://www.esp8266.com Forum http://bbs.espressif.com"},{"location":"Boards/Espressif/ESP32/","title":"Manage the Espressif ESP32 boards","text":"","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#install","title":"Install","text":"<p>To install the ESP32 boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install esp32:esp32\n</code></pre></p> <p>For more information on the installation process,</p> <ul> <li>Please refer to the Read Me  page on the ESP32 repository and the ESP32 DevKitC Getting Started Guide  document from the Espressif website.</li> </ul> <p>Additionally, the ESP32 boards supports JTAG debugging with the ESP-Prog programmer-debugger and a specific version of OpenOCD.</p> <ul> <li>Please refer to Setup of OpenOCD  and Configuring ESP32 Target  on the Espressif website.</li> </ul>","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#upload-with-the-esp-prog-programmer-debugger","title":"Upload with the ESP-Prog programmer-debugger","text":"<p>The ESP-Prog programmer-debugger provides JTAG debugging and re-routes the serial console.</p> <p>Proceed as follow:</p> <ul> <li> <p>Ensure OpenOCD for ESP32 has been installed. Otherwise, follow the procedure Install the OpenOCD driver for ESP32 .</p> </li> <li> <p>Follow the table at Configure Other JTAG Interface  and connect power <code>+3.3V</code> and <code>Ground</code>, JTAG <code>TMS</code>, <code>TDI</code>, <code>TCK</code>, <code>TDO</code> and <code>RESET</code>, serial <code>TXD</code> and <code>RXD</code> pins of the board to the corresponding pins of the ESP-Prog programmer-debugger.</p> </li> <li> <p>Connect the external programmer to the USB port.</p> </li> </ul> <p>In case the following message is displayed on the serial console,</p> <p><pre><code>Brownout detector was triggered\n</code></pre></p> <ul> <li>Power the ESP32 board through the <code>+5V</code> pin instead of the <code>+3.3V</code> pin.</li> </ul> <p>The ESP32 board requires up to 400 mA and may exceed what a standard USB port can deliver.</p> <ul> <li>Power the ESP32 board with an external power supply.</li> </ul> <p>For more information on the ESP-Prog,</p> <ul> <li>Please refer to Introduction to the ESP-Prog Board  and Introduction to the ESP32 JTAG Debugging  on the Espressif website.</li> </ul> <p>For more information on debugging the ESP32,</p> <ul> <li>Please refer to the pages MacOS  and Manually unloading the driver   on the Espressif website.</li> </ul>","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#upload-with-wifi","title":"Upload with WiFi","text":"<p>Although the ESP32 boards require no specific procedure for an over-the-air upload, the WiFi network needs to be installed and configured successfully before any upload.</p> <p>Over-the-air upload requires that a sketch based on the ArduinoOTA library has been installed previously and is currently running. Otherwise,</p> <ul> <li>Build and upload the <code>BasicOTA</code> example using the Arduino tools, either Arduino-CLI or  Arduino IDE.</li> </ul> <p>Before uploading, please</p> <ul> <li> <p>Check that the router has discovered the ESP32 board and note the IP address.</p> </li> <li> <p>It is recommended to proceed with a test of the WiFi connection. Either try pinging the board on the Terminal, or uploading a sketch from the Arduino IDE.</p> </li> <li> <p>Ensure the firewall allows port <code>3232</code>.</p> </li> </ul>","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#check-the-running-sketch","title":"Check the running sketch","text":"<p>The over-the-air process is managed by the sketch itself, based on the <code>ArduinoOTA</code> library.</p> <p>If the <code>ArduinoOTA</code> object isn\u2019t running,</p> <ul> <li> <p>Build and upload the <code>BasicOTA</code> example using the Arduino tools, either Arduino-CLI or Arduino IDE.</p> </li> <li> <p>Upload using an USB connection.</p> </li> </ul> <p>Note</p> <p>The sketch requires twice its size.</p>","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#check-the-wifi-connection","title":"Check the WiFi connection","text":"<p>To identify the IP addresses of the ESP32 board,</p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run the following command.</p> </li> </ul> <p><pre><code>arp -a\nesp_a1b2c3 (192.168.240.1) at 12:ef:34:a1:b2:c3 on en0 ifscope [ethernet]\n</code></pre></p> <p>The address <code>192.168.240.1</code> gives access to the board.</p> <ul> <li>Test the board is connected with ping.</li> </ul> <p><pre><code>ping 192.168.240.1\n</code></pre></p> <ul> <li>Ensure the firewall allows port <code>3232</code>.</li> </ul>","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#enter-ip-address","title":"Enter IP address","text":"<p>During the first compilation, emCode looks for the ESP32 board.</p> <p>If the ESP32 board isn\u2019t found on the network, a window asks for the IP address.</p> <ul> <li> <p>Enter the IP address of the ESP32 board.</p> </li> <li> <p>Click on OK to validate or Cancel to cancel.</p> </li> </ul> <p>When validated, the IP address is saved on the main <code>Makefile</code> of the project.</p> <p><pre><code>SSH_ADDRESS = 192.168.240.1\n</code></pre></p> <p>The IP address is only asked once.</p> <ul> <li> <p>To erase the IP address, just delete the whole line.</p> </li> <li> <p>To edit the IP address, just change the value of the macro <code>SSH_ADDRESS</code>.</p> </li> </ul> <p>Password isn\u2019t implemented.</p>","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#upload-wiring-arduino-sketch","title":"Upload Wiring / Arduino sketch","text":"<p>Once the checks have been performed successfully, proceed as follow:</p> <p>Connect the ESP32 board to the network through WiFi.</p> <ul> <li>Launch any of the targets All, Upload or Fast.</li> </ul> <p>A window may ask for allowing incoming network connections.</p> <ul> <li>Click on Allow to proceed.</li> </ul> <p>Note</p> <p>The sketch requires twice its size.</p> <p>For more information about the installation and use of the over-the-air upload,</p> <p>Please refer to Arduino library to upload sketch over network to supported Arduino board  at the ArduinoOTA repository.</p> <p>Another procedure turns the ESP32 board into a web server.</p> <ul> <li>Please refer to the procedure Over the Air through Web browser .</li> </ul>","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#debug","title":"Debug","text":"","tags":["Active"]},{"location":"Boards/Espressif/ESP32/#connect-the-esp-prog-to-the-esp32-board","title":"Connect the ESP-Prog to the ESP32 board","text":"<p>The ESP-Prog provides a PROG 2x3 2.54 mm 0.1\u201d connector and a JTAG 2x5 2.54 mm 0.1\u201d connector.</p> <ul> <li> <p>Ensure OpenOCD for ESP32 has been installed. Otherwise, follow the procedure Install the OpenOCD driver for ESP32 .</p> </li> <li> <p>Follow the table at Configure Other JTAG Interface  and connect power <code>+3.3V</code> and <code>Ground</code>, JTAG <code>TMS</code>, <code>TDI</code>, <code>TCK</code>, <code>TDO</code> and <code>RESET</code>, serial <code>TXD</code> and <code>RXD</code> pins of the board to the corresponding pins of the ESP-Prog programmer-debugger.</p> </li> <li> <p>Open a Terminal and launch the command</p> </li> </ul> <p><pre><code>sudo kextunload -b com.FTDI.driver.FTDIUSBSerialDriver\n</code></pre></p> <p>This command prevents macOS from enumerating all the ports of the ESP-Prog programmer-debugger as serial ports.</p> <ul> <li>Connect the external programmer to the USB port.</li> </ul> <p>In case the following message is displayed on the serial console,</p> <p><pre><code>Brownout detector was triggered\n</code></pre></p> <ul> <li>Power the ESP32 board through the <code>+5V</code> pin instead of the <code>+3.3V</code> pin.</li> </ul> <p>The ESP32 board requires up to 400 mA and may exceed what a standard USB port can deliver.</p> <ul> <li>Power the ESP32 board with an external power supply.</li> </ul> <p>At the end of the session,</p> <ul> <li>Open a Terminal and launch the command</li> </ul> <p><pre><code>sudo kextload -b com.FTDI.driver.FTDIUSBSerialDriver\n</code></pre></p> <p>This command allows macOS to automatically enumerate all the ports as serial ports again.</p> <p>To check whether the FTDI driver is loaded,</p> <ul> <li>Open a Terminal and launch the command</li> </ul> <p><pre><code>kextstat | grep FTDI\n</code></pre></p> <p>For more information on the ESP-Prog,</p> <ul> <li>Please refer to Introduction to the ESP-Prog Board  and Introduction to the ESP32 JTAG Debugging  on the Espressif website.</li> </ul> <p>For more information on debugging the ESP32,</p> <ul> <li>Please refer to the pages MacOS  and Manually unloading the driver   on the Espressif website.</li> </ul>","tags":["Active"]},{"location":"Boards/Espressif/ESP8266/","title":"Manage the Espressif ESP8266 boards","text":"","tags":["Legacy"]},{"location":"Boards/Espressif/ESP8266/#install","title":"Install","text":"<p>To install the Espressif ESP8266 boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://arduino.esp8266.com/stable/package_esp8266com_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install esp8266:esp8266\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to Installing with Boards Manager  page on the ESP8266 repository.</li> </ul>","tags":["Legacy"]},{"location":"Boards/Espressif/ESP8266/#develop","title":"Develop","text":"","tags":["Legacy"]},{"location":"Boards/Espressif/ESP8266/#upload","title":"Upload","text":"","tags":["Legacy"]},{"location":"Boards/Espressif/ESP8266/#debug","title":"Debug","text":"","tags":["Legacy"]},{"location":"Boards/LaunchPad/","title":"Index","text":"<p>http://s3.amazonaws.com/energiaUS/packages/package_cc13x2_index.json http://s3.amazonaws.com/energiaUS/packages/package_msp432p_index.json http://s3.amazonaws.com/energiaUS/packages/package_msp430_elf_GCC_index.json</p> <p>10-2020-q4-major</p> <p>https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads/product-release</p> <p>gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2</p> <p>To be placed under /home/reivilo/Projets/emCode/_energia15/packages/energia/tools/arm-none-eabi-gcc</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-the-launchpad-plaform","title":"Install the LaunchPad plaform","text":"<p> The official IDE for the MSP430, MSP432, CC13xx, CC32xx and Tiva C LaunchPad boards is Energia. Since release 18, Energia is based on the Arduino 1.6.5 IDE, and features the Boards Manager and the Libraries Manager.</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-the-energia-ide","title":"Install the Energia IDE","text":"<p>To install the LaunchPad boards,</p> <ul> <li>Download and install Energia release 1.6.10E18 under the <code>/Applications</code> folder. Energia is the official IDE for the LaunchPad platform.</li> </ul> <p></p> <ul> <li> <p>Launch it.</p> </li> <li> <p>Define the path of the sketchbook folder in the menu Energia &gt; Preferences &gt; Sketchbook location.</p> </li> </ul> <p></p> <ul> <li>Avoid spaces in the name and path of the sketchbook folder.</li> </ul> <p>In this example, the sketchbook folder is <code>/User/ReiVilo/Documents/Projects/Energia</code>.</p> <p>The Energia 1.6.10E18 IDE provides two procedures to manage additional boards and libraries.</p> <ul> <li> <p>To add a board, follow the procedure Install additional boards on Arduino .</p> </li> <li> <p>To add a library, follow the procedure Install additional libraries on Arduino .</p> </li> </ul> <p>For more information on installing Energia,</p> <ul> <li>Please refer to the Energia Quick Start Guide .</li> </ul> <p>Some LaunchPad boards may require the installation of additional tools or the update of the firmware.</p> <p>Energia manages two architectures: 16-bit MSP430 and 32-bit ARM for CC3200, MSP432 and Tiva C.</p> <p>Energia comes with only one architecture installed, the 16-bit MSP430G2. All the 32-bit architectures for the MSP432, CC13xx, CC32xx and Tiva C require a specific procedure detailed at Install the 32-bit LaunchPad boards .</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-the-device-driver","title":"Install the device driver","text":"<p>To install the device driver for the LaunchPad boards,</p> <ul> <li> <p>Download the <code>udev</code> rules for Linux at TI udev rules ;</p> </li> <li> <p>On the folder, open a Terminal and launch</p> </li> </ul> <p><pre><code>sudo mv /71-ti-permissions.rules /etc/udev/rules.d/\n</code></pre></p> <ul> <li>Relaunch the device service with</li> </ul> <p><pre><code>sudo service udev restart\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-previous-msp430-package-for-more-compact-code","title":"Install previous MSP430 package for more compact code","text":"<p>The code built with the MSP430 board package from Energia 0101E12 is more compact than the code obtained with Energia 1.6.10E18.</p> <p>This is especially important for the MSP430G2553 MCU, which includes 512 bytes of RAM only. The special board LaunchPad MSP430G2553 (compact) calls the MSP430 board package from Energia 12.</p> <p>To use it,</p> <ul> <li> <p>Follow the procedure Migrate Previous MSP430 Board Package to Energia 18 .</p> </li> <li> <p>Select the <code>LaunchPad MSP430G2553 (compact)</code> board instead of the <code>LaunchPad MSP430G2553</code> board.</p> </li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-release-731-of-the-gcc-tool-chain-for-msp430","title":"Install release 7.3.1 of the GCC tool-chain for MSP430","text":"<p>Release 7.3.1 of the GCC tool-chain for MSP430 allows access to the full range of FRAM.</p> <p>Warning</p> <p>Support for MSP GCC 7.3.1 is experimental.</p> <p></p> <p>Support for GCC 7.3.1 is turned off by default. To make it active,</p> <ul> <li> <p>Open the <code>About.mk</code> file as described in section Check and update the boards reference list .</p> </li> <li> <p>Uncomment the line containing <code>ENERGIA_GCC_MSP_LARGE_RELEASE</code>.</p> </li> </ul> <p><pre><code>ENERGIA_GCC_MSP_LARGE_RELEASE   = 7.3.1.24\n</code></pre></p> <p>The boards with large memory model are: MSP430FR5969 (64 kB), MSP430FR5994 (256 kB), MSP430FR6989 (128 kB), MSP430F5529 (128 kB).</p> <p>For more information on the installation of release 7.3.1 of the GCC tool-chain for MSP430,</p> <ul> <li>Please refer to the Read Me  file on the New Compiler  branch of the MSP430 core repository.</li> </ul> <p>The MSP430 GCC compiler is owned by Texas Instruments and maintained by Mitto Systems since 2018.</p> <p>For a description of the GCC tool-chain for MSP430,</p> <ul> <li>Please refer to the pages GCC - Open Source Compiler for MSP Microcontrollers  on the Texas Instruments website and Texas Instruments MSP430-GCC  on the Mitto Systems website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-the-32-bit-launchpad-boards","title":"Install the 32-bit LaunchPad boards","text":"<p>The standard installation doesn\u2019t include all the boards: the MSP432, CC3200 and Tiva C need to be installed manually.</p> <ul> <li> <p>Follow the procedure Install additional boards on Arduino .</p> </li> <li> <p>Call the Boards Manager and check the MSP432, CC1310, CC3200 and Tiva C boards are listed.</p> </li> </ul> <p></p> <ul> <li>Select the board and click on Install.</li> </ul> <p>For more information on the installation of the additional boards on the Energia IDE,</p> <ul> <li>Please refer to the Installing additional Arduino Cores  page on the Arduino website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-the-cc3200-launchpad","title":"Install the CC3200 LaunchPad","text":"<p>To install the CC3200 LaunchPad,</p> <ul> <li>Please follow the instructions provided at Setup Energia on Linux .</li> </ul> <p>Warning</p> <p>On the LaunchPad CC3200, analog inputs are limited to 1,5 V. Higher voltages may damage the MCU.</p> <p>The LaunchPad CC3200 supports two frameworks: Energia and Energia MT based on TI-RTOS.</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-the-cc3220-launchpad","title":"Install the CC3220 LaunchPad","text":"<p>To install the CC3220 LaunchPad,</p> <ul> <li>Please follow the instructions provided at Setup Energia on Linux .</li> </ul> <p>Warning</p> <p>On the LaunchPad CC3220, analog inputs are limited to 1,4 V. Higher voltages may damage the MCU.</p> <p>The LaunchPad CC3220 supports the Energia MT framework based on TI-RTOS.</p> <p>The LaunchPad CC3220 needs to be initialised in developer mode. Sketches are uploaded into RAM and are lost if the power is disconnected.</p> <ul> <li>Please refer to Upload to the CC3220 LaunchPad .</li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-the-msp432-launchpad","title":"Install the MSP432 LaunchPad","text":"<p>To install the MSP432 LaunchPad,</p> <ul> <li>Please follow the instructions provided at Installing the LaunchPad drivers .</li> </ul> <p>The MSP432P401R Red LaunchPad board replaces the pre-series in black.</p> <p>However, the pre-series LaunchPad board in black and the corresponding boards package are obsolete and no longer supported by emCode.</p> <p>The LaunchPad MSP432 only supports the Energia MT framework, based on TI-RTOS.</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-debug-tools-for-the-launchpad-boards","title":"Install debug tools for the LaunchPad boards","text":"<p>Debugging has been tested successfully on the Experimenter Board MSP430FR5739 and most of the LaunchPad boards, including MSP430G2, MSP430F5529, LM4F120 Stellaris now TM4C123 Tiva C, CC3200 WiFi, CC3220 WiFi, MSP432, CC13x0, CC13x2.</p> <p>The LaunchPad MSP430G2 and MSP430F5529 and the Experimenter Board MSP430FR5739 require no additional tool as the debugger, mspdebug, is already provided by the Energia IDE.</p> <p>The LaunchPad LM4F120 Stellaris now TM4C123 Tiva C, the LaunchPad TM4C129 Ethernet require the installation of an additional tool, namely OpenOCD.</p> <p>Most of the boards from the SimpleLink portfolio, including the MSP432, CC32xx, CC26xx and CC13xx LaunchPad boards, feature the XDS110 programmer-debugger. Although the default programmer is DSLite, the XDS110 accepts the open-source OpenOCD utility. OpenOCD brings additional features, like selecting one board among multiple connected, as well as debugging.</p> <p>OpenOCD can be installed with Homebrew or built from source code.</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-openocd-with-homebrew","title":"Install OpenOCD with Homebrew","text":"<p>The installation of OpenOCD can be done using Homebrew or by building it from the source code.</p> <p>To install OpenOCD with Homebrew,</p> <p></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Launch the following command to install Homebrew.</p> </li> </ul> <p><pre><code>/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n</code></pre></p> <ul> <li>Launch the following command to install OpenOCD and its dependencies.</li> </ul> <p><pre><code>brew install openocd\n</code></pre></p> <p>Some LaunchPad boards require a specific installation of OpenOCD. This is done by specifying options during installation.</p> <p>For example, the CC3200 LaunchPad requires the <code>--enable-ft2232_libftdi --enable-stlink</code> options with OpenOCD version 0.9.0, but no longer with OpenOCD version 0.10.0.</p> Homebrew release prior to 2.0Homebrew release 2.0 and later <p>With Homebrew release prior to 2.0, the options were listed on the installation command line, tested in this example on OpenOCD version 0.9.0:</p> <p><pre><code>brew install openocd --enable-ft2232_libftdi --enable-stlink\n</code></pre></p> <p>Those options can be combined with those for other boards.</p> <p>Since release 2.0, Homebrew no longer accepts the options listed on the installation command line. The new procedure relies on the <code>--edit</code> option, tested on OpenOCD version 0.10.0.</p> <ul> <li>On a Terminal window, launch to open the default editor.</li> </ul> <p><pre><code>brew edit openocd\n</code></pre></p> <ul> <li>To use a specific editor, define the <code>HOMEBREW_EDITOR</code> variable before.</li> </ul> <p><pre><code>% export HOMEBREW_EDITOR=/usr/local/bin/nano\n% brew edit openocd\n</code></pre></p> <ul> <li>Add the options, then save and close the editor.</li> </ul> <p></p> <ul> <li>Now, launch the installation of OpenOCD:</li> </ul> <p><pre><code>% brew install openocd\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#build-openocd-from-source-code","title":"Build OpenOCD from source code","text":"<p>Alternatively, to build OpenOCD from source code,</p> <ul> <li> <p>Download SimpleLink-OpenOCD  from Texas Instruments website.</p> </li> <li> <p>Follow the procedure included in the Release notes  to build and install it.</p> </li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#find-more-information","title":"Find more information","text":"<p>For more information on the use of Homebrew,</p> <ul> <li>Please refer to the Homebrew Documentation .</li> </ul> <p>For more information on the configuration of OpenOCD,</p> <ul> <li>Please refer to the OpenOCD documentation  and to the websites of the respective manufacturers of the boards.</li> </ul> <p>For more information on the installation of OpenOCD for the LaunchPad CC3200,</p> <ul> <li>Please refer to TI\u2019s SimpleLink CC3200-LaunchXL with Linux First Steps .</li> </ul> <p>For more information on how to build and install OpenOCD from source code,</p> <ul> <li> <p>Please refer to Texas Instruments Release Notes .</p> </li> <li> <p>Please refer to the sections Building OpenOCD  and Building OpenOCD for OSX  on the OpenOCD website.</p> </li> </ul> <p> All the LaunchPad boards feature a built-in hardware debugger.</p> <ul> <li> <p>Learn more on how to use the debugger at the chapter Debug the project .</p> </li> <li> <p>Please refer to the section Set the folder for standard IDEs .</p> </li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-additional-boards-on-energia","title":"Install additional boards on Energia","text":"<p> Starting release 1.6.10E18, the Energia IDE includes a Boards Manager for downloading and installing additional boards. It relies on a list of URLs set in the Preferences pane.</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-additional-boards","title":"Install additional boards","text":"<ul> <li>Call the menu Tools &gt; Board &gt; Boards Manager\u2026</li> </ul> <p>A new window lists all the boards available, already installed or ready for installation, based on a set of URLs.</p> <p></p> <ul> <li>Select the board and click on Install.</li> </ul> <p></p> <ul> <li>Click OK.</li> </ul> <p>If the board isn\u2019t listed, the URL needs to be added manually.</p> <p>For more information on the installation of the additional boards on the Energia IDE,</p> <ul> <li>Please refer to the Installing additional Arduino Cores  page on the Arduino website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#add-urls-for-new-boards","title":"Add URLs for new boards","text":"<p>The Boards Manager lists the boards based on a set of URLs. To add a new board, the relevant URL should be added. The URL corresponds to a JSON file.</p> <p><pre><code>https://www.adafruit.com/package_adafruit_index.json\n</code></pre></p> <ul> <li>Call the menu Energia &gt; Preferences.</li> </ul> <p>This is the preference window, with a list of URLs at Additional Boards Manager URLs.</p> <p></p> <ul> <li>Click on the button at the right of Additional Boards Manager URLs.</li> </ul> <p></p> <ul> <li> <p>Paste the URL with the JSON file. There should be one URL per line.</p> </li> <li> <p>Click OK.</p> </li> <li> <p>Call the menu Tools &gt; Board &gt; Boards Manager\u2026</p> </li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#update-the-boards","title":"Update the boards","text":"<p>Check and update the boards when new releases are available.</p> <p>Before updating the board, make sure the new release is supported by emCode.</p> <ul> <li> <p>Call the menu Tools &gt; Board &gt; Boards Manager\u2026</p> </li> <li> <p>Set the Type to Upgradable.</p> </li> </ul> <p></p> <p>The window displays all the boards to be updated.</p> <p></p> <ul> <li>Select the board and click on Update.</li> </ul> <p></p> <ul> <li>Once all boards are updated, click on Close.</li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#check-supported-boards","title":"Check supported boards","text":"<p>This procedure has been tested successfully with the following boards:</p> <ul> <li> Energia MSP432, CC13xx, CC32xx and Tiva C.</li> </ul> <p></p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-additional-libraries-on-energia","title":"Install additional libraries on Energia","text":"<p> Starting release 1.6.10E18, the Energia IDE includes a Libraries Manager for downloading and installing additional libraries. It relies on a list of URLs managed centrally by Energia.</p>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#install-additional-libraries","title":"Install additional libraries","text":"<ul> <li>Call the menu Sketch &gt; Include Library &gt; Manage Libraries\u2026</li> </ul> <p>A new window lists all the libraries available, already installed or ready for installation.</p> <p></p> <ul> <li>Select the library and click on Install.</li> </ul> <p></p> <ul> <li>Click OK.</li> </ul> <p>For more information on the installation of the additional boards on the Energia IDE,</p> <ul> <li>Please refer to the Installing Additional Arduino Libraries  page on the Arduino website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/LaunchPad/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment LaunchPad Energia 1.8.10E23 17 Dec 2019 Actually released 02 Feb 2020 CC13x0 EMT 4.9.1 For CC1310- and CC1350-based boards CC13x2 EMT 5.31.0-beta3 For CC1312- and CC1352-based boards CC3200 1.0.3 CC3220 EMT 5.6.2 For CC3220S and CC3220SF LaunchPad boards MSP430 1.0.7 For MSP430G2, MPS430F and MSP430FR LaunchPad boards MSP430 ELF 2.1.0 For MPS430FR LaunchPad boards MSP432E EMT 5.19.0 For MSP432E401Y and TM4C1294XL LaunchPad boards MSP432P EMT 5.29.0-beta1 For red MSP432P4111 LaunchPad board MSP432R EMT 5.29.0 For red MSP432P401R LaunchPad board Tiva C 1.0.4 For LM4F- and TM4C-based LaunchPad boards emCode","tags":["Legacy"]},{"location":"Boards/LaunchPad/#visit-the-official-websites","title":"Visit the official websites","text":"LaunchPad IDE Energia and Energia MT Website http://www.ti.com/ww/en/launchpad Download http://energia.nu/download Wiki http://energia.nu Blog http://energia.nu/blog Forum http://forum.43oh.com/forum/28-energia/ Multi-tasking http://energia.nu/guide/multitasking Galaxia library https://github.com/rei-vilo/GalaxiaLibrary Documentation http://embeddedcomputing.weebly.com/exploring-rtos-with-galaxia.html Forum http://forum.43oh.com/topic/8620-energia-library-rtos-libraries-for-msp432-on-energia-mt","tags":["Legacy"]},{"location":"Boards/LaunchPad/CC13x0/","title":"Manage the LaunchPad CC13x0 boards","text":"<p>The LaunchPad CC13x0 platform includes the LaunchPad CC1310 with sub-1 GHz only radio and the LaunchPad CC1350 with sub-1 GHz and 2.4 GHz dual radio.</p> <p>The LaunchPad CC13x0 platform runs on Energia MT with multi-tasking capabilities.</p> <ul> <li>For more information on, please refer to Develop multi-tasks projects on Energia MT .</li> </ul>"},{"location":"Boards/LaunchPad/CC13x0/#install","title":"Install","text":""},{"location":"Boards/LaunchPad/CC13x0/#develop","title":"Develop","text":""},{"location":"Boards/LaunchPad/CC13x0/#upload","title":"Upload","text":""},{"location":"Boards/LaunchPad/CC13x0/#debug","title":"Debug","text":""},{"location":"Boards/LaunchPad/CC13x2/","title":"Manage the LaunchPad CC13x2 boards","text":"<p>The LaunchPad CC13x2 platform includes the LaunchPad CC1312 with sub-1 GHz only radio and the LaunchPad CC1352 with sub-1 GHz and 2.4 GHz dual radio.</p> <p>The LaunchPad CC13x2 platform runs on Energia MT with multi-tasking capabilities.</p> <ul> <li>For more information on, please refer to Develop multi-tasks projects on Energia MT .</li> </ul>"},{"location":"Boards/LaunchPad/CC13x2/#install","title":"Install","text":""},{"location":"Boards/LaunchPad/CC13x2/#develop","title":"Develop","text":""},{"location":"Boards/LaunchPad/CC13x2/#upload","title":"Upload","text":""},{"location":"Boards/LaunchPad/CC13x2/#debug","title":"Debug","text":""},{"location":"Boards/LaunchPad/CC3200/","title":"Manage the LaunchPad CC3200 boards","text":"<p>The LaunchPad CC3200 platform includes three variants: LaunchPad CC3200, LaunchPad CC3200-S and LaunchPad CC3200-SF.</p>"},{"location":"Boards/LaunchPad/CC3200/#install","title":"Install","text":""},{"location":"Boards/LaunchPad/CC3200/#develop","title":"Develop","text":""},{"location":"Boards/LaunchPad/CC3200/#upload","title":"Upload","text":""},{"location":"Boards/LaunchPad/CC3200/#debug","title":"Debug","text":"<p> The LaunchPad CC3200 WiFi requires a specific hardware configuration.</p> <ul> <li> <p>Unplug the LaunchPad CC3200 WiFi board.</p> </li> <li> <p>Remove the wire from <code>JTAG J8</code> (emulator side) to <code>SOP 2</code> (CC3200) side.</p> </li> <li> <p>Place the <code>TCK J8</code> jumper.</p> </li> <li> <p>Place the <code>SOP 2</code> jumper.</p> </li> </ul> <p> Debugging requires <code>TCK</code> and <code>SOP 2</code> jumpers placed on</p> <ul> <li>Plug the LaunchPad CC3200 WiFi board.</li> </ul> <p>The project is uploaded into SRAM and is lost in case the power is disconnected. For more information,</p> <ul> <li>Please refer to Upload to LaunchPad CC3200 WiFi.</li> </ul>"},{"location":"Boards/LaunchPad/CC3220/","title":"Manage the LaunchPad CC3220 boards","text":"<p>The LaunchPad CC3220 platform includes three variants: LaunchPad CC3220, LaunchPad CC3220-S and LaunchPad CC3220-SF.</p> <p>The LaunchPad CC3220 platform runs on Energia MT with multi-tasking capabilities.</p> <ul> <li>For more information on, please refer to Develop multi-tasks projects on Energia MT .</li> </ul>"},{"location":"Boards/LaunchPad/CC3220/#install","title":"Install","text":""},{"location":"Boards/LaunchPad/CC3220/#develop","title":"Develop","text":""},{"location":"Boards/LaunchPad/CC3220/#upload","title":"Upload","text":""},{"location":"Boards/LaunchPad/CC3220/#debug","title":"Debug","text":""},{"location":"Boards/LaunchPad/MSP430/","title":"Manage the LaunchPad MSP430 boards","text":"<p>The LaunchPad MSP430 platform includes three variants: LaunchPad CC3200, LaunchPad CC3200-S and LaunchPad CC3200-SF.</p>"},{"location":"Boards/LaunchPad/MSP430/#install","title":"Install","text":""},{"location":"Boards/LaunchPad/MSP430/#develop","title":"Develop","text":""},{"location":"Boards/LaunchPad/MSP430/#select-the-tool-chain-for-the-msp430","title":"Select the tool-chain for the MSP430","text":"<p>By default, the boards with small memory use the tool-chain <code>msp430-gcc 4.6.6</code>, while the other boards rely on the tool-chain <code>msp430-elf-gcc 9.2.0.50</code>.</p> <p>To force and use the tool-chain <code>msp430-elf-gcc 9.2.0.50</code> for the boards with small memory,</p> <ul> <li> <p>Open the main <code>Makefile</code>.</p> </li> <li> <p>Add the line</p> </li> </ul> <p><pre><code># Boards with small memory use msp430-gcc/4.6.6.\n# Force msp430-elf-gcc/9.2.0.50 with\n# FORCE_GCC_MSP430ELF = 1\nFORCE_GCC_MSP430ELF = 1\n</code></pre></p> <ul> <li>Launch a new compilation with targets Build or All.</li> </ul>"},{"location":"Boards/LaunchPad/MSP430/#upload","title":"Upload","text":""},{"location":"Boards/LaunchPad/MSP430/#debug","title":"Debug","text":""},{"location":"Boards/LaunchPad/MSP432/","title":"Manage the LaunchPad MSP432 boards","text":"<p>The LaunchPad MSP432 platform includes three variants: MSP432P401R, MSP432P4111 with a segemented LCD display and LaunchPad MSP432E401Y with Ethernet connectivity.</p> <p>The LaunchPad MSP432 platform runs on Energia MT with multi-tasking capabilities.</p> <ul> <li>For more information on, please refer to Develop multi-tasks projects on Energia MT .</li> </ul>"},{"location":"Boards/LaunchPad/MSP432/#install","title":"Install","text":""},{"location":"Boards/LaunchPad/MSP432/#develop","title":"Develop","text":""},{"location":"Boards/LaunchPad/MSP432/#upload","title":"Upload","text":""},{"location":"Boards/LaunchPad/MSP432/#debug","title":"Debug","text":""},{"location":"Boards/LaunchPad/MultiTask/","title":"Develop multi-tasks projects on Energia MT","text":"<p>This section requires a compatible board running on Energia MT.</p> <p>Because the underlying framework of Energia MT or Energia Multi-Tasking is TI-RTOS, a real time operating system from Texas Instruments, projects with multiple tasks are possible.</p> <p></p> <p>As a consequence, the project has multiple <code>.ino</code> files. This is the only case a project can have multiple <code>.ino</code> files.</p> <p>By default, the project has one task on the default <code>.ino</code> file, with a <code>setup()</code> function and a <code>loop()</code> function.</p> <p>Each new task brings its own  <code>setup()</code>  and <code>loop()</code> functions with the name of the task.</p> <p>For an introduction to RTOS,</p> <ul> <li>Please refer to SYS/BIOS (TI-RTOS Kernel) v6.41 User\u2019s Guide  and TI-RTOS 2.12 User\u2019s Guide .</li> </ul>"},{"location":"Boards/LaunchPad/MultiTask/#add-a-task","title":"Add a task","text":"<p>Adding a new task can be done in two ways.</p>"},{"location":"Boards/LaunchPad/MultiTask/#create-a-new-task-on-a-specific-sketch","title":"Create a new task on a specific sketch","text":"<p>The recommended solution creates a specific <code>.ino</code> sketch file for the new task.</p> <p>To create a specific <code>.ino</code> file for the new task.</p> <ul> <li> <p>Call the menu File &gt; New &gt; New File\u2026 or press Cmd+N.</p> </li> <li> <p>Select the macOS option.</p> </li> </ul> <p></p> <ul> <li> <p>Scroll down to the embedXcode or embedXcode+ group.</p> </li> <li> <p>Select Task Energia MT.</p> </li> </ul> <p></p> <p>The <code>Task Energia MT</code> files defines a new task with the  <code>setup()</code> and <code>loop()</code> functions.</p> <p></p> <ul> <li>Give a name to the task, <code>TaskCode</code> is proposed by default.</li> </ul> <p>The new task contains two functions, <code>setup_TaskCode()</code> and <code>loop_TaskCode()</code>, based on the name of the task <code>TaskCode.ino</code>.</p> <p><pre><code>// Setup\nvoid setup_TaskCode()\n{\n;\n}\n\n// Loop\nvoid loop_TaskCode()\n{\n;\n}\n</code></pre></p>"},{"location":"Boards/LaunchPad/MultiTask/#add-functions-to-main-sketch","title":"Add functions to main sketch","text":"<p>An alternative solution simply adds the functions of the new task to the default main <code>.ino</code> sketch file.</p> <p>To add a task to the default main <code>.ino</code> file, for example <code>task2</code>,</p> <ul> <li>Define two new functions <code>setupTask2()</code> and <code>loopTask2()</code> on the existing main sketch.</li> </ul> <p><pre><code>void setupTask2()\n{\n\n}\n\nvoid loopTask2()\n{\n\n}\n</code></pre></p>"},{"location":"Boards/LaunchPad/MultiTask/#check-new-task-functions-names","title":"Check new task functions names","text":"<p>Here are the requirements for naming the <code>setup()</code> and <code>loop()</code> functions of the new task.</p> <ul> <li> <p>Give a different name to each task.</p> </li> <li> <p>Define a <code>setup()</code> function and a <code>loop()</code> function for each task.</p> </li> <li> <p>Include <code>setup</code> in the name of the <code>setup()</code> function of a task.</p> </li> </ul> <p><pre><code>void TaskCode_setup()\nvoid setup_TaskCode()\nvoid setupTaskCode()\n</code></pre></p> <ul> <li>Include <code>loop</code> in the name of the <code>loop()</code> function of a task.</li> </ul> <p><pre><code>void TaskCode_loop()\nvoid loopTaskCode()\nvoid loop_TaskCode()\n</code></pre></p> <p>Warning</p> <p>The latest release of Energia requires <code>setup</code> and <code>loop</code> to be mentioned as prefixes in the names of the functions, when embedXcode allows any combinations.</p> <ul> <li>Check the <code>setup()</code> and <code>loop()</code> functions share the same name inside the task, here <code>TaskCode</code>.</li> </ul> <p><pre><code>void setup_TaskCode()\nvoid loop_TaskCode()\n</code></pre></p> <ul> <li>Check each <code>setup()</code> function and each <code>loop()</code> function has a unique name across the whole project.</li> </ul> <p>For more information about Energia MT,</p> <ul> <li>Please refer to the Multi-tasking page  at the Energia website.</li> </ul> <p>For more information on TI-RTOS,</p> <ul> <li>Please refer to the TI-RTOS Wiki .</li> </ul>"},{"location":"Boards/LaunchPad/MultiTask/#check-the-tasks-file","title":"Check the tasks file","text":"<p>During compilation and linking, embedXcode parses the different <code>.ino</code> files, selects the <code>setup()</code> and <code>loop()</code> functions, and generates the <code>rtosTasks.h</code> file automatically.</p> <p>This file describes the different tasks. It includes calls to each <code>.ino</code> sketch files, except the default main <code>.ino</code> sketch file of the project, declares the tasks with their <code>setup()</code> and <code>loop()</code> functions, and lists the names of the tasks.</p> <p>There is no <code>#include</code> for the default <code>embed1.ino</code> file of the <code>embed1</code> project, because the <code>main.cpp</code> file already mentions it. If one function is missing, an error is raised.</p> <p><pre><code>==== Check project embed1 ====\nERROR   Different number of setup() and loop()\nERROR   TaskCode.ino: no setup() function\n</code></pre></p> <p>It is a good idea to have a look at it to check that all the tasks are correctly mentioned. Do not edit this file as it is generated automatically at each compilation.</p> <p>For more information about Energia MT,</p> <ul> <li>Please refer to the Multi-tasking page  at the Energia website.</li> </ul> <p>Here is an example of a populated <code>rtosTasks.h</code> file.</p> <p><pre><code>//\n// rtosTasks.h\n// Header file\n// ----------------------------------\n//\n// List of tasks for project embed-rtos\n//\n// File generated by embedXcode_check\n// Sat Sep 30 11:11:47 CEST 2017\n//\n// ----------------------------------\n// DO NOT EDIT THIS FILE.\n// ----------------------------------\n//\n\n// List of sketches to #include\n//\n#include \"TaskCode.ino\";\n// embed_rtos.ino already #included in main.cpp\n\n// List of setup() and loop() functions\n//\nextern void setup_TaskCode();\nextern void loop_TaskCode();\nextern void setup();\nextern void loop();\n\n// Number of tasks\n//\n#define NUM_SKETCHES 2\n\n// List of pointers to setup() and loop()\n//\nvoid (*func_ptr[NUM_SKETCHES][2])(void) = {\n{ setup_TaskCode, loop_TaskCode },\n{ setup, loop },\n};\n\n// Names of the tasks\n//\nconst char *taskNames[] = {\n\"loop_TaskCode\",\n\"loop\",\n};\n</code></pre></p>"},{"location":"Boards/LaunchPad/MultiTask/#add-global-variables-and-main-setup-function","title":"Add global variables and main setup function","text":"<p>An optional file <code>rtosGlobals.h</code> contains global variables and a optional main setup function <code>setupRtos()</code>.</p> <p>This main setup function <code>setupRtos()</code> runs before all other <code>setup()</code> functions of the tasks.</p> <p><pre><code>// Add optional setupRTOS function\nvoid setupRtos()\n{\n;\n}\n</code></pre></p> <p>This is especially useful for initialising shared resources like Serial, I\u00b2C and SPI ports, and shared RTOS elements like clock, mailbox, semaphore.</p> <p>All tasks in the <code>.ino</code> files need to include <code>rtosGlobals.h</code>.</p> <p><pre><code>// Include application, user and local libraries\n#include \"rtosGlobals.h\"\n</code></pre></p> <p>Warning</p> <p>This feature is specific to embedXcode and is not supported by the Energia IDE.</p>"},{"location":"Boards/Microsoft/","title":"Manage the Microsoft platform","text":"<p> The Microsoft platform includes the AZ3166 IoT DevKit board , with a Cortex-M4 and a WiFi radio and a large assortment of sensors.</p>"},{"location":"Boards/Microsoft/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform Package Date Comment AZ3166 2.0.0 For AZ3166 IoT DevKit board emCode"},{"location":"Boards/Microsoft/#visit-the-official-websites","title":"Visit the official websites","text":"Microsoft IDE Arduino CLI or IDE Website https://microsoft.github.io/azure-iot-developer-kit Download https://microsoft.github.io/azure-iot-developer-kit/docs/installation/ Wiki https://microsoft.github.io/azure-iot-developer-kit/docs/get-started/"},{"location":"Boards/Microsoft/AZ3166/","title":"Manage the Microsoft AZ3166 IoT DevKit board","text":"","tags":["Legacy"]},{"location":"Boards/Microsoft/AZ3166/#install","title":"Install","text":"<p>To install the Microsoft IoT DevKit board,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://raw.githubusercontent.com/VSChina/azureiotdevkit_tools/master/package_azureboard_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window;</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install AZ3166:stm32f4\n</code></pre></p> <p>For more information on the installation of the Arduino IDE,</p> <ul> <li> <p>Please refer to the Get Started  page on the Microsoft website.</p> </li> <li> <p>Download and install the Azure command line tool from the macOS Azure Manual Installation  page on the Microsoft website.</p> </li> </ul> <p>For more information on the Azure installation,</p> <ul> <li>Please refer to the Install Azure CLI 2.0  page on the Microsoft website.</li> </ul> <p>For more information on the board,</p> <ul> <li>Please refer to the MXChip IoT Developer Kit  page on the Microsoft website.</li> </ul>","tags":["Legacy"]},{"location":"Boards/Microsoft/AZ3166/#develop","title":"Develop","text":"<p>The boards package includes all the libraries for WiFi, sensors and screen.</p> <p>For more informations on the libraries,</p> <ul> <li>Please refer to the API reference .</li> </ul>","tags":["Legacy"]},{"location":"Boards/Microsoft/AZ3166/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>APP_LIB_LIST = WiFi\n</code></pre></p> <ul> <li>Add to the main sketch</li> </ul> <p><pre><code>#include \"AZ3166WiFi.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Microsoft/AZ3166/#use-the-libraries-for-the-sensors","title":"Use the libraries for the sensors","text":"<p>The sensors include the HTS221 for humidity and temperature, the LPS22HB for pressure, the LIS2MDL for magnetometer and the LSM6DSL for accelerometer and gyroscope.</p> <ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>APP_LIB_LIST = Sensors\n</code></pre></p> <ul> <li>Add to the main sketch</li> </ul> <p><pre><code>#include \"Sensors.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Microsoft/AZ3166/#use-the-libraries-for-the-display","title":"Use the libraries for the display","text":"<p>There is no need to edit the main <code>Makefile</code>.</p> <ul> <li>Add to the main sketch</li> </ul> <p><pre><code>#include \"OledDisplay.h\"\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Microsoft/AZ3166/#upload","title":"Upload","text":"<p>For more information, </p> <ul> <li>Please refer to Upgrade the bootloader for IoT DevKit.</li> </ul>","tags":["Legacy"]},{"location":"Boards/Microsoft/AZ3166/#debug","title":"Debug","text":"<p>The Microsoft IoT DevKit board includes a DAP-Link debugger. It requires the ST-Link drivers.</p> <ul> <li> <p>Please refer to the procedure Install the extensions for debugging .</p> </li> <li> <p>Register the <code>udev</code> profile for OpenOCD.</p> </li> </ul> <p><pre><code>sudo cp ~/..arduino15/packages/AZ3166/tools/openocd/0.10.0/contrib/60-openocd.rules /etc/udev/rules.d/\nsudo udevadm control --reload-rules\nsudo usermod -a -G plugdev $(whoami)\n</code></pre></p>","tags":["Legacy"]},{"location":"Boards/Other/","title":"Add a board","text":"<p>If a board is not listed, adding it requires two steps plus one optional.</p> <ul> <li> <p>Create a board configuration file ;</p> </li> <li> <p>Edit the C/C++ properties file of the project ; and optionally</p> </li> <li> <p>Edit the tasks file for debug .</p> </li> </ul>"},{"location":"Boards/Other/#create-a-configuration-file-for-a-new-board","title":"Create a configuration file for a new board","text":"<p>To add a configuration file for a new board,</p> <ul> <li> <p>Go to the <code>Configurations</code> sub-folder of the <code>Tools</code> folder of emCode.</p> </li> <li> <p>Create a new file, for example <code>Raspberry_Pi_Pico_W_RP2040_DebugProbe_CMSIS_DAP.mk</code>.</p> </li> </ul> <p>Warning</p> <p>The file name should not contain spaces and the extension is <code>.mk</code>.</p> <p>Raspberry_Pi_Pico_W_RP2040_DebugProbe_CMSIS_DAP.mk<pre><code>#\n# Raspberry Pi Pico W RP2040 (DebugProbe CMSIS-DAP).mk\n# Board configuration file\n# ----------------------------------\n\n# Board identifier\nBOARD_TAG = rpipicow\n\n# More options\nBOARD_TAG1 = rpipicow.menu.flash.2097152_0\nBOARD_TAG2 = rpipicow.menu.freq.125\nBOARD_TAG3 = rpipicow.menu.dbgport.Serial\nBOARD_TAG4 = rpipicow.menu.dbglvl.None\nBOARD_TAG5 = rpipicow.menu.usbstack.picosdk\nBOARD_TAG6 = rpipicow.menu.stackprotect.Disabled\nBOARD_TAG7 = rpipicow.menu.exceptions.Disabled\nBOARD_TAG8 = rpipicow.menu.uploadmethod.picoprobe_cmsis_dap\n\n# Port (optional)\nBOARD_PORT = /dev/ttyACM*\n\n# Define macros for build\nGCC_PREPROCESSOR_DEFINITIONS = ARDUINO\n\n# Specific programmer options, no port\nUPLOADER = debugprobe\nDELAY_BEFORE_UPLOAD = 5\n\n# Linux\n# BOARD_VOLUME = /media/$(USER)/RPI-RP2\n\nDELAY_BEFORE_SERIAL = 5\n\nCONFIG_NAME = Raspberry Pi Pico W RP2040 (DebugProbe CMSIS-DAP)\n</code></pre></p>"},{"location":"Boards/Other/#set-the-board-tag","title":"Set the board tag","text":"<p>Specify the following variables:</p> <ul> <li><code>BOARD_TAG</code> is the unique identifier of the board, found in the <code>boards.txt</code> file.</li> </ul> <p><pre><code># Board identifier\nBOARD_TAG = rpipicow\n</code></pre></p> <ul> <li>Indexed <code>BOARD_TAG</code>, like <code>BOARD_TAG1</code> <code>BOARD_TAG2</code> \u2026, are sometimes required to ensure compatibility between old and new identifiers, or to complement the initial <code>BOARD_TAG</code>.</li> </ul> <p><pre><code># More options\nBOARD_TAG1 = rpipicow.menu.flash.2097152_0\nBOARD_TAG2 = rpipicow.menu.freq.125\nBOARD_TAG3 = rpipicow.menu.dbgport.Serial\nBOARD_TAG4 = rpipicow.menu.dbglvl.None\nBOARD_TAG5 = rpipicow.menu.usbstack.picosdk\nBOARD_TAG6 = rpipicow.menu.stackprotect.Disabled\nBOARD_TAG7 = rpipicow.menu.exceptions.Disabled\nBOARD_TAG8 = rpipicow.menu.uploadmethod.picoprobe_cmsis_dap\n</code></pre></p>"},{"location":"Boards/Other/#set-the-serial-port","title":"Set the serial port","text":"<ul> <li><code>BOARD_PORT</code> defines the USB port to be used.</li> </ul> <p><pre><code>BOARD_PORT = /dev/ttyACM*\n</code></pre></p> <p>This parameter is optional. To know the name of the USB port, proceed as follow:</p> <ul> <li> <p>Open the Terminal window,</p> </li> <li> <p>Plug the board,</p> </li> <li> <p>Launch the command <code>ls /dev/ttyUSB*</code></p> </li> </ul> <p><pre><code>ls /dev/ttyUSB*\n/dev/ttyUSB0\n</code></pre></p> <ul> <li>or <code>ls /dev/ttyACM*</code>.</li> </ul> <p><pre><code>ls /dev/ttyACM*\n/dev/ttyACM0\n</code></pre></p> <ul> <li> <p>Read the answer, here <code>/dev/ttyUSB0</code> or <code>/dev/ttyACM0</code>.</p> </li> <li> <p>Change the value of <code>BOARD_PORT</code> accordingly.</p> </li> </ul> <p><pre><code>BOARD_PORT = /dev/ttyACM*\n</code></pre></p> <p>The generic character <code>*</code> allows other values for the port, for example <code>/dev/ttyUSB1</code>.</p> <ul> <li><code>DELAY_BEFORE_SERIAL</code> defines a delay in seconds before opening the Console.</li> </ul> <p><pre><code>DELAY_BEFORE_SERIAL = 5\n</code></pre></p> <p>If previous versions, <code>DELAY_PRE_SERIAL</code> may appear instead. Change it for <code>DELAY_BEFORE_SERIAL</code>.</p>"},{"location":"Boards/Other/#set-the-platform-references","title":"Set the platform references","text":"<ul> <li><code>GCC_PREPROCESSOR_DEFINITIONS</code> is the name of the micro-controller of the board, found in the <code>boards.txt</code> file.</li> </ul> <p><pre><code>GCC_PREPROCESSOR_DEFINITIONS = ARDUINO\n</code></pre></p>"},{"location":"Boards/Other/#set-memory-sizes","title":"Set memory sizes","text":"<p>Normally, the Arduino configuration file of the platform provides the memory sizes for Falsh and RAM.</p> <p>However, some boards are missing those critical sizes.</p> <ul> <li><code>MAX_FLASH_SIZE</code> gives the number of bytes of Flash. Read the specification sheet of the MCU to find the correct value.</li> </ul> <p><pre><code>MAX_FLASH_SIZE = 262144\n</code></pre></p> <ul> <li><code>MAX_RAM_SIZE</code> gives the number of bytes of SRAM. Read the specification sheet of the MCU to find the correct value.</li> </ul> <p><pre><code>MAX_RAM_SIZE = 2048\n</code></pre></p> <p>Additional parameters for the programmer can be set according to the procedure Define a specific programmer for a new board .</p>"},{"location":"Boards/Other/#define-a-specific-programmer-for-a-new-board","title":"Define a specific programmer for a new board","text":"<p>The Arduino IDE includes the central file <code>boards.txt</code> contains all the parameters of the boards.</p>"},{"location":"Boards/Other/#set-programmer-options","title":"Set programmer options","text":"<p>Only specify the parameters when the values are different from the default ones.</p> <ul> <li><code>AVRDUDE_SPECIAL</code> states that a specific configuration is set for the programmer. Otherwise, comment the line.</li> </ul> <p><pre><code>AVRDUDE_SPECIAL = 1\n</code></pre></p> <ul> <li><code>AVRDUDE_PROGRAMMER</code> provides the name of the specific programmer. Otherwise, the variable isn\u2019t required: just comment the line.</li> </ul> <p><pre><code>AVRDUDE_PROGRAMMER = usbtiny\n</code></pre></p> <ul> <li><code>AVRDUDE_BAUDRATE</code> provides the speed for upload. If the speed differs from the default setting, specify it. Otherwise, the variable isn\u2019t required: just comment the line.</li> </ul> <p><pre><code>AVRDUDE_BAUDRATE = 9600\n</code></pre></p> <ul> <li><code>AVRDUDE_OTHER_OPTIONS</code> provides a free variable, for example for selecting verbose output or erasing flash.</li> </ul> <p><pre><code>AVRDUDE_OTHER_OPTIONS = -v\n</code></pre></p> <ul> <li>If the programmer doesn\u2019t feature a serial port, set <code>AVRDUDE_NO_SERIAL_PORT</code> to 1.</li> </ul> <p><pre><code>AVRDUDE_NO_SERIAL_PORT = 1\n</code></pre></p> <ul> <li>Otherwise, set <code>AVRDUDE_NO_SERIAL_PORT</code> to O or comment the line. The port to be used is defined by <code>BOARD_PORT</code>.</li> </ul>"},{"location":"Boards/Other/#define-boot-loader-options","title":"Define boot-loader options","text":"<p>Only specify the parameters when the values are different from the default ones.</p> <ul> <li>If the specific boot-loader is already supported like <code>MiniCore</code> for AVR MCUs, set <code>BOOTLOADER</code> to its name.</li> </ul> <p><pre><code>BOOTLOADER = minicore\n</code></pre></p> <ul> <li>Otherwise, set the <code>AVRDUDE_CONF</code> variable to the specific avrdude.conf.</li> </ul> <p><pre><code>AVRDUDE_CONF = $(HOME)/Library/Arduino15/packages/MiniCore/hardware/avr/1.0.3/avrdude.conf\n</code></pre></p> <p>For more information on how to install the MiniCore boot-loader,</p> <ul> <li>Please refer to Change Boot-Loader for AVR-Based Arduino Boards .</li> </ul>"},{"location":"Boards/Other/#define-compatible-mcu","title":"Define compatible MCU","text":"<p>Some boards are not listed but are compatible with another listed board.</p> <p>For example, the ATmega328 is compatible with the ATmega328P. However, Arduino doesn\u2019t support the ATmega328 but supports the ATmega328P.</p> <ul> <li>If the speed is different, just define <code>F_CPU</code>, otherwise comment the line to use the default value provided by the IDE.</li> </ul> <p><pre><code>F_CPU = 20000000L\n</code></pre></p> <p>However, each MCU has a unique signature required by the programmer. For example, the signature of the ATmega328 is <code>0x1e 0x95 0x14</code> while the compatible ATmega328P has <code>0x1e 0x95 0x0f</code>.</p> <p>The programmer checks the signature of the MCU, so the exact reference of the MCU needs to be specified to AVRDUDE.</p> <p>In that case,</p> <ul> <li>Specify <code>AVRDUDE_MCU</code> as the MCU for the programmer only:</li> </ul> <p><pre><code>AVRDUDE_MCU = atmega328\n</code></pre></p>"},{"location":"Boards/Other/#set-fuses-options","title":"Set fuses options","text":"<ul> <li>Optionally, fuses can be set, including <code>ISP_LOCK_FUSE_PRE</code>, <code>ISP_LOCK_FUSE_POST</code>, <code>ISP_HIGH_FUSE</code>, <code>ISP_LOW_FUSE</code> and <code>ISP_EXT_FUSE</code>.</li> </ul> <p><pre><code>ISP_LOCK_FUSE_PRE = 0x3f\nISP_LOCK_FUSE_POST = 0x0f\nISP_HIGH_FUSE = 0xde\nISP_LOW_FUSE = 0xff\nISP_EXT_FUSE = 0x05\n</code></pre></p> <p>If those variables aren\u2019t defined on the board configuration file, default values are provided by the IDE.</p> <ul> <li>To by-pass the fuses, set <code>AVR_IGNORE_FUSES</code> to <code>1</code>, otherwise set the value to <code>0</code> or comment the line.</li> </ul> <p><pre><code>AVR_IGNORE_FUSES = 1\n</code></pre></p> <ul> <li>Please refer to the documentation of the MCUs for the correct values. Incorrect values may damage the MCU.</li> </ul> <p>You may also need to update the FTDI drivers to use a programmer.</p> <ul> <li>Please refer to the documentation of the programmer for the available options, for example the AVRDUDE - AVR Downloader Uploader  manual.</li> </ul> <p>Some options, as the values for the fuses, are critical and may freeze the MCU.</p> <ul> <li>Please refer to the documentation provided by the manufacturers for the correct values, for example the Atmel  website.</li> </ul> <p>These options have been tested with the 5V FTDI basic programmer  from Sparkfun, the USB tinyISP AVR programmer kit  from Adafruit and the USB ASP programmer  from Protostack.</p>"},{"location":"Boards/Other/#edit-the-cc-properties-file-of-the-project","title":"Edit the C/C++ properties file of the project","text":"<p>Back to the project,</p> <ul> <li> <p>Open the <code>c_cpp_properties.json</code> under the <code>.vscode</code> folder;</p> </li> <li> <p>Add the following lines</p> </li> </ul> <p>c_cpp_properties.json<pre><code>{\n\"configurations\": [\n{\n\"name\": \"Raspberry_Pi_Pico_RP2040_DebugProbe_CMSIS_DAP\",\n\"includePath\": [\n\"${env:HOME}/.arduino15/packages/rp2040/hardware/rp2040/3.3.0/**\",\n\"${env:HOME}/Projets/Arduino/libraries/**\",\n\"${workspaceFolder}/**\"\n],\n\"browse\": {\n\"limitSymbolsToIncludedHeaders\": true,\n\"databaseFilename\": \"\",\n\"path\": [\n\"${env:HOME}/.arduino15/packages/rp2040/hardware/rp2040/3.3.0/**\",\n\"${env:HOME}/Projets/Arduino/libraries/**\",\n\"${workspaceFolder}/**\"\n]\n},\n\"intelliSenseMode\": \"${default}\",\n\"compilerPath\": \"${env:HOME}/.arduino15/packages/rp2040/tools/pqt-gcc/1.5.0-b-c7bab52/bin/arm-none-eabi-g++\",\n\"cStandard\": \"c17\",\n\"cppStandard\": \"c++17\",\n\"defines\": [\n\"EMCODE=11011\",\n\"ARDUINO=10813\"\n],\n\"forcedInclude\": [\n\"${env:HOME}/.arduino15/packages/rp2040/hardware/rp2040/3.3.0/cores/rp2040/Arduino.h\",\n\"${env:HOME}/.arduino15/packages/rp2040/hardware/rp2040/3.3.0/variants/rpipico/pins_arduino.h\"\n]\n},\n]\n}\n</code></pre></p>"},{"location":"Boards/Other/#set-the-path-to-the-board-package","title":"Set the path to the board package","text":"<p>The <code>includePath</code> section includes the aboslute path where the board package is installed by the Arduino CLI or IDE.</p> <p>The <code>browse</code> section duplicates the information.</p>"},{"location":"Boards/Other/#set-the-path-to-the-compiler","title":"Set the path to the compiler","text":"<p>The following variables are required by Visual Studio Code for</p> <p>The <code>compilerPath</code> variable points to the absolute path of the compiler.</p> <p>The <code>cStandard</code> and <code>cppStandard</code> variables set the version for C and C++.</p> <p>The <code>defines</code> variables provide the versions of Arduino and emCode.</p>"},{"location":"Boards/Other/#set-the-path-to-the-board-files","title":"Set the path to the board files","text":"<p>The <code>forcedIncludeforcedInclude</code> section lists two files: <code>Arduino.h</code> and <code>pins_arduino.h</code>.</p> <p><code>Arduino.h</code> provides the entry to the Arduino SDK and <code>pins_arduino.h</code> defines the pins and ports.</p>"},{"location":"Boards/Other/#add-the-new-boards-to-the-template","title":"Add the new boards to the template","text":"<p>To add a board to the template,</p> <ul> <li>Update the <code>c_cpp_properties.json</code> file of the emCode template with the <code>c_cpp_properties.json</code> of the project.</li> </ul>"},{"location":"Boards/Other/#edit-the-tasks-file-for-debug","title":"Edit the tasks file for debug","text":"<p>Below is an example of the configuration of the tasks file <code>tasks.json</code> for debugging against the Raspberry Pi Pico with the external Raspberry Pi Debug Probe CMSIS-DAP.</p> <p>tasks.json<pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"cortex-debug\",\n\"request\": \"launch\",\n\"name\": \"DebugProbe CMSIS-DAP\",\n\"servertype\": \"openocd\",\n\"serverpath\": \"${env:HOME}/.arduino15/packages/rp2040/tools/pqt-openocd/1.5.0-b-c7bab52/bin/openocd\",\n\"cwd\": \"${workspaceRoot}\",\n\"executable\": \"${workspaceRoot}/.builds/embeddedcomputing.elf\",\n\"interface\": \"swd\",\n\"gdbPath\": \"/usr/bin/gdb-multiarch\",\n\"device\": \"RP2040\",\n\"serverArgs\": [\n\"-c\", \"adapter speed 5000\",\n\"-f\", \"target/rp2040.cfg\",\n\"-s\", \"${env:HOME}/.arduino15/packages/rp2040/tools/pqt-openocd/1.5.0-b-c7bab52/share/openocd/scripts\",\n],\n\"configFiles\": [\n\"interface/cmsis-dap.cfg\"\n],\n\"svdFile\": \"${env:HOME}/Projets/emCode/Tools/SVD/rp2040.svd\",\n}\n]\n}\n</code></pre></p> <p>Most of the parameters are related to the Cortex Debug extension. For more information,</p> <ul> <li>Please refer to the Cortex-Debug  wiki.</li> </ul> <p>The <code>serverpath</code> variable defines the path to the GDB server, provided by the the Raspberry Pi Pico boards package.</p> <p>The <code>gdbPath</code> variable defines the path to the GDB client. The recommended GDB client is <code>gdb-multiarch</code>, as the GDB client of the tools-chain of the Raspberry Pi Pico boards package does not meet the minimum version required by Visual Studio Code.</p> <p>To install <code>gdb-multiarch</code>,</p> <ul> <li>Please refer to the section Install the extensions for debugging .</li> </ul> <p>The optional <code>svdFile</code> variable allows to attach a CMSIS System View Description profile.</p> <p>For more infirmation on the CMSIS System View Description,</p> <ul> <li>Please refer to the CMSIS System View Description  documentation.</li> </ul>"},{"location":"Boards/RP2040/","title":"Manage the Raspberry Pi Pico RP2040 boards","text":""},{"location":"Boards/RP2040/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform Package Date Comment RP2040 3.4.0 For Raspberry Pi RP2040-based boards emCode 14.1.8 04 Sep 2023"},{"location":"Boards/RP2040/#visit-the-official-websites","title":"Visit the official websites","text":"Raspberry Pi Pico RP2040 IDE Arduino CLI or IDE Repository https://github.com/earlephilhower/arduino-pico Wiki https://arduino-pico.readthedocs.io/en/latest/"},{"location":"Boards/RP2040/RP2040/","title":"Raspberry Pi Pico RP2040 boards","text":"<p>The Raspberry Pi Pico RP2040 platform  provides an excellent solution for all the boards based on the Raspberry Pi RP2040 MCU.</p> <p>This platform is lighter and easier to debug than the Arduino Mbed-OS as it does not rely on Mbed-OS.</p> <p>The installation is performed with Arduino-CLI.</p>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#install","title":"Install","text":"<p>To install the Raspberry Pi Pico RP2040 boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install rp2040:rp2040\n</code></pre></p> <p>For more information on the installation of the Arduino IDE,</p> <ul> <li>Please refer to the Installing via Arduino Boards Manager  section on the GitHub repository and to the extensive Arduino-Pico  documentation.</li> </ul>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#declare-the-programmer-debugger","title":"Declare the programmer-debugger","text":"<p>For Linux systems, update <code>udev</code>.</p>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#picoprobe","title":"Picoprobe","text":"<p>The Picoprobe uses a Raspberry Pi Pico as programmer-debugger.</p> <ul> <li>Declare it with</li> </ul> <p><pre><code>echo 'SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0004\", GROUP=\"users\", MODE=\"0666\"' | sudo tee -a /etc/udev/rules.d/98-PicoProbe.rules\nsudo udevadm control --reload\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to Uploading Sketches with Picoprobe .</li> </ul>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#pico-debug","title":"Pico-debug","text":"<p>The pico-debug uses one core of the Raspberry Pi Pico to debug the other core.</p> <ul> <li>Declare it with</li> </ul> <p><pre><code>echo 'ATTRS{product}==\"*CMSIS-DAP*\", MODE=\"664\", GROUP=\"plugdev\"' | sudo tee -a /etc/udev/rules.d/98-CMSIS-DAP.rules\nsudo udevadm control --reload\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to Uploading Sketches with pico-debug .</li> </ul>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#debug-probe","title":"Debug Probe","text":"<p>The Raspberry Pi Debug Probe is the official debugger for the Raspberry Pi Pico boards.</p> <ul> <li>Declare it with</li> </ul> <p><pre><code>echo 'SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"000c\", GROUP=\"users\", MODE=\"0666\"' | sudo tee -a /etc/udev/rules.d/98-DebugProbe.rules\nsudo udevadm control --reload\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to Raspberry Pi Debug Probe .</li> </ul>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>APP_LIBS_LIST = WiFi Updater MD5Builder lwIP_Ethernet lwIP_CYW43 SPI LittleFS PicoOTA\n</code></pre></p>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>APP_LIBS_LIST = BTstackLib SPI\n</code></pre></p>","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#upload","title":"Upload","text":"","tags":["Active"]},{"location":"Boards/RP2040/RP2040/#debug","title":"Debug","text":"<p>The Raspberry Pi Pico board exposes the SWD signals through SWCLK and SWDIO pins.</p> <ul> <li>Connect</li> </ul> Raspberry Pi Pico Segger J-Link debug probe SWCLK SWCLK SWDIO SWDIO +3.3V VTref Ground Ground <p>To power the Raspberry Pi Pico by the Segger J-Link debug probe,</p> <ul> <li> <p>Please refer to Configure the Segger J-Link debug probe .</p> </li> <li> <p>Connect</p> </li> </ul> Raspberry Pi Pico Segger J-Link debug probe Vbus +5V","tags":["Active"]},{"location":"Boards/STM32/","title":"Manage the STM32 boards","text":"<p> The STM32 platform includes the Nucleo and Discovery boards based on the STM32 MCUs.</p> <p>STM32duino  supports a wide range of STM32-based boards.</p>"},{"location":"Boards/STM32/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform Package Date Comment STM32 2.6.0 For Nucleo and Discovery boards emCode 14.1.5 19 Jul 2023"},{"location":"Boards/STM32/#visit-the-official-websites","title":"Visit the official websites","text":"STM32duino IDE Arduino CLI or IDE Former http://www.stm32duino.com Download https://github.com/stm32duino/Arduino_Core_STM32 Forum http://www.stm32duino.com"},{"location":"Boards/STM32/STM32/","title":"Manage the STM32duino boards","text":"<p>STM32duino supports a wide range of STM32-based boards.</p> <p>For an exact list of the supproted boards,</p> <ul> <li>Please refer to the list of Supported boards .</li> </ul>","tags":["Active"]},{"location":"Boards/STM32/STM32/#install","title":"Install","text":"<p>To install the STM32 boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://github.com/stm32duino/BoardManagerFiles/raw/main/package_stmicroelectronics_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install STMicroelectronics:stm32\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to the Getting Started  page and the Add STM32 boards support to Arduino  section on the GitHub repository.</li> </ul>","tags":["Active"]},{"location":"Boards/STM32/STM32/#install-the-uploader-and-debugger-utilities","title":"Install the uploader and debugger utilities","text":"<p>STMicroelectronics recommends ST-Link, part of the  STM32CubeProgrammer software for all STM32  package. However, it requires Java.</p> <ul> <li>Download and install STM32CubeProgrammer.</li> </ul> <p>To update the PATH environmnent variable,</p> <ul> <li>Open <code>.bashrc</code>.</li> </ul> <p><pre><code>nano ~/.bashrc\n</code></pre></p> <ul> <li>Add</li> </ul> <p><pre><code>export PATH=$PATH:~/Applications/STM32CubeProgrammer/bin\n</code></pre></p> <ul> <li>Save and close with Ctrl+O Ctrl+X.</li> </ul> <p>Two open-source alternatives include OpenOCD for Open On-Chip Debugger, the Arduino Tools from STM3232duino, and Texane ST-Link, a native version of the STMicroelectronics ST-Link tools.</p> <p>Please refer to</p> <ul> <li> <p>Install the OpenOCD driver ;</p> </li> <li> <p>STM3232duino Arduino Tools  with the upload tools for the STM32-based boards and some other usefull scripts;</p> </li> <li> <p>Install the Texane ST-Link driver .</p> </li> </ul>","tags":["Active"]},{"location":"Boards/STM32/STM32/#update-the-firmware-of-the-boards","title":"Update the firmware of the boards","text":"<p>The application STLinkUpgrade updates the firmware of the ST-Link, ST-Link/V2 and ST-Link/V2-1 boards through the USB port. It requires the Java Runtime Environment.</p> <ul> <li> <p>Download the STSW-LINK007 package .</p> </li> <li> <p>Install the STLinkUpgrade application.</p> </li> <li> <p>Connect the board and launch the application.</p> </li> </ul> <p></p> <p>For more information on the firmware upgrade for ST-Link, ST-Link/V2, ST-Link/V2-1 and ST-Link-V3 boards,</p> <ul> <li>Please refer to the RN0093 Release note .</li> </ul>","tags":["Active"]},{"location":"Boards/STM32/STM32/#develop","title":"Develop","text":"","tags":["Active"]},{"location":"Boards/STM32/STM32/#manage-old-versions-of-boards","title":"Manage old versions of boards","text":"<p>STM32duino release 2.6.0 manages correctly the system clock, even for old versions of the boards.</p> <p>Prior releases of STM32duino may need adding a specific clock function for old versions of the boards.</p> <ul> <li>Just add on the main sketch the <code>SystemClock_Config()</code>.</li> </ul> <p><pre><code>extern \"C\" void SystemClock_Config(void)\n{\nRCC_OscInitTypeDef RCC_OscInitStruct = {};\nRCC_ClkInitTypeDef RCC_ClkInitStruct = {};\n\n/* Configure the main internal regulator output voltage */\n__HAL_RCC_PWR_CLK_ENABLE();\n__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);\n/* Initializes the CPU, AHB and APB busses clocks */\nRCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\nRCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;\nRCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\nRCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\nRCC_OscInitStruct.PLL.PLLM = 8;\nRCC_OscInitStruct.PLL.PLLN = 336;\nRCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;\nRCC_OscInitStruct.PLL.PLLQ = 7;\nif (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK) {\nError_Handler();\n}\n/* Initializes the CPU, AHB and APB busses clocks */\nRCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK\n| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;\nRCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\nRCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\nRCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;\nRCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;\n\nif (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {\nError_Handler();\n}\n}\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to Arduino_Core_STM32 version 1.9.0 regression? #1315  on the STM32duino repository.</li> </ul>","tags":["Active"]},{"location":"Boards/STM32/STM32/#debug","title":"Debug","text":"<ul> <li>Edit the <code>launch.json</code> file to add the configuration for the board.</li> </ul> Example <p>The example below targets the Nucleo-64 STM32F401R board.</p> <p><pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"cortex-debug\",\n\"request\": \"launch\",\n\"name\": \"STM32F401 OpenOCD\",\n\"servertype\": \"openocd\",\n\"cwd\": \"${workspaceRoot}\",\n\"executable\": \"${workspaceRoot}/.builds/embeddedcomputing.elf\",\n\"gdbPath\": \"/usr/bin/gdb-multiarch\",\n\"configFiles\": [\n\"board/st_nucleo_f4.cfg\"\n],\n\"preLaunchTask\": \"Fast\"\n}\n]\n}\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Seeed/","title":"Manage the Seeed boards","text":"<p> The Seeed boards include the Grove Beginner for Arduino, the Xiao, the Wio Terminal and the SenseCAP Indicator.</p> <p>The installation is performed with Arduino-CLI.</p> <p>The Seeed boards includes different platforms.</p> <ul> <li>Grove Beginner Kit for Arduino </li> <li>Xiao ESP32-C3 and -S3 </li> <li>Xiao nRF52840 </li> <li>Xiao nRF52840 Mbed-OS </li> <li>Xiao RP2040 </li> <li>Xiao M0 and Wio Terminal </li> <li>SenseCAP Indicator </li> </ul>"},{"location":"Boards/Seeed/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform Package Date Comment RP2040 2.7.3 For Raspberry Pi RP2040-based boards emCode"},{"location":"Boards/Seeed/#visit-the-official-websites","title":"Visit the official websites","text":"Seeed IDE Arduino CLI or IDE Repository https://github.com/earlephilhower/arduino-pico Wiki https://arduino-pico.readthedocs.io/en/latest/"},{"location":"Boards/Seeed/Grove_AVR/","title":"Manage the Seeed AVR Grove Beginner Kit for Arduino","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#install","title":"Install","text":"<p>The Seeed platform includes two main lines of boards: the Grove Beginner Kit for Arduino.</p> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install Seeeduino:avr\n</code></pre></p> <p>The Grove Beginner Kit for Arduino includes different sensors, which require the installation of the corresponding libraries.</p> <p>To install the library for the display, the temperature sensor, the barometer and the accelerometer,</p> <ul> <li>Run</li> </ul> <p><pre><code>arduino-cli lib install U8g2\narduino-cli lib install \"Grove Temperature And Humidity Sensor\"\narduino-cli lib install \"Grove - Barometer Sensor BMP280\"\narduino-cli lin install \"Grove-3-Axis-Digital-Accelerometer-2g-to-16g-LIS3DHTR\"\n</code></pre></p> <p>For more information on the installation process,</p> <ul> <li>Please refer to the How to Add Seeed Boards to Arduino IDE  page on the Seeed Studio website.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#develop","title":"Develop","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#use-the-libraries-for-accelerometer","title":"Use the libraries for accelerometer","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>USER_LIBS_LIST = Grove-3-Axis-Digital-Accelerometer-2g-to-16g-LIS3DHTR\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#use-the-libraries-for-barometer","title":"Use the libraries for barometer","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>USER_LIBS_LIST = Grove_-_Barometer_Sensor_BMP280\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#use-the-libraries-for-display","title":"Use the libraries for display","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>USER_LIBS_LIST = U8g2\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#use-the-libraries-for-temperature-and-humidity-sensor","title":"Use the libraries for temperature and humidity sensor","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>USER_LIBS_LIST = Grove_Temperature_And_Humidity_Sensor\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment Seeeduino Arduino 1.8 AVR 1.3.0 For Seeed and Seeed Grove Beginner Kit SAMD 1.8.0 For Xiao SAMD and Wio Terminal boards Realtek 3.0.7 For RTL8720DN on Wio Terminal board","tags":["On hold"]},{"location":"Boards/Seeed/Grove_AVR/#visit-the-official-websites","title":"Visit the official websites","text":"Seeeduino IDE Arduino CLI or IDE Website https://www.seeedstudio.com Download http://wiki.seeed.cc/Seeed_Arduino_Boards Wiki http://wiki.seeed.cc/Seeeduino_v4.2/ Grove Beginner Kit For Arduino https://wiki.seeedstudio.com/Grove-Beginner-Kit-For-Arduino/ Forum https://forum.seeedstudio.com/","tags":["On hold"]},{"location":"Boards/Seeed/SenseCAP/","title":"Manage the Seeed SenseCAP Indicator","text":"","tags":["On hold"]},{"location":"Boards/Seeed/SenseCAP/#install","title":"Install","text":"<p>The Seeed SenseCAP Indicator boards run on two different MCUs: RP2040 for general purpose and ESP32-S3 for WiFi, Bluetooth and screen. Both MCUs communicate through a serial port.</p> <p>If development against the RP2040 uses the Arduion SDK, the ESP32-S3 requires the native ESP IDF SDK.</p> <p>Warning</p> <p>The Seeed Xiao SenseCAP Indicator is not mature enough. Support has been put on hold.</p>","tags":["On hold"]},{"location":"Boards/Seeed/SenseCAP/#develop","title":"Develop","text":"","tags":["On hold"]},{"location":"Boards/Seeed/SenseCAP/#upload","title":"Upload","text":"","tags":["On hold"]},{"location":"Boards/Seeed/SenseCAP/#debug","title":"Debug","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/","title":"Manage the Seeed Xiao ESP32-C3 and ESP-S3 boards","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/#install","title":"Install","text":"<p>For the Xiao boards based on the ESP32,</p> <ul> <li>Please refer to Install the Espressif platform .</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/#use-the-libraries","title":"Use the libraries","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment Seeeduino Arduino 1.8 AVR 1.3.0 For Seeed and Seeed Grove Beginner Kit SAMD 1.8.0 For Xiao SAMD and Wio Terminal boards Realtek 3.0.7 For RTL8720DN on Wio Terminal board","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_ESP32/#visit-the-official-websites","title":"Visit the official websites","text":"Seeeduino IDE Arduino CLI or IDE Website https://www.seeedstudio.com Download http://wiki.seeed.cc/Seeed_Arduino_Boards Wiki http://wiki.seeed.cc/Seeeduino_v4.2/ Xiao ESP32C3 https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/ Xiao ESP32S3 https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/ Forum https://forum.seeedstudio.com/","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/","title":"Manage the Seeed Xiao expansion board","text":"<p>The Seed Xiao expansion board brings a 128x64 OLED screen, a micro SD-card slot, a LiPo charger, a battery-backed RTC, a buzzer and connectors for a SWD debugger.</p> <p>The Xiao RP2040 requires specific libraries provided by the RP2040 platform.</p> <p>The Xiao ESP32-C3 and ESP32-S3 require specific libraries provided by the ESP32 platform.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#install","title":"Install","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#install-the-libraries-for-display","title":"Install the libraries for display","text":"<ul> <li>Download and install the U8g2 Arduino Monochrome Graphics Library :.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#install-the-libraries-for-clock","title":"Install the libraries for clock","text":"<ul> <li>Download and install the PCF8563 Arduino Library :.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#install-the-libraries-for-sd-card","title":"Install the libraries for SD-card","text":"<p>For the Xiao M0, Xiao RP2040, Xiao ESP32C3 and Xiao ESP32S3,</p> <ul> <li>Download and install the library Seeed Arduino FS :.</li> </ul> <p>For the Xiao nRF52840,</p> <ul> <li>Download and install the library SDFat :.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#develop","title":"Develop","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#use-the-libraries-for-display","title":"Use the libraries for display","text":"<ul> <li>Add to the main <code>Makefile</code>;</li> </ul> <p><pre><code>APP_LIBS_LIST = Wire\nUSER_LIBS_LIST = U8g2\n</code></pre></p> <ul> <li>Edit the main sketch.</li> </ul> <p><pre><code>#include \"Wire.h\"\n#include \"U8x8lib.h\"\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#use-the-libraries-for-clock","title":"Use the libraries for clock","text":"<ul> <li>Add to the main <code>Makefile</code>;</li> </ul> <p><pre><code>APP_LIBS_LIST = Wire\nUSER_LIBS_LIST = U8g2\n</code></pre></p> <ul> <li>Add to the main sketch.</li> </ul> <p><pre><code>#include \"Wire.h\"\n#include \"PCF8563.h\"\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#use-the-libraries-for-buzzer","title":"Use the libraries for buzzer","text":"<p>No library is required.</p> <p>The buzzer is connected to pin <code>A3</code>.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#use-the-libraries-for-sd-card","title":"Use the libraries for SD-card","text":"<p>The SD-card <code>/CS</code> signal is connected to pin <code>D2</code>.</p> <p>For the Xiao M0,</p> <ul> <li>Add to the main <code>Makefile</code>;</li> </ul> <p><pre><code>APP_LIBS_LIST = SPI\nUSER_LIBS_LIST = Adafruit_Zero_DMA Seeed_Arduino_FS\n</code></pre></p> <ul> <li>Add to the main sketch.</li> </ul> <p><pre><code>#include \"SPI.h\"\n#include \"Seeed_Arduino_FS.h\"\n\nor\n\n+ Add to the main `Makefile`;\n\n``` CMake\nAPP_LIBS_LIST = SPI\nUSER_LIBS_LIST = Adafruit_Zero_DMA SD\n</code></pre></p> <ul> <li>Add to the main sketch.</li> </ul> <p><pre><code>#include \"SPI.h\"\n#include \"SD.h\"\n</code></pre></p> <p>For the Xiao nRF52840,</p> <ul> <li>Add to the main <code>Makefile</code>;</li> </ul> <p><pre><code>APP_LIBS_LIST = SPI\nUSER_LIBS_LIST = SdFat\n</code></pre></p> <ul> <li>Add to the main sketch.</li> </ul> <p><pre><code>#include \"SPI.h\"\n#include \"SdFat.h\"\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#debug","title":"Debug","text":"<p>The Seeed Xiao expansion board expose the SWD clock and data signals; the serial RX and TX signals; and the +5V, +3.3V and ground lines.; to connect a Segger J-Link programmer-debugger.</p> <p>The debugging features seems to work only against the Xiao M0.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_Expansion/#visit-the-official-websites","title":"Visit the official websites","text":"Seeed Website https://www.seeedstudio.com Download http://wiki.seeed.cc/Seeed_Arduino_Boards Wiki https://wiki.seeedstudio.com/Seeeduino-XIAO-Expansion-Board/ Forum https://forum.seeedstudio.com/","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/","title":"Manage the Seeed Xiao M0 and Wio Terminal boards","text":"<p>The Seeed SAMD platform includes two main lines of boards: the compact Xiao and the Wio Terminal.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#install-the-seeed-xiao-samd","title":"Install the Seeed Xiao SAMD","text":"<p>To install the Seeed Xiao SAMD board,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json```\n\n+ Open a **Terminal** window.\n\n+ Run\n\n``` bash dollar\narduino-cli core install Seeeduino:samd\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#install-the-seeed-wio-terminal","title":"Install the Seeed Wio Terminal","text":"<p>The Wio Terminal includes two MCUs: a SAMD51 Cortex-M4 MCU for general purpose, and an Ameba RTL8720DN for Wifi and Bluetooth radio.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#install-the-samd-platform-for-the-wio-terminal-board","title":"Install the SAMD platform for the Wio Terminal board","text":"<ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json```\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install Seeeduino:samd\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#install-the-firmware-and-libraries-for-wifi-and-bluetooth","title":"Install the firmware and libraries for WiFi and Bluetooth","text":"<p>The initial firmware of the RTL8720 radio of the Wio Terminal only provides WiFi capabilities.</p> <p>To use WiFi and Bluetooth, the Wio Terminal requires an update of the firmware and the installation of dedicated libraries.</p> <ul> <li> <p>Please follow the procedure Update the Wireless Core Firmware .</p> </li> <li> <p>Download and install the library Seeed_Arduino_rpcWiFi  .</p> </li> <li> <p>Download and install the library Seeed_Arduino_rpcBLE .</p> </li> <li> <p>Download and install the library Seeed_Arduino_rpcUnified .</p> </li> <li> <p>Download and install the library Seeed_Arduino_FreeRTOS .</p> </li> </ul> <p>The previous firmware based on AT-commands only provides WiFi capabilities.</p> <ul> <li> <p>Please follow the procedure RTL8720 AT-Command Structure Firmware .</p> </li> <li> <p>Download and install the library Seeed_Arduino_atWiFi .</p> </li> <li> <p>Download and install the library Seeed_Arduino_atWiFiClientSecure .</p> </li> <li> <p>Download and install the library Seeed_Arduino_atUnified .</p> </li> <li> <p>Download and install the library Seeed_Arduino_ESP-AT-library .</p> </li> <li> <p>Download and install the library Seeed-Arduino-FreeRTOS .</p> </li> <li> <p>Download and install the library Seeed_Arduino_mbedtls .</p> </li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#install-the-ameba-rtl8720dn-platform-for-the-wio-terminal-board","title":"Install the Ameba RTL8720DN platform for the Wio Terminal board","text":"<p>Apart from the main SAMD51 MCU, the Seeed SAMD Wio Terminal board includes another MCU, RTL8720DN, in charge of WiFi and Bluetooth.</p> <p>To install the RTL8720DN of the Wio Terminal board,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json```\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install realtek:AmebaD\n</code></pre></p> <p>For more information on the installation process,</p> <ul> <li> <p>Please refer to the Update the Wireless Core Firmware - CLI Methods  page on the Seeed Studio website.</p> </li> <li> <p>Get the RTL8720 firmware command line utilities  on the Seeed Studio website.</p> </li> </ul> <p>Using the RTL8720DN requires a utility running on the SAMD51 to provide a bridge between the  RTL8720DN and the serial over USB.</p> <ul> <li> <p>Read How to Use Wio Terminal as RTL8720DN Dev Board  on the Seeed Studio website.</p> </li> <li> <p>Download the rtl8720_update  or WioTerminal_USB2Serial_Burn8720  on the Seeed Studio website.</p> </li> </ul> <p>To install the Seeed Xiao nRF52840 board,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install realtek:AmebaD\n</code></pre></p> <ul> <li>Select the boards and click on Install.</li> </ul> <p>For more information on the installation process,</p> <ul> <li>Please refer to the How to Add Seeed Boards to Arduino IDE  page on the Seeed Studio website.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#install-the-seeed-samd-platform","title":"Install the Seeed SAMD platform","text":"<p>The Seeed SAMD Xiao board includes the compact Xiao board and the IoT-enabled Wio Terminal.</p> <p>To install the Seeed SAMD platform,</p> <ul> <li> <p>Download and install the supported versions of the Arduino IDE under the <code>/Applications</code> folder, as described in the section Install the Arduino platform .</p> </li> <li> <p>Launch it.</p> </li> <li> <p>Define the path of the sketchbook folder in the menu Arduino &gt; Preferences &gt; Sketchbook location.</p> </li> <li> <p>Avoid spaces in the name and path of the sketchbook folder.</p> </li> <li> <p>Follow the procedure Install additional boards on Arduino .</p> </li> <li> <p>Call the Boards Manager and check the Seeed SAMD boards are listed.</p> </li> </ul> <p></p> <p>If the Seeed boards aren\u2019t listed on the Boards Manager,</p> <ul> <li> <p>Open the Preferences.</p> </li> <li> <p>Add the following URL on a separate line, as described in section Add URLs for new boards .</p> </li> </ul> <p><pre><code>https://raw.githubusercontent.com/Seeed-Studio/Seeed_Platform/master/package_seeeduino_boards_index.json\n</code></pre></p> <ul> <li>Select the boards and click on Install.</li> </ul> <p>For more information on the installation process,</p> <ul> <li>Please refer to the How to Add Seeed Boards to Arduino IDE  page on the Seeed Studio website.</li> </ul> <p>The boards package does not include the utilities for the UF2 upload.</p> <ul> <li>Please install them from the Adafruit Feather nRF52  package.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#develop","title":"Develop","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>USER_LIBS_LIST = ArduinoBLE\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment Seeeduino Arduino 1.8 AVR 1.3.0 For Seeed and Seeed Grove Beginner Kit SAMD 1.8.0 For Xiao SAMD and Wio Terminal boards Realtek 3.0.7 For RTL8720DN on Wio Terminal board","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#visit-the-official-websites","title":"Visit the official websites","text":"Seeeduino IDE Arduino CLI or IDE Website https://www.seeedstudio.com Download http://wiki.seeed.cc/Seeed_Arduino_Boards Wiki http://wiki.seeed.cc/Seeeduino_v4.2/ Xiao M0 https://wiki.seeedstudio.com/Seeeduino-XIAO/ Xiao RP2040 https://wiki.seeedstudio.com/XIAO-RP2040/ Xiao nRF52840 https://wiki.seeedstudio.com/XIAO_BLE/ Xiao ESP32C3 https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/ Xiao ESP32S3 https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/ Wio Terminal https://wiki.seeedstudio.com/Wio-Terminal-Getting-Started/ Forum https://forum.seeedstudio.com/","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#upload","title":"Upload","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#upload-to-seeeduino-samd-boards","title":"Upload to Seeeduino SAMD boards","text":"<p> The Seeeduino SAMD boards offer multiple options for uploading, two for the Wio Terminal and three for the Xiao M0 board.</p> <p>The two first options rely on USB. They include the standard serial and the UF2 drag-and-drop procedures.</p> <p>Unfortunately, the boards package supplied by Seeeduino doesn\u2019t include the utilities required by UF2. They need to be installed from another board package.</p> <p>For more information,</p> <ul> <li>Please refer to Upload to Adafruit Feather M0 and M4 boards using UF2 .</li> </ul> <p>The last option leverages the exposed pads SWCLK and SWDIO for SWD signal. It is designed specifically for debugging. It has been explored with the Xiao M0 board.</p> <p>For more information,</p> <ul> <li>Please refer to Connect the Segger J-Link to the Seeeduino Xiao M0 .</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#upload-to-the-rtl8720dn-mcu-of-the-wio-terminal-board","title":"Upload to the RTL8720DN MCU of the Wio Terminal board","text":"<p>Using the RTL8720DN MCU requires to run a utility on the main SAMD51 MCU to provide a bridge between the  RTL8720DN and the serial over USB.</p> <p>For more information on the installation process,</p> <ul> <li> <p>Please refer to How to Use Wio Terminal as RTL8720DN Dev Board  on the Seeed Studio website.</p> </li> <li> <p>Download the rtl8720_update  or WioTerminal_USB2Serial_Burn8720  on the Seeed Studio website.</p> </li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#debug","title":"Debug","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#connect-the-segger-j-link-to-the-seeeduino-xiao-m0","title":"Connect the Segger J-Link to the Seeeduino Xiao M0","text":"<p>The Seeeduino Xiao M0 exposes the SWD signals through SWCLK and SWDIO pads.</p> <p></p> <p>Cables and pins should be soldered to connect the Segger J-Link programmer-debugger.</p> <p>For more information,</p> <ul> <li>Please refer to the Seeeduino Xiao wiki .</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_M0/#use-a-xiao-m0-as-dap-link-debugger","title":"Use a Xiao M0 as DAP-Link debugger","text":"<p>The Xiao M0 can be used as a CMSIS-DAP probe to debug another Xiao M0.</p> <p>For more information on using a Xiao M0 as a CMSIS-DAP probe,</p> <ul> <li>Please refer to Build a DAPLink Device using Seeed Studio XIAO SAMD21 .</li> </ul> <p>Below is an example of the configuration of the tasks file <code>tasks.json</code> for debugging against the Xiao M0 with an addtional Xiao M0 as CMSIS-DAP debugger.</p> <p><pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"type\": \"cortex-debug\",\n\"request\": \"launch\",\n\"name\": \"Xiao M0 CMSIS-DAP\",\n\"servertype\": \"openocd\",\n\"cwd\": \"${workspaceRoot}\",\n\"executable\": \"${workspaceRoot}/.builds/embeddedcomputing.elf\",\n\"interface\": \"swd\",\n\"gdbPath\": \"/usr/bin/gdb-multiarch\",\n\"device\": \"at91samdXX\",\n\"serverArgs\": [\n\"-s\", \"/usr/share/openocd/\",\n\"-c\", \"adapter speed 2000\",\n\"-f\", \"target/at91samdXX.cfg\",\n],\n\"configFiles\": [\n\"interface/cmsis-dap.cfg\"\n],\n}\n// The extension uploads the executable to the MCU\n// \"preLaunchTask\": \"Make\"\n}\n]\n}\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/","title":"Manage the Seeed Xiao RP2040 boards","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install","title":"Install","text":"<p>For the Xiao board based on the RP2040,</p> <ul> <li>Please refer to Install the Raspberry Pi Pico RP2040 platform .</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#develop","title":"Develop","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#use-the-libraries-for-wifi","title":"Use the libraries for WiFi","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment Seeeduino Arduino 1.8 AVR 1.3.0 For Seeed and Seeed Grove Beginner Kit SAMD 1.8.0 For Xiao SAMD and Wio Terminal boards Realtek 3.0.7 For RTL8720DN on Wio Terminal board","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#visit-the-official-websites","title":"Visit the official websites","text":"Seeeduino IDE Arduino CLI or IDE Website https://www.seeedstudio.com Download http://wiki.seeed.cc/Seeed_Arduino_Boards Wiki http://wiki.seeed.cc/Seeeduino_v4.2/ Xiao RP2040 https://wiki.seeedstudio.com/XIAO-RP2040/ Forum https://forum.seeedstudio.com/","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install-the-seeed-xiao-esp32","title":"Install the Seeed Xiao ESP32","text":"<p>For the Xiao boards based on the ESP32,</p> <ul> <li>Please refer to Install the Espressif platform .</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install-the-seeed-wio-terminal","title":"Install the Seeed Wio Terminal","text":"<p>The Wio Terminal includes two MCUs: a SAMD51 Cortex-M4 MCU for general purpose, and an Ameba RTL8720DN for Wifi and Bluetooth radio.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install-the-samd-platform-for-the-wio-terminal-board","title":"Install the SAMD platform for the Wio Terminal board","text":"<ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install Seeeduino:samd\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install-the-firmware-and-libraries-for-wifi-and-bluetooth","title":"Install the firmware and libraries for WiFi and Bluetooth","text":"<p>The initial firmware of the RTL8720 radio of the Wio Terminal only provides WiFi capabilities.</p> <p>To use WiFi and Bluetooth, the Wio Terminal requires an update of the firmware and the installation of dedicated libraries.</p> <ul> <li> <p>Please follow the procedure Update the Wireless Core Firmware .</p> </li> <li> <p>Download and install the library Seeed_Arduino_rpcWiFi  .</p> </li> <li> <p>Download and install the library Seeed_Arduino_rpcBLE .</p> </li> <li> <p>Download and install the library Seeed_Arduino_rpcUnified .</p> </li> <li> <p>Download and install the library Seeed_Arduino_FreeRTOS .</p> </li> </ul> <p>The previous firmware based on AT-commands only provides WiFi capabilities.</p> <ul> <li> <p>Please follow the procedure RTL8720 AT-Command Structure Firmware .</p> </li> <li> <p>Download and install the library Seeed_Arduino_atWiFi .</p> </li> <li> <p>Download and install the library Seeed_Arduino_atWiFiClientSecure .</p> </li> <li> <p>Download and install the library Seeed_Arduino_atUnified .</p> </li> <li> <p>Download and install the library Seeed_Arduino_ESP-AT-library .</p> </li> <li> <p>Download and install the library Seeed-Arduino-FreeRTOS .</p> </li> <li> <p>Download and install the library Seeed_Arduino_mbedtls .</p> </li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install-the-ameba-rtl8720dn-platform-for-the-wio-terminal-board","title":"Install the Ameba RTL8720DN platform for the Wio Terminal board","text":"<p>Apart from the main SAMD51 MCU, the Seeed SAMD Wio Terminal board includes another MCU, RTL8720DN, in charge of WiFi and Bluetooth.</p> <p>To install the RTL8720DN of the Wio Terminal board,</p> <p><pre><code>arduino-cli core install realtek:AmebaD\n</code></pre></p> <ul> <li> <p>Download and install the supported versions of the Arduino IDE under the <code>/Applications</code> folder, as described in the section Install the Arduino platform .</p> </li> <li> <p>Launch it.</p> </li> <li> <p>Define the path of the sketchbook folder in the menu Arduino &gt; Preferences &gt; Sketchbook location.</p> </li> <li> <p>Avoid spaces in the name and path of the sketchbook folder.</p> </li> <li> <p>Follow the procedure Install additional boards on Arduino .</p> </li> <li> <p>Call the Boards Manager and check the Seeed SAMD boards are listed.</p> </li> </ul> <p></p> <p>If the Seeed boards aren\u2019t listed on the Boards Manager,</p> <ul> <li> <p>Open the Preferences.</p> </li> <li> <p>Add the following URL on a separate line, as described in section Add URLs for new boards .</p> </li> </ul> <p><pre><code>https://github.com/ambiot/ambd_arduino/raw/master/Arduino_package/package_realtek.com_amebad_index.json\n</code></pre></p> <ul> <li>Select the boards and click on Install.</li> </ul> <p>For more information on the installation process,</p> <ul> <li> <p>Please refer to the Update the Wireless Core Firmware - CLI Methods  page on the Seeed Studio website.</p> </li> <li> <p>Get the RTL8720 firmware command line utilities  on the Seeed Studio website.</p> </li> </ul> <p>Using the RTL8720DN requires a utility running on the SAMD51 to provide a bridge between the  RTL8720DN and the serial over USB.</p> <ul> <li> <p>Read How to Use Wio Terminal as RTL8720DN Dev Board  on the Seeed Studio website.</p> </li> <li> <p>Download the rtl8720_update  or WioTerminal_USB2Serial_Burn8720  on the Seeed Studio website.</p> </li> </ul> <ul> <li> <p>Ensure Arduino-CLI is installed.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install Seeeduino:avr\narduino-cli core install Seeeduino:nrf52\narduino-cli core install Seeeduino:samd\n</code></pre></p> <p> The installation of the Seeed platform is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <p>Warning</p> <p>Upload to this board hasn\u2019t been tested.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install-the-seeed-avr-platform","title":"Install the Seeed AVR platform","text":"<p>To install the Seeed AVR boards,</p> <ul> <li> <p>Download and install the supported versions of the Arduino IDE under the <code>/Applications</code> folder, as described in the section Install the Arduino platform .</p> </li> <li> <p>Launch it.</p> </li> <li> <p>Define the path of the sketchbook folder in the menu Arduino &gt; Preferences &gt; Sketchbook location.</p> </li> <li> <p>Avoid spaces in the name and path of the sketchbook folder.</p> </li> <li> <p>Follow the procedure Install additional boards on Arduino . Call the Boards Manager and check the Seeed AVR boards are listed.</p> </li> </ul> <p></p> <p>If the Seeed boards aren\u2019t listed on the Boards Manager,</p> <ul> <li> <p>Open the Preferences.</p> </li> <li> <p>Add the following URL on a separate line, as described in section Add URLs for new boards .</p> </li> </ul> <p><pre><code>https://raw.githubusercontent.com/Seeed-Studio/Seeed_Platform/master/package_seeeduino_boards_index.json\n</code></pre></p> <ul> <li>Select the boards and click on Install.</li> </ul> <p>For more information on the installation process,</p> <ul> <li>Please refer to the How to Add Seeed Boards to Arduino IDE  page on the Seeed Studio website.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#install-the-seeed-samd-platform","title":"Install the Seeed SAMD platform","text":"<p>The Seeed SAMD Xiao board includes the compact Xiao board and the IoT-enabled Wio Terminal.</p> <p>To install the Seeed SAMD platform,</p> <ul> <li> <p>Download and install the supported versions of the Arduino IDE under the <code>/Applications</code> folder, as described in the section Install the Arduino platform .</p> </li> <li> <p>Launch it.</p> </li> <li> <p>Define the path of the sketchbook folder in the menu Arduino &gt; Preferences &gt; Sketchbook location.</p> </li> <li> <p>Avoid spaces in the name and path of the sketchbook folder.</p> </li> <li> <p>Follow the procedure Install additional boards on Arduino .</p> </li> <li> <p>Call the Boards Manager and check the Seeed SAMD boards are listed.</p> </li> </ul> <p></p> <p>If the Seeed boards aren\u2019t listed on the Boards Manager,</p> <ul> <li> <p>Open the Preferences.</p> </li> <li> <p>Add the following URL on a separate line, as described in section Add URLs for new boards .</p> </li> </ul> <p><pre><code>https://raw.githubusercontent.com/Seeed-Studio/Seeed_Platform/master/package_seeeduino_boards_index.json\n</code></pre></p> <ul> <li>Select the boards and click on Install.</li> </ul> <p>For more information on the installation process,</p> <ul> <li>Please refer to the How to Add Seeed Boards to Arduino IDE  page on the Seeed Studio website.</li> </ul> <p>The boards package does not include the utilities for the UF2 upload.</p> <ul> <li>Please install them from the Adafruit Feather nRF52  package.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#develop_1","title":"Develop","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#use-the-libraries-for-wifi_1","title":"Use the libraries for WiFi","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#use-the-libraries-for-bluetooth_1","title":"Use the libraries for Bluetooth","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>USER_LIBS_LIST = ArduinoBLE\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#use-the-libraries-for-sd_1","title":"Use the libraries for SD","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#check-the-tests_1","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment Seeeduino Arduino 1.8 AVR 1.3.0 For Seeed and Seeed Grove Beginner Kit SAMD 1.8.0 For Xiao SAMD and Wio Terminal boards Realtek 3.0.7 For RTL8720DN on Wio Terminal board","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_RP2040/#visit-the-official-websites_1","title":"Visit the official websites","text":"Seeeduino IDE Arduino CLI or IDE Website https://www.seeedstudio.com Download http://wiki.seeed.cc/Seeed_Arduino_Boards Wiki http://wiki.seeed.cc/Seeeduino_v4.2/ Xiao M0 https://wiki.seeedstudio.com/Seeeduino-XIAO/ Xiao RP2040 https://wiki.seeedstudio.com/XIAO-RP2040/ Xiao nRF52840 https://wiki.seeedstudio.com/XIAO_BLE/ Xiao ESP32C3 https://wiki.seeedstudio.com/XIAO_ESP32C3_Getting_Started/ Xiao ESP32S3 https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/ Wio Terminal https://wiki.seeedstudio.com/Wio-Terminal-Getting-Started/ Forum https://forum.seeedstudio.com/","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_mbed/","title":"Manage the Seeed Xiao nRF52840 Mbed-OS boards","text":"<p>The Seeed Xiao nRF52840 Mbed-OS platform includes two boards: the Xiao nRF52840 and the Xiao nRF52840 Sense with additional sensors.</p> <p>Warning</p> <p>The software for the Seeed Xiao nRF51840 board is not stable enough. Support has been put on hold.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/","title":"Manage the Seeed Xiao nRF52840 boards","text":"<p>The Seeed platform includes two main lines of boards: the compact Xiao and the Wio Terminal.</p> <p>Warning</p> <p>The software for the Seeed Xiao nRF51840 board is not stable enough. Support has been put on hold.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#install-the-seeed-xiao-nrf52840","title":"Install the Seeed Xiao nRF52840","text":"<p>To install the Seeed Xiao nRF52840 board,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json```\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install Seeeduino:nrf52@1.1.1\n</code></pre></p> <p>Warning</p> <p>Release <code>1.1.3</code> does not work. Use release <code>1.1.1</code> instead.</p> <p>To install the library for Bluetooth, run</p> <p><pre><code>arduino-cli lib install ArduinoBLE\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#develop","title":"Develop","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#use-the-built-in-leds","title":"Use the built-in LEDs","text":"<p>Built-in LEDs use reverse logic.</p> <ul> <li><code>LOW</code> to turn them on;</li> <li><code>HIGH</code> to turn them off.</li> </ul>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#use-the-libraries-for-serial-port","title":"Use the libraries for Serial port","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries for the serial port.</li> </ul> <p><pre><code>APP_LIBS_LIST += Adafruit_TinyUSB_Arduino\n</code></pre></p> <ul> <li>Add to the main sketch</li> </ul> <p><pre><code>#include \"Adafruit_TinyUSB.h\"\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#use-the-libraries-for-imu","title":"Use the libraries for IMU","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries for the LSM6DS3.</li> </ul> <p><pre><code>USER_LIBS_LIST = Seeed_Arduino_LSM6DS3\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#use-the-libraries-for-microphone","title":"Use the libraries for microphone","text":"<ul> <li>Add to the main sketch.</li> </ul> <p><pre><code>USER_LIBS_LIST = Seeed_Arduino_Mic\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#use-the-libraries-for-bluetooth","title":"Use the libraries for Bluetooth","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>USER_LIBS_LIST = ArduinoBLE\n</code></pre></p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#debug","title":"Debug","text":"<p>Critical</p> <p>Using the Xiao M0 as DAP-Link probe does not work. Use instead the Segger J-Link probe.</p>","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment Seeeduino Arduino 1.8 AVR 1.3.0 For Seeed and Seeed Grove Beginner Kit SAMD 1.8.0 For Xiao SAMD and Wio Terminal boards Realtek 3.0.7 For RTL8720DN on Wio Terminal board","tags":["On hold"]},{"location":"Boards/Seeed/Xiao_nRF/#visit-the-official-websites","title":"Visit the official websites","text":"Seeeduino IDE Arduino CLI or IDE Website https://www.seeedstudio.com Download http://wiki.seeed.cc/Seeed_Arduino_Boards Wiki http://wiki.seeed.cc/Seeeduino_v4.2/ Xiao nRF52840 https://wiki.seeedstudio.com/XIAO_BLE/ Forum https://forum.seeedstudio.com/","tags":["On hold"]},{"location":"Boards/Specific/Specific-1/","title":"Upload to specific boards","text":"<p>Some sections in this chapter require embedXcode+.</p>"},{"location":"Boards/Specific/Specific-1/#select-your-platform","title":"Select your platform","text":"<p>The following boards and programmers require specific procedures for uploading the sketch:</p> Platform Boards Adafruit Trinket and Pro Trinket , Feather M0 and M4 , Feather nRF52832 and nRF52840  using J-Link Arduino Arduino Leonardo , Arduino Y\u00fan  using Ethernet or WiFi, Arduino M0 Pro , Arduino Zero Espressif ESP8266 NodeMCU  using WiFi, ESP32-CAM , ESP32 boards  using ESP-Prog, ESP32 boards  using WiFi LaunchPad LaunchPad boards  using XDS110, LaunchPad C2000 , LaunchPad CC3200 WiFi , LaunchPad CC3220 WiFi , LaunchPad MSP430F5529 and MSP430FR5969 Microsoft Microsoft Azure IoT DevKit RasPiArduino Raspberry Pi Seeeduino Xiao M0 and Wio Terminal , Wio Terminal RTL8720DN MCU Teensy Teensy 3.x and 4.0 <p>The next section details the procedure to Restore initial mode on specific boards .</p>"},{"location":"Boards/Specific/Specific-2/","title":"Restore initial mode on specific boards","text":"<p>Some sections in this chapter require embedXcode+.</p> <p>This section provides the procedures for restoring the initial mode on specific boards.</p> <ul> <li> <p>Burn the boot-loader on the Adafruit Feather M0 boards  to use the standard USB uploader after the programmer,</p> </li> <li> <p>Upload Python to the Adafruit Feather M4 boards  to use the standard USB uploader after the programmer,</p> </li> <li> <p>Burn the boot-loader on the Arduino boards  to use the standard USB uploader after the programmer,</p> </li> <li> <p>Reset the BBC micro:bit board  to factory defaults.</p> </li> <li> <p>Burn the boot-loader on the chipKIT boards  to use the standard USB uploader after the programmer,</p> </li> <li> <p>Change the jumpers for the LaunchPad CC3200 WiFi  board.</p> </li> <li> <p>Restore the initial WiFi mode with AT commands after using the ESP8266 board  with the Wiring / Arduino framework, and</p> </li> <li> <p>Reflash the RTL8720DN MCU as a network-processor for the Wio Terminal board </p> </li> </ul>"},{"location":"Boards/Specific/Specific-2/#burn-the-boot-loader-for-adafruit-feather-m0-boards","title":"Burn the boot-loader for Adafruit Feather M0 boards","text":"<p> The programmer may erase all the flash of the Adafruit Feather M0 boards, including the boot-loader. In such a case, you need to burn the boot-loader again to upload a sketch through the standard USB connection.</p> <p>To burn the boot-loader again,</p> <ul> <li> <p>Download the boot-loader file from the Restoring Boot-Loader \u2013 Feather M0 or Others  page at the Adafruit website.</p> </li> <li> <p>Unzip <code>featherm0bootloader_160305.hex from featherm0bootloader_160305.zip</code>.</p> </li> <li> <p>Download and install the J-Link Software and Documentation Pack for Linux  version 6.00g or later from the Segger website.</p> </li> <li> <p>Follow the procedure detailed at section Install utilities for Segger debugger .</p> </li> <li> <p>Open a Terminal window and launch JLinkExe.</p> </li> </ul> <p><pre><code>JLinkExe\n</code></pre></p> <ul> <li>Connect and define the interface, device and speed.</li> </ul> <p><pre><code>connect\nselectinterface swd\ndevice ATSAMD21G18\nspeed 400080\n</code></pre></p> <p>Upload the boot-loader and quit.</p> <p><pre><code>loadfile ~/Downloads/featherm0bootloader_160305.hex\nexit\n</code></pre></p> <p>You can now upload the sketch to the Adafruit Feather M0 board using the standard USB connection again.</p> <p>For more information,</p> <ul> <li>Please refer to the Restoring Boot-Loader \u2013 Feather M0 or Others  page at the Adafruit website.</li> </ul>"},{"location":"Boards/Specific/Specific-2/#upload-python-to-the-adafruit-feather-m4-boards","title":"Upload Python to the Adafruit Feather M4 boards","text":"<p> To upload Python to the Adafruit Feather M4 boards,</p> <ul> <li>Follow the procedure Set up CircuitPython Quick Start!   at the Adafruit website.</li> </ul> <p>For more information,</p> <ul> <li>Please refer to Download the latest version of CircuitPython for this board via CircuitPython.org .</li> </ul>"},{"location":"Boards/Specific/Specific-2/#burn-the-boot-loader-after-using-a-programmer-for-arduino-boards","title":"Burn the boot-loader after using a programmer for Arduino boards","text":"<p> The programmer erases all the flash, including the boot-loader.</p> <p>After having used a programmer with the Arduino boards, you need to burn the boot-loader again to upload a sketch through the standard USB connection.</p>"},{"location":"Boards/Specific/Specific-2/#restore-boot-loader-for-avr-based-arduino-boards","title":"Restore Boot-Loader for AVR-Based Arduino Boards","text":"<p>To burn the boot-loader on AVR-based Arduino boards again,</p> <ul> <li> <p>Launch the Arduino IDE.</p> </li> <li> <p>Select the board, here the <code>Arduino Uno</code> board.</p> </li> </ul> <p></p> <ul> <li>Select the programmer, here the <code>USBtinyASP</code> programmer.</li> </ul> <p></p> <ul> <li>Click on Burn Boot-Loader.</li> </ul> <p></p> <p>You can now upload the sketch to the board using the standard USB connection again.</p> <p>For more information,</p> <ul> <li>Please refer to the Boot-Loader Development  page at the Arduino website.</li> </ul>"},{"location":"Boards/Specific/Specific-2/#change-boot-loader-for-avr-based-arduino-boards","title":"Change boot-loader for AVR-based Arduino boards","text":"<p>The same procedure applies for changing the boot-loader. For example, for using the MiniCore boot-loader on the Arduino Uno board:</p> <ul> <li> <p>Launch the standard Arduino IDE.</p> </li> <li> <p>Add the reference to Arduino, as per the procedure Add URLs for new boards .</p> </li> </ul> <p><pre><code>https://mcudude.github.io/MiniCore/package_MCUdude_MiniCore_index.json\n</code></pre></p> <ul> <li> <p>Download and install the MiniCore package, as per the procedure Install additional boards on Arduino .</p> </li> <li> <p>Flash the MiniCore boot-loader on the Arduino Uno with USBtinyISP or similar.</p> </li> </ul> <p>On embedXcode,</p> <ul> <li>Edit the Arduino Uno board or the My Board configuration file, and add</li> </ul> <p><pre><code>BOOTLOADER = minicore\n</code></pre></p> <ul> <li>Select it.</li> </ul> <p>For more information on the MiniCore boot-loader,</p> <ul> <li>Please refer to the MiniCore  page.</li> </ul>"},{"location":"Boards/Specific/Specific-2/#restore-boot-loader-for-arduino-zero","title":"Restore Boot-Loader for Arduino Zero","text":"<p>The two boards, Arduino Zero and Arduino M0 Pro, are very similar but require different procedures.</p> <p>For the Arduino M0 Pro board,</p> <ul> <li>Please refer to the Restore boot-loader for Arduino M0 Pro  procedure.</li> </ul> <p>To burn the boot-loader on the Arduino Zero board again,</p> <ul> <li> <p>Launch the Arduino IDE.</p> </li> <li> <p>Connect the board using the USB programming port.</p> </li> <li> <p>Call the from the menu Tools &gt; Board menu and select the board, here Arduino Zero (programming port).</p> </li> </ul> <p></p> <ul> <li>Call the Tools &gt; Programmer menu and select the programmer, here Atmel EDBG.</li> </ul> <p></p> <ul> <li>Click on Burn Boot-Loader.</li> </ul> <p></p> <p>For more information,</p> <ul> <li>Please refer to the Restoring Boot-Loader \u2013 Arduino Zero  page at the Adafruit website.</li> </ul> <p>You can now upload the sketch to the board using the standard USB connection again.</p>"},{"location":"Boards/Specific/Specific-2/#restore-boot-loader-for-arduino-m0-pro","title":"Restore boot-loader for Arduino M0 Pro","text":"<p>To burn the boot-loader on the M0 Pro board again, a first option relies on the Arduino IDE, very similar to the Restore Boot-Loader for Arduino Zero procedure.</p> <ul> <li> <p>Launch the Arduino IDE.</p> </li> <li> <p>Connect the board using the USB programming port.</p> </li> <li> <p>Call the from the menu Tools &gt; Board menu and select the board, here Arduino M0 Pro (programming port).</p> </li> <li> <p>Call the Tools &gt; Programmer menu and select the programmer, here Atmel EDBG Programming Port.</p> </li> <li> <p>Click on Burn Boot-Loader.</p> </li> </ul> <p>For more information,</p> <ul> <li>Please refer to the Burning the Boot-Loader with Arduino IDE  page at the Arduino website.</li> </ul> <p>In case this first option fails. try and use the Atmel Studio, available on Windows only.</p> <ul> <li> <p>Launch the Atmel Studio IDE.</p> </li> <li> <p>Follow the procedure available at Burning the Boot-Loader with Atmel Studio  page.</p> </li> </ul> <p>For more information,</p> <ul> <li>Please refer to the Burn the Boot-Loader Using Atmel Studio  page at the Arduino website.</li> </ul> <p>Depending on the version of OpenOCD, a bug may prevent from restoring the boot-loader. The bug is referenced under issue 137  on the Arduino Git repository. In that case,</p> <ul> <li>Follow this procedure , also mentioned in this thread  on the Arduino forum.</li> </ul> <p>You can now upload the sketch to the board using the standard USB connection again.</p>"},{"location":"Boards/Specific/Specific-2/#reset-the-bbc-microbit-board-to-factory-default","title":"Reset the BBC micro:bit board to factory default","text":"<p> To reset the BBC micro:bit board to the factory default with the out-of-the-box demonstration program,</p> <ul> <li> <p>Download the <code>OutOfBoxExperience-v2.hex</code> file from the Reset the micro:bit to factory defaults  page on the BBC micro:bit website.</p> </li> <li> <p>Follow the procedure How do I transfer my code onto the micro:bit via USB  on the BBC micro:bit website.</p> </li> </ul>"},{"location":"Boards/Specific/Specific-2/#burn-the-boot-loader-after-using-a-programmer-on-chipkit-boards","title":"Burn the boot-loader after using a programmer on chipKIT boards","text":"<p> On the chipKIT boards, the programmer erases all the flash, including the boot-loader.</p> <p>After having used the chipKIT programmer, you need to burn to boot-loader again in order to upload a sketch through the standard USB connection.</p> <p>To burn the boot-loader again,</p> <ul> <li> <p>Download and unzip the boot-loaders from the GitHub repository PIC32 AVRdude Boot-Loaders .</p> </li> <li> <p>Connect the programmer to the main computer and the chipKIT board.</p> </li> <li> <p>Launch mplab_ipe.</p> </li> </ul> <p></p> <ul> <li>Select the MCU corresponding to the board.</li> </ul> Board MCU Uno32 PIC32MX320F128H Max32 PIC32MX795F512L uC32 PIC32MX340F512H <ul> <li>Select the <code>.hex</code> file for the boot-loader. Make sure you\u2019ve selected the relevant boot-loader, here the <code>PIC32-avrdude-bootloader-master/bootloaders/chipKIT-Bootloaders/dist/Uno32/production/chipKIT-Bootloaders.production.hex</code> for the chipKIT Uno32 board.</li> </ul> <p></p> <ul> <li> <p>Press Program.</p> </li> <li> <p>If you wish to verify, press Verify.</p> </li> <li> <p>Remove the programmer and connect the board to the main computer.</p> </li> </ul> <p>You can upload the sketch to the board using the standard USB connection again.</p> <p>For more information,</p> <ul> <li>Please refer to the document Debugging chipKIT\u2122 Sketches with MPLAB\u00ae X IDE .</li> </ul> <p>This procedure also applies for updating the boot-loader.</p>"},{"location":"Boards/Specific/Specific-2/#restore-initial-wifi-mode-on-esp8266-boards","title":"Restore initial WiFi mode on ESP8266 boards","text":"<p> The ESP8266 boards act as WiFi peripheral with AT commands as well as fully programmable boards with the Arduino framework.</p> <p>However, once the boards have been used with the Wiring / Arduino framework, the WiFi peripheral initial mode is no longer available. It needs to be restored.</p> <p>To do so,</p> <ul> <li> <p>Connect GPIO0 to ground to enter program mode.</p> </li> <li> <p>Plug the board in.</p> </li> <li> <p>Download the ESP8266 SDK  from the Download section of the Espressif forum</p> </li> <li> <p>Open the <code>.zip</code> file.</p> </li> <li> <p>Check the ReadMe file: it provides the list of the binary files to upload and the addresses to target.</p> </li> </ul> <p><pre><code>download:\nboot_v1.2+.bin     0x00000\nuser1.512.new.bin  0x01000\nblank.bin          0x3e000 &amp; 0x7e000\n</code></pre></p> <ul> <li>Locate on the sub-folders the different binaries mentioned on the <code>ReadMe</code> file.</li> </ul> <p></p> <ul> <li>Open a Terminal window and launch the upload command.</li> </ul> <p><pre><code>esptool.py --port /dev/tty.usbserial-12345678 --baud 115200 write_flash 0x00000 esp_iot_sdk_v1.0.0/bin/boot_v1.2.bin 0x01000 esp_iot_sdk_v1.0.0/bin/at/user1.512.new.bin 0x3e000 esp_iot_sdk_v1.0.0/bin/blank.bin 0x7e000 esp_iot_sdk_v1.0.0/bin/blank.bin\n</code></pre></p> <ul> <li> <p>In case the binary files and target addresses are different, adapt the upload command accordingly.</p> </li> <li> <p>Power-cycle the ESP8266 board.</p> </li> </ul> <p>The ESP8266 can now be used again as a WiFi peripheral with AT commands.</p> <p>For more information,</p> <p>Please refer to the procedure described on the Espressif  support forum.</p>"},{"location":"Boards/Specific/Specific-2/#reflash-the-rtl8720dn-mcu-as-a-network-processor-for-the-wio-terminal-board","title":"Reflash the RTL8720DN MCU as a network-processor for the Wio Terminal board","text":"<p>To reflash the RTL8720DN MCU back as a network-processor on the Wio Terminal board,</p> <ul> <li> <p>Please refer to the Update the Wireless Core Firmware - CLI Methods  page on the Seeed Studio website.</p> </li> <li> <p>Get the RTL8720 firmware command line utilities  on the Seeed Studio website.</p> </li> </ul>"},{"location":"Boards/Specific/Upload/","title":"Upload","text":""},{"location":"Boards/Specific/Upload/#upload-to-esp32-cam-board","title":"Upload to ESP32-CAM board","text":"<p> The ESP32-CAM board comes with no built-in programmer and features a unique Reset button.</p> <p>Flashing the board requires an external programmer and a specific procedure to put the board in programming mode.</p> <p> Example of connection with a FTDI programmer</p> <p>Proceed as follow:</p> <ul> <li>Connect the <code>+3.3V</code>, <code>Ground</code>, <code>U0R</code> and <code>U0T</code> pins of the board to the corresponding pins of the external programmer.</li> <li>Disconnect the external programmer from the USB port.</li> <li>Connect pin <code>IO0</code> to ground.</li> <li>Connect the board to the USB port.</li> <li>Press Reset.</li> <li>Upload the sketch.</li> <li>Disconnect pin <code>IO0</code> from ground.</li> <li>Press Reset to run the executable.</li> </ul> <p>In case the following message is displayed on the serial console,</p> <p><pre><code>Brownout detector was triggered\n</code></pre></p> <ul> <li>Power the ESP32 board through the +5V pin instead of the +3.3V pin.</li> </ul> <p>The ESP32 board requires up to 400 mA and may exceed what a standard USB port can deliver.</p> <ul> <li>Power the ESP32 board with an external power supply.</li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-launchpad-boards-with-xds110","title":"Upload to LaunchPad boards with XDS110","text":"<p> The following procedure is valid for boards featuring an XDS110 programmer-debugger, as long as each board has a unique serial number. The unique serial number is used for identification to upload the executable and debug.</p> <p>Most of the LaunchPad boards of the SimpleLink range include an XDS110 programmer-debugger. The procedure has been tested successfully with the MSP432, CC26xx and CC13xx LaunchPad boards. It is especially handy for projects involving a server and one or many clients.</p> <p>Note</p> <p>In order to ensure support for the external USB XDS110 debug probe, speed is limited to 1500 kHz.</p> <p>In the example below, let\u2019s consider two projects for two CC1352 LaunchPad boards: one is a sensor node and the other the central hub.</p> <ul> <li> <p>Connect the first board, here the sensor node.</p> </li> <li> <p>Open a Terminal window and launch <code>lsusb</code>, a utility that lists the connected USB devices.</p> </li> </ul> <p><pre><code>~/.emCode/Tools/Utilities/lsusb\nBus 020 Device 007: ID 0451:bef3 Texas Instruments XDS110 (02.03.00.18) Embed with CMSIS-DAP  Serial: L41009S9\n</code></pre></p> <ul> <li> <p>Note the serial number for the first board, here <code>L41009S9</code> for the sensor.</p> </li> <li> <p>Connect the second board, here the central hub.</p> </li> <li> <p>Perform the same <code>lsusb</code>.</p> </li> </ul> <p><pre><code>~/Library/embedXcode/Tools/Utilities/lsusb\nBus 020 Device 007: ID 0451:bef3 Texas Instruments XDS110 (02.03.00.18) Embed with CMSIS-DAP  Serial: L41009S9\nBus 020 Device 006: ID 0451:bef3 Texas Instruments XDS110 (02.03.00.18) Embed with CMSIS-DAP  Serial: L41009PJ\n</code></pre></p> <ul> <li>Note the serial number for the second board, here <code>L41009PJ</code> for the central hub.</li> </ul> <p>In the example, the sensor node is identified by serial <code>L41009S9</code> and the central hub by serial <code>L41009PJ</code>.</p> <ul> <li> <p>Create two projects, one for the sensor node and another for the central hub.</p> </li> <li> <p>Edit the main <code>Makefile</code> or the board configuration file of each project, here <code>LaunchPad CC1312 EMT.xcconfig</code>, and set the uploader to <code>xds110</code>.</p> </li> </ul> <p><pre><code>UPLOADER = xds110\n</code></pre></p> <p>On the project for the sensor node board,</p> <ul> <li> <p>Run the <code>All</code> or <code>Fast</code>  target.</p> </li> <li> <p>Select <code>L41009S9</code> on the dialogue window.</p> </li> </ul> <p></p> <ul> <li>Click OK.</li> </ul> <p>To make the selection permanent,</p> <ul> <li> <p>Edit the main <code>Makefile</code> or the board configuration file of the project, here <code>LaunchPad CC1312 EMT.xcconfig</code>, for the sensor node board.</p> </li> <li> <p>Set the serial number to <code>L41009S9</code>.</p> </li> </ul> <p><pre><code>UPLOADER = xds110\nXDS110_SERIAL = L41009S9\n</code></pre></p> <p>On the project for the central hub board,</p> <ul> <li> <p>Run the <code>All</code> or <code>Fast</code> target for each project.</p> </li> <li> <p>Select <code>L41009PJ</code> on the dialogue window.</p> </li> </ul> <p></p> <ul> <li>Click OK.</li> </ul> <p>To make the selection permanent,</p> <ul> <li> <p>Edit the main <code>Makefile</code> or the board configuration file of the project, here <code>LaunchPad CC1312 EMT.xcconfig</code>, for the sensor node board.</p> </li> <li> <p>Set the serial number to <code>L41009PJ</code>.</p> </li> </ul> <p><pre><code>UPLOADER = xds110\nXDS110_SERIAL = L41009PJ\n</code></pre></p> <p>If no board corresponds to the serial number, an error message is displayed.</p> <p><pre><code>XDS110 L41009PJ not found among connected L41009S9 M4111016 E0071009\n</code></pre></p> <p>If two LaunchPad boards with an XDS110 programmer-debugger share the same serial number, the serial number of one board needs to be changed to make it unique.</p> <p>To change the serial number of one board,</p> <ul> <li> <p>Disconnect all boards except the board with the serial number to change.</p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run the commands</p> </li> </ul> <p><pre><code>xdsdfu -m\nxdsdfu -s 12345678 -r\n</code></pre> Here, <code>12345678</code> is the new serial number.</p> <ul> <li>Check with</li> </ul> <p><pre><code>xdsdfu -e\n</code></pre></p> <p>For more information on the XDS110 programmer-debugger and related software, and on how to change the serial number,</p> <ul> <li>Please refer to the XDS110 Debug Probe User\u2019s Guide .</li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-launchpad-c2000","title":"Upload to LaunchPad C2000","text":"<p> The LaunchPad C2000 boards use a new upload procedure with Energia 17.</p>"},{"location":"Boards/Specific/Upload/#prepare-launchpad-c2000-f28027","title":"Prepare LaunchPad C2000 F28027","text":"<p>Proceed as follow:</p> <ul> <li> <p>Unplug the LaunchPad C2000 F28027 board.</p> </li> <li> <p>For the LaunchPad C2000 F28027, configure <code>S4 SERIAL</code> on.</p> </li> </ul> <p></p> <ul> <li>Configure <code>S1 BOOT</code> on-on-on or up-up-up.</li> </ul> <p></p> <ul> <li> <p>Plug the LaunchPad C2000 board in.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul> <p>The project is uploaded into flash.</p>"},{"location":"Boards/Specific/Upload/#prepare-launchpad-c2000-f28069","title":"Prepare LaunchPad C2000 F28069","text":"<p>Proceed as follow:</p> <ul> <li> <p>Unplug the LaunchPad C2000 F28069 board.</p> </li> <li> <p>Remove jumper <code>J6</code> and place jumper <code>J7</code>.</p> </li> </ul> <p></p> <p>Configure <code>S1 BOOT</code> on-on-on or up-up-up.</p> <p></p> <ul> <li> <p>Plug the LaunchPad C2000 board in.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul> <p>The project is uploaded into flash.</p>"},{"location":"Boards/Specific/Upload/#prepare-launchpad-c2000-f28069_1","title":"Prepare LaunchPad C2000 F28069","text":"<p>Proceed as follow:</p> <ul> <li> <p>Unplug the LaunchPad C2000 F28069 board.</p> </li> <li> <p>Configure <code>S1 BOOT</code> on-on-on or up-up-up.</p> </li> </ul> <p></p> <ul> <li> <p>Plug the LaunchPad C2000 board in.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul> <p>The project is uploaded into flash.</p>"},{"location":"Boards/Specific/Upload/#upload-to-launchpad-cc3200-wifi","title":"Upload to LaunchPad CC3200 WiFi","text":"<p> The LaunchPad CC3200 WiFi board requires a specific hardware configuration.</p> <p>For a normal upload, proceed as follow:</p> <ul> <li> <p>Unplug the LaunchPad CC3200 WiFi board..</p> </li> <li> <p>Remove the <code>JTAG J8</code> jumper and the <code>SPO2</code> jumper.</p> </li> <li> <p>Place a wire from <code>JTAG J8</code> (emulator side) to <code>SOP 2</code> (CC3200) side.</p> </li> </ul> <p> Uploading requires <code>TCK</code> connected to <code>SOP 2</code> </p> <ul> <li> <p>Plug the LaunchPad CC3200 WiFi board.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul> <p>The project is uploaded into flash and is kept even if the power is disconnected.</p> <p>For a debugging session, proceed as follow:</p> <ul> <li> <p>Unplug the LaunchPad CC3200 WiFi board..</p> </li> <li> <p>Remove the wire from <code>JTAG J8</code> (emulator side) to <code>SOP 2</code> (CC3200) side.</p> </li> <li> <p>Place the <code>JTAG J8</code> jumper.</p> </li> <li> <p>Place the <code>SOP 2</code> jumper.</p> </li> </ul> <p> Debugging requires <code>TCK</code> and <code>SOP 2</code> jumpers placed on</p> <ul> <li> <p>Plug the LaunchPad CC3200 WiFi board.</p> </li> <li> <p>Launch the target Debug.</p> </li> </ul> <p>The project is uploaded into SRAM and is lost in case the power is disconnected.</p>"},{"location":"Boards/Specific/Upload/#upload-to-launchpad-cc3220-wifi","title":"Upload to LaunchPad CC3220 WiFi","text":"<p> The LaunchPad CC3220S and CC3220SF WiFi boards require a specific hardware and software configuration.</p> <p>For a normal upload, proceed as follow:</p> <ul> <li> <p>Unplug the LaunchPad CC3220 WiFi board..</p> </li> <li> <p>Ensure only the <code>SOP1</code> jumper is shorted.</p> </li> <li> <p>Download and install the Uniflash Standalone Flash Tool for TI Micro-Controllers (MCU), Sitara Processors and SimpleLink Devices  from Texas Instruments .</p> </li> <li> <p>Make sure to select release 4, as previous releases do not support the CC3220.</p> </li> <li> <p>Connect the LaunchPad to the computer.</p> </li> </ul> <p></p> <ul> <li>Open Uniflash and select the <code>CC3220SF-LAUNCHXL</code> from the list of devices.</li> </ul> <p></p> <ul> <li>Click Start Image Creator.</li> </ul> <p></p> <ul> <li> <p>Click New Project</p> </li> <li> <p>Give the project a name, for example <code>CC3220 Development</code>.</p> </li> <li> <p>Select <code>CC3220SF</code> from the Device Type drop-down list.</p> </li> <li> <p>Set Device Mode to Develop.</p> </li> </ul> <p></p> <ul> <li> <p>Click Create Project.</p> </li> <li> <p>Click the Connect button.</p> </li> <li> <p>Under General &gt; Settings, make sure Image mode is set to <code>Development</code>.</p> </li> </ul> <p></p> <ul> <li>Click the Generate Image button, pictured with a flame. Sometimes, this button is not active. In that case, select the Create Image button instead.</li> </ul> <p></p> <ul> <li>Click Program Image (Create &amp; Program).</li> </ul> <p>The LaunchPad CC3220 should be ready for uploading a sketch to. Keep in mind the sketch resides in RAM and is lost if the power is disconnected.</p> <ul> <li>Once done, launch Energia and program the CC3220SF with the blinky sketch.</li> </ul> <p>If upload fails, perform the same operation with Uniflash but on Windows.</p> <p>For more information,</p> <ul> <li>Please refer to UniFlash v4 Quick Guide .</li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-launchpad-msp430f5529-and-msp430fr5969","title":"Upload to LaunchPad MSP430F5529 and MSP430FR5969","text":"<p> The LaunchPad MSP430F5529 requires Energia release 10 and the LaunchPad MSP430FR5969 the release 12.</p> <p>Some versions of the LaunchPad MSP430F5529 and MSP430FR5969 may require an update of the firmware.</p> <p>To do so,</p> <ul> <li> <p>Download Energia release 14  or later.</p> </li> <li> <p>Launch Energia.</p> </li> <li> <p>Create a new basic sketch, for example the <code>blinky</code> sketch.</p> </li> <li> <p>Select the board LaunchPad with MSP430F5529 or LaunchPad with MSP430FR5969</p> </li> <li> <p>Upload the sketch to the LaunchPad.</p> </li> </ul> <p>If the firmware needs to be updated, a window pops-up.</p> <p></p> <p>In that case, follow the instructions.</p> <ul> <li>Call the menu Tools &gt; Update programmer.</li> </ul> <p></p> <ul> <li> <p>Check that the upload of the sketch works correctly.</p> </li> <li> <p>If necessary, repeat the update of the programmer.</p> </li> <li> <p>Close Energia.</p> </li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-microsoft-azure-iot-devkit","title":"Upload to Microsoft Azure IoT DevKit","text":"<p> The Microsoft Azure IoT DevKit offers different options for uploading the sketch to the board.</p>"},{"location":"Boards/Specific/Upload/#upload-to-microsoft-azure-iot-devkit-through-usb-port","title":"Upload to Microsoft Azure IoT DevKit Through USB Port","text":"<p>Proceed as follow:</p> <ul> <li> <p>Connect the Microsoft Azure IoT DevKit board to the computer.</p> </li> <li> <p>Select the <code>Microsoft IoT DevKit (USB)</code> board.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-microsoft-azure-iot-devkit-through-mass-storage-device","title":"Upload to Microsoft Azure IoT DevKit Through Mass Storage Device","text":"<p>Proceed as follow:</p> <ul> <li>Connect the Microsoft Azure IoT DevKit module to the computer.</li> </ul> <p>A new volume called <code>AZ3166</code> appears.</p> <p></p> <ul> <li> <p>Select the <code>Microsoft IoT DevKit (MSD)</code> board.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul> <p>During the upload process, a warning notification may appear.    </p> <ul> <li>Click on Close to close the notification.</li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-nodemcu-10-board","title":"Upload to NodeMCU 1.0 board","text":"<p> The NodeMCU 1.0 board requires a specific procedure.</p> <p>Proceed as follow:</p> <p>Plug the NodeMCU 1.0 board in.</p> <ul> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> <li> <p>Wait for the message window:</p> </li> </ul> <p></p> <ul> <li> <p>Press the Reset and <code>FLASH</code> buttons on the board.</p> </li> <li> <p>Release the Reset button first.</p> </li> <li> <p>Release then the <code>FLASH</code> button.</p> </li> </ul> <p></p> <ul> <li>Click on OK.</li> </ul> <p></p> <p>For more information,</p> <ul> <li>Please refer to the ESP8266 Community Forum .</li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-esp8266-nodemcu-boards-using-wifi","title":"Upload to ESP8266 NodeMCU boards using WiFi","text":"<p> Although the ESP8266 and NodeMCU boards require no specific procedure for an over-the-air upload, the WiFi network needs to be installed and configured successfully before any upload.</p> <p>Over-the-air upload requires that a sketch based on the ArduinoOTA library has been installed previously and is currently running. Otherwise,</p> <ul> <li>Build and upload the <code>BasicOTA</code> example using the Arduino IDE.</li> </ul> <p>Before uploading, please</p> <ul> <li> <p>Check that the router has discovered the NoteMCU board and note the IP address.</p> </li> <li> <p>It is recommended to proceed with a test of the WiFi connection. Either try pinging the board on the Terminal, or uploading a sketch from the Arduino IDE.</p> </li> </ul>"},{"location":"Boards/Specific/Upload/#check-the-running-sketch","title":"Check the running sketch","text":"<p>The over-the-air process is managed by the sketch itself, based on the <code>ArduinoOTA</code> library.</p> <p>If the <code>ArduinoOTA</code> object isn\u2019t running,</p> <ul> <li> <p>Build the <code>BasicOTA</code> example.</p> </li> <li> <p>Upload using an USB connection as per section Upload to NodeMCU 1.0 board .</p> </li> </ul> <p>Note</p> <p>The sketch requires twice its size.</p>"},{"location":"Boards/Specific/Upload/#check-the-wifi-connection","title":"Check the WiFi connection","text":"<p>To identify the IP addresses of the ESP8266 or NodeMCU board,</p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run the following command.</p> </li> </ul> <p><pre><code>arp -a\nesp_a1b2c3 (192.168.1.209) at 12:ef:34:a1:b2:c3 on en0 ifscope [ethernet]\n</code></pre></p> <p>The address <code>192.168.1.209</code> gives access to the board.</p> <ul> <li>Test the board is connected with ping.</li> </ul> <p><pre><code>ping 192.168.1.209\n</code></pre></p>"},{"location":"Boards/Specific/Upload/#enter-ip-address","title":"Enter IP address","text":"<p>During the first compilation, emCode looks for the ESP8266 or NodeMCU board.</p> <p>If the ESP8266 or NodeMCU board isn\u2019t found on the network, a window asks for the IP address.</p> <p></p> <ul> <li> <p>Enter the IP address of the ESP8266 or NodeMCU board.</p> </li> <li> <p>Click on OK to validate or Cancel to cancel.</p> </li> </ul> <p>When validated, the IP address is saved on the main <code>Makefile</code> of the project.</p> <p>The IP address is only asked once.</p> <ul> <li> <p>To erase the IP address, just delete the whole line.</p> </li> <li> <p>To edit the IP address, just change the value of the macro <code>SSH_ADDRESS</code>.</p> </li> </ul> <p>Password isn\u2019t implemented.</p>"},{"location":"Boards/Specific/Upload/#upload-wiring-arduino-sketch","title":"Upload Wiring / Arduino sketch","text":"<p> Once the checks have been performed successfully, proceed as follow:</p> <p>Connect the ESP8266 or NodeMCU board to the network through WiFi.</p> <ul> <li>Launch any of the targets All, Upload or Fast.</li> </ul> <p>A window may ask for allowing incoming network connections.</p> <p></p> <ul> <li>Click on Allow to proceed.</li> </ul> <p>Note</p> <p>The sketch requires twice its size.</p> <p>For more information about the installation and use of the over-the-air upload,</p> <ul> <li>Please refer to the procedure ESP8266 OTA Updates .</li> </ul>"},{"location":"Boards/Specific/Upload/#upload-to-raspberry-pi","title":"Upload to Raspberry Pi","text":"<p> The Raspberry Pi board provides over-the-air connection through Ethernet or WiFi for upload, console and debugging. The connection is protected by a password defined during the installation of the board.</p> <ul> <li>Please refer to the procedure Install the RasPiArduino platform  for installation and Enter Raspberry Pi IP address and password  for configuration.</li> </ul>"},{"location":"Boards/Teensy/","title":"Manage the Teensy platform","text":"<p> The Teensy platform includes two architectures: 8-bit ATmega and 32-bit ARM.</p>"},{"location":"Boards/Teensy/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform Package Date Comment Teensy 1.58 31 Mar 2023 emCode 14.1.2 05 Jun 2023"},{"location":"Boards/Teensy/#visit-the-official-websites","title":"Visit the official websites","text":"Teensy IDE Arduino CLI or IDE Website http://www.pjrc.com/teensy/index.html Download http://www.pjrc.com/teensy/td_download.html Wiki http://www.pjrc.com/teensy/index.html Forum http://forum.pjrc.com/forum.php"},{"location":"Boards/Teensy/Teensy/","title":"Manage the Teensy ARM boards","text":"<p>The Teensy ARM platform includes the Teensy 3.0, 3.1, 3.2, LC, 3.5, 3.6, 4.0 and 4.1 boards.</p>","tags":["Active"]},{"location":"Boards/Teensy/Teensy/#install","title":"Install","text":"<p>To install the Teensy ARM boards,</p> <ul> <li> <p>Ensure the Arduino tools, CLI or IDE, are installed.</p> </li> <li> <p>Ensure the <code>arduino-cli.yaml</code> configuration file for Arduino-CLI or the Additional boards manager URLs for Arduino IDE includes</p> </li> </ul> <p><pre><code>https://www.pjrc.com/teensy/package_teensy_index.json\n</code></pre></p> <ul> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install teensy:avr\n</code></pre></p> <p>Although labelled <code>avr</code>, the <code>teensy:avr</code> core package manages the Teensy boards running on ARM Cortex-M.</p>","tags":["Active"]},{"location":"Boards/Teensy/Teensy/#utilities","title":"Utilities","text":"<p>The TyTools collection of tools  includes GUI utilities to upload, reset and manage the serial console of the Teensy boards. The command line tool appears to be more stable than the default Teensy utility.</p> <p><pre><code>git clone https://github.com/Koromix/tytools\ncd tytools\nmkdir build\ncd build\ncmake -DCMAKE_INSTALL_PREFIX=/usr/local ..\nmake\nsudo make install\n</code></pre></p> <p>For more information on the TyTools,</p> <ul> <li>Please refer to the TyTools  page.</li> </ul> <p>To use the TyTools instead of the default Teensy utilities,</p> <ul> <li>Edit and add to the main <code>Makefile</code>.</li> </ul> <p><pre><code>UPLOADER = tytools\n</code></pre></p>","tags":["Active"]},{"location":"Boards/Teensy/Teensy/#develop","title":"Develop","text":"<p>The Teensy board package includes all the libraries.</p>","tags":["Active"]},{"location":"Boards/Teensy/Teensy/#use-the-libraries-for-sd","title":"Use the libraries for SD","text":"<ul> <li>Edit the main <code>Makefile</code> to list the required libraries.</li> </ul> <p><pre><code>APP_LIBS_LIST = SPI SD SdFat\n</code></pre></p> <p>The board package includes the SD libraries : they use the SDIO protocol and are called with <code>APP_LIBS_LIST</code>.</p> <p>The user\u2019s libraries folder called with <code>USER_LIBS_LIST</code> may contain other SD libraries, which are not compatible with the Teensy boards as they rely on the SPI protocol.</p>","tags":["Active"]},{"location":"Boards/Teensy/Teensy/#upload-to-teensy-boards","title":"Upload to Teensy boards","text":"<p> The Teensy boards based on an ARM MCU require a specific procedure. The procedure applies to the Teensy 3.0, 3.1, 3.2, 3.5 and 3.6 boards.</p> <p>Proceed as follow:</p> <ul> <li> <p>Disconnect all the SPI devices as programming is done through the SPI pins.</p> </li> <li> <p>Plug the Teensy board.</p> </li> <li> <p>Launch any of the targets All, Upload or Fast.</p> </li> </ul> <p>During the first upload, a new window asks you to press on the button on the board to start the process.</p> <p></p> <ul> <li>Press the button on the Teensy board.</li> </ul> <p>A final message confirms the end of the operation.</p> <p></p> <p>The following uploads no longer require this manual operation.</p>","tags":["Active"]},{"location":"Boards/Teensy/Teensy/#manage-error-messages","title":"Manage error messages","text":"<p>In case the wrong board has been selected, the uploader displays an error message.</p> <p></p> <ul> <li>Click OK, select the correct board following the procedure Change the board  and start again.</li> </ul> <p>The uploader may display another error message.</p> <p></p> <ul> <li> <p>Check and edit the code accordingly.</p> </li> <li> <p>Click OK and start again.</p> </li> </ul>","tags":["Active"]},{"location":"Boards/Teensy/Teensy/#use-raw-hid","title":"Use raw HID","text":"<p>The Teensy boards offer a raw HID mode, with a specific driver for Serial over HID.</p> <p>To configure the project for raw HID,</p> <ul> <li> <p>Open the main <code>Makefile</code>.</p> </li> <li> <p>Set the variable <code>TEENSY_USB</code> to the desired <code>USB_RAWHID</code> type.</p> </li> </ul> <p><pre><code># Teensy USB options (default)\n# ----------------------------------\nTEENSY_USB = USB_RAWHID\n</code></pre></p> <ul> <li>Ensure <code>NO_SERIAL_CONSOLE</code> is set to <code>true</code> to prevent the serial console from starting automatically.</li> </ul> <p><pre><code># Serial console for Fast target\n# ----------------------------------\n# For Fast target, open serial console, false or true\nNO_SERIAL_CONSOLE = true\n</code></pre></p> <ul> <li> <p>Download and unzip the RawHid Test for Linux (64 bit)  utility from the USB: Raw HID  page.</p> </li> <li> <p>Optionally, install telnet with Homebrew, as per the procedure [Install the telnet utility]  .</p> </li> </ul> <p>Once the program has been uploaded to the Teensy board,</p> <ul> <li> <p>Open a first Terminal window.</p> </li> <li> <p>Launch the teensy_gateway utility with <code>/Applications/Teensyduino.app/Contents/Java/hardware/tools/teensy_gateway</code>, assuming the Teensyduino application in under the  <code>/Applications</code> folder.</p> </li> </ul> <p></p> <ul> <li> <p>Open a second Terminal window.</p> </li> <li> <p>Launch <code>telnet 127.0.0.1 28541</code>, or <code>nc 127.0.0.1 28541</code> if telnet isn\u2019t available,</p> </li> </ul> <p></p> <ul> <li> <p>Open a third Terminal window.</p> </li> <li> <p>Launch the rawhid_test utility with <code>/Users/ReiVilo/Downloads/rawhid_test</code>, assuming the rawhid_test application in under the  <code>/Users/ReiVilo/Downloads/</code> folder.</p> </li> </ul> <p></p> <p>To stop,</p> <ul> <li>Press Ctrl+C on the Terminal window where teensy_gateway is running.</li> </ul> <p>For more information on raw HID,</p> <ul> <li>Please refer to USB: Raw HID , How to receive serial data from Teensy when it is configured as Disk+Keyboard?  and HID device to COM-Port .</li> </ul>","tags":["Active"]},{"location":"Boards/nRF5/","title":"Index","text":""},{"location":"Boards/nRF5/#check-the-tests","title":"Check the tests","text":"<p>The test protocol includes building and linking, uploading and running a sketch on the boards using those versions of the IDEs and plug-ins. Boards packages are versioned but not dated.</p> Platform IDE Package Date Comment"},{"location":"Boards/nRF5/#visit-the-official-websites","title":"Visit the official websites","text":"BBC micro:bit IDE Arduino with Boards Manager Website https://microbit.org Boards package https://github.com/sandeepmistry/arduino-nRF5 Library https://github.com/sandeepmistry/arduino-BLEPeripheral Wiki https://learn.adafruit.com/use-micro-bit-with-arduino  by Adafruit."},{"location":"Boards/nRF5/BBC/","title":"Install the BBC micro:bit board","text":"<p> The nRF5 boards platform by Sandeep Mistry provides support for a wide range of nRF51 and nRF52 boards, including the BBC micro:bit board. The installation is performed with the Boards Manager on the Arduino 1.8 IDE.</p> <ul> <li> <p>Ensure Arduino-CLI is installed. </p> </li> <li> <p>Open a Terminal window.</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install sandeepmistry:nRF5\n</code></pre></p>"},{"location":"Boards/nRF5/BBC/#install-the-platform","title":"Install the platform","text":"<ul> <li>Follow the procedure Install the nRF5 boards platform .</li> </ul>"},{"location":"Boards/nRF5/BBC/#install-the-libraries","title":"Install the libraries","text":"<p>Before using Bluetooth, the stack called SoftDevice needs to be uploaded to the board.</p> <p>For the BBC micro:bit board,</p> <ul> <li>Follow the procedure Install SoftDevice onto MicroBit  from the Adafruit Learning System.</li> </ul> <p>The recommended Bluetooth library is BLEPeripheral , also developed by Sandeep Mistry.</p> <ul> <li>Please refer to Install additional libraries on Arduino .</li> </ul> <p>Adafruit provides a nice library to use the LED matrix and the Bluetooth connection.</p> <ul> <li>Please refer to Download Adafruit_Microbit library  on the Adafruit Learning System.</li> </ul>"},{"location":"Boards/nRF5/BBC/#install-the-adafruit-bluefruit-le-connect-application","title":"Install the Adafruit Bluefruit LE Connect application","text":"<ul> <li>Follow the procedure Install the Adafruit Bluefruit LE Connect application  from the Adafruit Learning System.</li> </ul>"},{"location":"Develop/","title":"Develop a project","text":"<p>First,</p> <ul> <li>Create a new project  or Import an existing project ;</li> </ul> <p>Then</p> <ul> <li>Add libraries to the project ;</li> </ul> <p>Finally,</p> <ul> <li>Build and upload the project  and Run and debug the project .</li> </ul>"},{"location":"Develop/Build/","title":"Build and upload the project","text":"<p>emCode includes nine targets.</p> <ul> <li> <p>Build cleans the files from a previous compilation, compiles and links.</p> </li> <li> <p>Upload uploads the resulting HEX or BIN executable file to the board.</p> </li> <li> <p>Serial open the serial console in a Terminal window.</p> </li> <li> <p>Clean erases the files generated from a previous compilation.</p> </li> <li> <p>Fast compiles only the main sketch and the local libraries, links, uploads and opens a serial window in Terminal.</p> </li> <li> <p>Make compiles only the main sketch and the local libraries, and links.</p> </li> <li> <p>Document builds the documentation.</p> </li> <li> <p>Archive prepares archives for the local libraries.</p> </li> <li> <p>Unarchive erases the archives for the local libraries.</p> </li> </ul>"},{"location":"Develop/Build/#compare-the-targets","title":"Compare the targets","text":"<p>The following table shows the scope of each target:</p> Target\u2026 Cleans Compiles Uploads Opens Terminal Debugs Build Upload Serial Clean Fast Make Debug <p>The Build target is recommended for a clean compilation, for example when a user\u2019s library has been changed.</p>"},{"location":"Develop/Build/#select-a-target","title":"Select a target","text":"<p>To select a target,</p> <ul> <li>Press a short-key.</li> </ul> Key Target Ctrl+Shift+B Build Ctrl+Shift+U Upload Ctrl+Shift+T Fast Ctrl+Shift+D Debug <ul> <li> <p>Call the prompt with Ctrl+Shift+P and enter <code>Tasks: Run Task</code>;</p> </li> <li> <p>Then select the target you want.</p> </li> </ul>"},{"location":"Develop/Build/#build","title":"Build","text":"<p>To build,</p> <ul> <li> <p>Press Ctrl+Shift+B, or</p> </li> <li> <p>Call the prompt with Ctrl+Shift+P, enter <code>Tasks: Run Task</code> and select Build.</p> </li> </ul>"},{"location":"Develop/Build/#define-parallel-build","title":"Define parallel build","text":"<p>By default, emCode use parallel build to speed-up the process. The parallel build uses as many threads as cores available.</p> <p>The impact of parallel build on speed depends on the number of cores of the microprocessor.</p> <p>If parallel build is unstable, return to the standard build with one thread.</p> <p>To reverse to standard build with one thread,</p> <ul> <li> <p>Open the <code>tasks.json</code> file under the <code>.vscode</code> folder of the project;</p> </li> <li> <p>Remove the <code>\"-j\",</code> line from the task arguments.</p> </li> </ul> <p><pre><code>    \"tasks\": [\n{\n\"label\": \"Build\",\n\"type\": \"shell\",\n\"command\": \"make\",\n\"args\": [\n\"build\",\n\"-j\",\n\"SELECTED_BOARD=${command:cpptools.activeConfigName}\"\n],\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": true\n},\n\"detail\": \"Build with makefile\"\n},\n]\n</code></pre></p>"},{"location":"Develop/Build/#define-compiler-options","title":"Define compiler options","text":"<p>Some project may require additional options.</p> <ul> <li> <p>Open the main <code>Makefile</code> and</p> </li> <li> <p>Add the parameters to the variable <code>COMPILER_OPTIONS</code> in the main <code>Makefile</code>.</p> </li> </ul> <p><pre><code># Compiler options\n# ----------------------------------\n# If 0 or empty, no additional options\n#\nCOMPILER_OPTIONS = -fpermissive\n</code></pre></p> <p>In this example, <code>-fpermissive</code> has been added.</p> <p><pre><code># Compiler options\n# ----------------------------------\n# If 0 or empty, no additional options\n#\nCOMPILER_OPTIONS = -Wl,-u,_printf_float,-u,-_scanf_float\n</code></pre></p> <p>In this example, formatting float numbers has been added.</p> <p><pre><code>COMPILER_OPTIONS = -flto\n</code></pre></p> <p>In this example, the <code>-flto</code> implements link time optimisation on GCC to optimise the executable size.</p> <p>For more information on the authorised parameters,</p> <ul> <li>Please refer to the compiler documentation.</li> </ul>"},{"location":"Develop/Build/#define-linker-options","title":"Define linker options","text":"<p>Some project may require additional options.</p> <ul> <li> <p>Open the main <code>Makefile</code> and</p> </li> <li> <p>Add the parameters to the variable <code>LINKER_OPTIONS</code> in the main <code>Makefile</code>.</p> </li> </ul> <p><pre><code># Compiler and linker options\n# ----------------------------------\n# If 0 or empty, no additional options\n#\nCOMPILER_OPTIONS =\nLINKER_OPTIONS = -Wl,--check-sections\n</code></pre></p> <p>In this example, <code>-Wl,--check-sections</code> has been added.</p> <p>For more information on the authorised parameters,</p> <ul> <li>Please refer to the compiler documentation.</li> </ul>"},{"location":"Develop/Build/#define-warning-messages","title":"Define warning messages","text":"<p>Contrary to errors, warnings don\u2019t stop compilation but they point at possible cause of errors.</p> <p>The variable <code>WARNING_OPTIONS</code> on the main <code>Makefile</code> selects the scope of the warning messages.</p> <p>By default, the variable <code>WARNING_OPTIONS</code> is set to 0: no warning messages are reported.</p> <p><pre><code># Warning options\n# ----------------------------------\n# For example, unused variables with unused-variable.\n#\n# If 0, no warnings\n# If empty, all warnings, same as WARNING_OPTIONS = all\n# WARNING_OPTIONS = all no-missing-braces no-conversion-null no-pointer-arith\n# WARNING_OPTIONS = unused-variable unused-function unused-label unused-value no-conversion-null no-pointer-arith\n#\nWARNING_OPTIONS = 0\n</code></pre></p> <p>If <code>WARNING_OPTIONS</code> is left empty, all warnings are displayed. This is the same as <code>WARNING_OPTIONS = all</code>.</p> <p><pre><code># Warning options\n#\nWARNING_OPTIONS =\nWARNING_OPTIONS = all\n</code></pre></p> <p>The <code>all</code> option corresponds to the <code>-Wall</code> parameter and usually generates a very long list of warning messages, making the analysis difficult if not impossible.</p> <p>The solution consists on selecting a scope and targeting specific warnings.</p> <p>Define the selected warnings by listing the options after the variable <code>WARNING_OPTIONS</code>.</p> <p>Here are two examples:</p> <ul> <li>To check all the unused elements and save precious SRAM and Flash memory, define the following warning options.</li> </ul> <p><pre><code># Warning options\n#\nWARNING_OPTIONS = unused-variable unused-function unused-label unused-value\n</code></pre></p> <ul> <li>To check all the use of <code>NULL</code>, define the following warning options.</li> </ul> <p><pre><code># Warning options\n#\nWARNING_OPTIONS = conversion-null pointer-arith\n</code></pre></p> <p>For more information on the many other warning messages options,</p> <ul> <li>Please refer to the Using the GNU Compiler Collection Manual .</li> </ul>"},{"location":"Develop/Build/#define-a-binary-specific-name","title":"Define a binary specific name","text":"<p>Some project may setting a specific name for the binary. Default names of the binaries are based on <code>embeddedcomputing</code>: <code>embeddedcomputing.bin</code>, <code>embeddedcomputing.hex</code>, <code>embeddedcomputing.elf</code> and alike.</p> <p>To define a specific binary name,</p> <ul> <li> <p>Open the main <code>Makefile</code>;</p> </li> <li> <p>Add or edit the line <code>BINARY_SPECIFIC_NAME</code>; and</p> </li> <li> <p>Define a binary specific name.</p> </li> </ul> <p><pre><code># C-compliant project name and extension\nPROJECT_NAME_AS_IDENTIFIER = embed1\n\n# Binary name, default=embeddedcomputing\nBINARY_SPECIFIC_NAME = $(PROJECT_NAME_AS_IDENTIFIER)\n</code></pre></p> <p>In the example, the binary specific name is set to <code>embed1</code>, the C-compliant name of the project through the variable <code>$(PROJECT_NAME_AS_IDENTIFIER)</code>.</p> <ul> <li>Just enter whatever value after <code>BINARY_SPECIFIC_NAME</code> to set another name,</li> </ul> <p><pre><code># Binary name, default=embeddedcomputing\nBINARY_SPECIFIC_NAME = myBinarySpecificName\n</code></pre></p>"},{"location":"Develop/Build/#define-a-final-command","title":"Define a final command","text":"<p>Some project may require to run a final command once compilation is successful.</p> <p>To define a final command,</p> <ul> <li> <p>Open the main <code>Makefile</code>,</p> </li> <li> <p>Add or edit the line <code>COMMAND_FINAL</code> and</p> </li> <li> <p>Define the bash command.</p> </li> </ul> <p><pre><code># Final command after make,\nCOMMAND_FINAL = cp $(TARGET_HEX) $(CURRENT_DIR)/\n</code></pre></p> <p>In the example, the final command copies the binary <code>.hex</code> to the folder of the project.</p> <p>The Report Navigator displays the final command.</p> <p><pre><code>---- Final ----\ncp ./.builds/embeddedcomputing.hex .\n==== Make done ====\n</code></pre></p>"},{"location":"Develop/Build/#upload","title":"Upload","text":"<p>To upload,</p> <ul> <li> <p>Press Ctrl+Shift+U, or</p> </li> <li> <p>Call the prompt with Ctrl+Shift+P, enter <code>Tasks: Run Task</code> and select Upload.</p> </li> </ul> <p>Some boards require specific procedures.</p> <ul> <li>Please refer to Manage boards .</li> </ul>"},{"location":"Develop/Build/#customise-the-serial-port","title":"Customise the serial port","text":"<p>The serial port is used for the upload of the sketches and for the console.</p> <p>Each platform has a different implementation of the USB port naming.</p> <p>To change the serial port,</p> <ul> <li> <p>Open the main <code>Makefile</code>.</p> </li> <li> <p>Uncomment the line <code>BOARD_PORT</code> by removing the leading <code>#</code> and define the serial port.</p> </li> </ul> <p><pre><code>BOARD_PORT = /dev/tty.usbACM1\n</code></pre></p> <p>To know the USB port name of the active board, proceed as follow:</p> <ul> <li> <p>Launch a Terminal window</p> </li> <li> <p>Plug the board on the USB port.</p> </li> <li> <p>Run the following command and note the name of the port.</p> </li> </ul> <p><pre><code>ls /dev/ttyACM*\n/dev/tty.usbACM1\n</code></pre></p> <p>To change the speed of the serial console,</p> <ul> <li> <p>Open the main <code>Makefile</code>.</p> </li> <li> <p>Uncomment the line <code>SERIAL_BAUDRATE</code> and set the desired speed.</p> </li> </ul> <p><pre><code># SERIAL_BAUDRATE for the serial console, 115200 by default\n# Uncomment and specify another speed\n#\nSERIAL_BAUDRATE = 230400\n</code></pre></p>"},{"location":"Develop/Build/#manage-specific-boards","title":"Manage specific boards","text":"<p>Some boards require a specific procedure.</p> <ul> <li>Please refer to the Upload section for the board under Manage the boards .</li> </ul>"},{"location":"Develop/Import/","title":"Import an existing project","text":"<p>The manual procedure for importing an existing project into an emCode project consists on four steps:</p> <ul> <li>Create an New Project ,</li> <li>Drag-and-drop headers and code files ,</li> <li>Copy-paste the main sketch , and</li> <li>Check additional parameters .</li> </ul> <p>For more information,</p> <ul> <li>Please refer to Manage compatibility with Arduino .</li> </ul>"},{"location":"Develop/Import/#create-a-new-project","title":"Create a new project","text":"<p>To create a new project,</p> <ul> <li>Follow the procedure Create a new project .</li> </ul>"},{"location":"Develop/Import/#copy-the-headers-and-code-files","title":"Copy the headers and code files","text":"<ul> <li> <p>Open the folder with the existing project and the folder with the new emCode project.</p> </li> <li> <p>Select all the files from the exisiting project and copy them into the folder of the new emCode project.</p> </li> </ul>"},{"location":"Develop/Import/#update-the-emcode-project","title":"Update the emCode project","text":"<p>On the new emCode project,</p> <ul> <li> <p>Open the main <code>.ino</code> sketch;</p> </li> <li> <p>Ensure it includes the pre-processing statements <code>#include \"Arduino.h\"</code>, as it is required by emCode.</p> </li> </ul> <p>For more information,</p> <ul> <li>Please refer to Include core library on main sketch .</li> </ul> <p>Then,</p> <ul> <li> <p>Open the main <code>Makefile</code> of the new emCode project;</p> </li> <li> <p>Change the value of the <code>PROJECT_NAME_AS_IDENTIFIER</code> variable with the name of the main <code>.ino</code> sketch.</p> </li> </ul> <p><pre><code># C-compliant project name\nPROJECT_NAME_AS_IDENTIFIER = MyProject\n</code></pre></p> <ul> <li>Add all the required libraries, <code>APP_LIBS_LIST</code>, <code>USER_LIBS_LIST</code> and <code>LOCAL_LIBS_LIST</code>.</li> </ul> <p>For more information on libraries,</p> <ul> <li>Please refer to List all the used libraries in main <code>Makefile</code> .</li> </ul>"},{"location":"Develop/Import/#check-additional-parameters","title":"Check additional parameters","text":"<p>Depending on the project, some additional steps might be required.</p> <ul> <li>If functions are called before they are defined, declare prototypes for them.</li> </ul> <p>For more information on prototypes,</p> <ul> <li>Please refer to Declare functions prototypes on main sketch .</li> </ul> <p>For more information about the compatibility between the standard Arduino IDE and emCode,</p> <ul> <li>Please refer to section Manage compatibility with standard IDEs .</li> </ul>"},{"location":"Develop/Libraries/","title":"Add libraries to the project","text":""},{"location":"Develop/Libraries/#identify-the-libraries","title":"Identify the libraries","text":"<p>There are four kinds of libraries:</p> <ul> <li> <p>The core libraries correspond to the Arduino SDK and include all the basic functions required for development. Each platform provides its own set compatible with the Wiring and Arduino framework. One single <code>#include</code> statement in the main sketch and in the header files includes all of them.</p> </li> <li> <p>The application libraries are optional libraries to provide additional features, like managing the specific I\u00b2C and SPI ports. They require to be explicitly mentioned with the <code>#include</code> statement on the main sketch and listed on the main <code>Makefile</code> after the <code>APP_LIBS_LIST</code> variable.</p> </li> <li> <p>The user\u2019s libraries are developed, or downloaded and installed, by the user, and stored under the <code>Library</code> sub-folder on the sketchbook folder. They require to be explicitly mentioned with the <code>#include</code> statement on the main sketch and listed on the main <code>Makefile</code> after the <code>USER_LIBS_LIST</code> variable.</p> </li> <li> <p>The local libraries are part of the project and located on the same folder as the main sketch. They require to be explicitly mentioned by the <code>#include</code> statement on the main sketch. By default, all the local libraries are included.</p> </li> </ul> <p>emCode also manages a variant for the local and user\u2019s libraries, the pre-compiled libraries.</p> <ul> <li>Instead of using the source code, the pre-compiled libraries are already built and ready to use. Just like the local libraries, they are part of the project and located on the same folder as the main sketch, they require to be explicitly mentioned by the <code>#include</code> statement on the main sketch and they are all included by default.</li> </ul>"},{"location":"Develop/Libraries/#locate-the-libraries","title":"Locate the libraries","text":""},{"location":"Develop/Libraries/#locate-the-core-libraries","title":"Locate the core libraries","text":"<p>The core and application libraries are located under the hidden Arduino folder, generally <code>~/.arduino15</code>, and under the <code>libraries</code> sub-folders of the boards package folders, for example <code>~/.arduino15/packages/arduino/hardware/avr/1.8.6/libraries</code>.</p>"},{"location":"Develop/Libraries/#locate-the-application-libraries","title":"Locate the application libraries","text":"<p>The core and application libraries are located under the hidden Arduino folder, generally <code>~/.arduino15</code>, and under the <code>libraries</code> sub-folders of the boards package folders, for example <code>~/.arduino15/packages/arduino/hardware/avr/1.8.6/libraries</code>.</p>"},{"location":"Develop/Libraries/#locate-the-users-libraries","title":"Locate the user\u2019s libraries","text":"<p>The user\u2019s libraries are located in the <code>libraries</code> sub-folder under the sketchbook folder, generally <code>~/Arduino</code>. The <code>~/Arduino/libraries</code> folder contains one sub-folder per library.</p> <p>The users\u2019 libraries should comply with the Arduino IDE 1.5: Library specification .</p>"},{"location":"Develop/Libraries/#locate-the-local-libraries","title":"Locate the local libraries","text":"<p>The local libraries are located under the folder of the project, with one sub-folder per library.</p> <p>The local libraries should comply with the Arduino IDE 1.5: Library specification .</p>"},{"location":"Develop/Libraries/#use-the-libraries","title":"Use the libraries","text":"<p>Just like any other IDE, using a library in a project requires  specifying an <code>#include</code> statement on the main sketch.</p> <p>Additionally, the library needs to be mentioned on the main <code>Makefile</code> to be compiled.</p> <p>By default, the main <code>Makefile</code> lists\u2026</p> <p><pre><code># Application libraries\n#\nAPP_LIBS_LIST = 0\n\n# User's libraries\n#\nUSER_LIBS_LIST = 0\n\n# Local libraries\n#\nLOCAL_LIBS_LIST =\n</code></pre></p> <p>\u2026with the following options:</p> <ul> <li> <p>All the core libraries are included.</p> </li> <li> <p>No application library is included.</p> </li> <li> <p>No user\u2019s library is included.</p> </li> <li> <p>All the local libraries are included.</p> </li> </ul> <p>If a library has been included in the main sketch or in a header file, it needs to be listed on the main <code>Makefile</code> to be compiled. This is a standard procedure</p>"},{"location":"Develop/Libraries/#use-the-core-libraries","title":"Use the core libraries","text":"<p>All the core libraries part of the Arduino SDK are included for compilation using one single <code>#include</code> statement on the main sketch. The same <code>#include</code> statement is also required on the header files.</p> <p>To use the core library,</p> <ul> <li>Add the <code>#include \"Arduino.h\"</code> statement on the main sketch or the header file.</li> </ul> <p><pre><code>// SDK\n#include \"Arduino.h\"\n</code></pre></p> <p>Warning</p> <p>This <code>#include \"Arduino.h\"</code> statement is compulsory for emCode.</p>"},{"location":"Develop/Libraries/#use-the-application-libraries","title":"Use the application libraries","text":"<p>The application libraries require to be explicitly mentioned with the <code>#include</code> statement on the main sketch and listed on the main <code>Makefile</code>.</p> <p>To use an application library,</p> <ul> <li>Add the corresponding <code>#include</code> statement with the name of the header file on the main sketch or the header file.</li> </ul> <p><pre><code>// Include application, user and local libraries\n#include \"Wire.h\"\n</code></pre></p> <ul> <li>Mention the name of the folder of the library to the variable <code>APP_LIBS_LIST</code> in the main <code>Makefile</code>.</li> </ul> <p><pre><code># Application libraries\n# default = 0 = none\n#\nAPP_LIBS_LIST = Wire\n</code></pre></p> <ul> <li>Set <code>APP_LIBS_LIST</code> to <code>0</code> to include no application library.</li> </ul> <p>In case of multiple libraries,</p> <ul> <li>Mention one include with the name of the header file per line.</li> </ul> <p><pre><code>// Include application, user and local libraries\n#include \"Wire.h\"\n#include \"SPI.h\"\n</code></pre></p> <ul> <li>Separate the names of the folders of the libraries with a space.</li> </ul> <p><pre><code># Application libraries\n#\nAPP_LIBS_LIST = Wire SPI\n</code></pre></p>"},{"location":"Develop/Libraries/#use-the-users-libraries","title":"Use the user\u2019s libraries","text":"<p>The user\u2019s libraries require to be explicitly mentioned with the <code>#include</code> statement on the main sketch and listed on the main <code>Makefile</code>.</p> <p>To use a user\u2019s library,</p> <ul> <li>Add the corresponding <code>#include</code> statement with the name of the header file on the main sketch or the header file.</li> </ul> <p><pre><code>// Include application, user and local libraries\n#include \"Ethernet.h\"\n</code></pre></p> <ul> <li>Mention the name of the folder of the library to the variable <code>USER_LIBS_LIST</code> in the main <code>Makefile</code>.</li> </ul> <p><pre><code># User's libraries\n# default = empty = all\n#\nUSER_LIBS_LIST = Ethernet\n</code></pre></p> <p>In case of multiple user\u2019s libraries,</p> <ul> <li>Mention one include with the name of the header file per line.</li> </ul> <p><pre><code>// Include application, user and local libraries\n#include \"Ethernet.h\"\n#include \"JSON.h\"\n</code></pre></p> <ul> <li>Separate the names of the folders of the libraries with a space.</li> </ul> <p><pre><code># User's libraries\n# default = empty = all\n#\nUSER_LIBS_LIST = Ethernet JSON\n</code></pre></p> <p>Remember, only the specified libraries are compiled.</p> <ul> <li> <p>Set <code>USER_LIBS_LIST</code> to <code>0</code> to include no local library.</p> </li> <li> <p>Keep <code>USER_LIBS_LIST</code> empty to include all the include no local libraries.</p> </li> <li> <p>Use the same procedure for pre-compiled libraries.</p> </li> </ul> <p>emCode uses the pre-compiled archives for the local libraries first when they are available.</p> <p>To force the compilation of the local libraries over the use of the pre-compiled archives,</p> <ul> <li> <p>Edit the main <code>Makefile</code>;</p> </li> <li> <p>Set <code>USE_ARCHIVES</code> to <code>false</code>.</p> </li> </ul> <p><pre><code># For building, use available archives, false or true, default = true\nUSE_ARCHIVES = false\n</code></pre></p>"},{"location":"Develop/Libraries/#use-the-local-libraries","title":"Use the local libraries","text":"<p>The local libraries require to be explicitly mentioned with the <code>#include</code> statement on the main sketch and listed on the main <code>Makefile</code>.</p> <p>To use a local library,</p> <ul> <li>Add the corresponding <code>#include</code> statement with the name of the header file on the main sketch or the header file.</li> </ul> <p><pre><code>// Include application, user and local libraries\n#include \"LocalLibrary.h\"\n</code></pre></p> <ul> <li>Mention the name of the folder of the library to the variable <code>LOCAL_LIBS_LIST</code> in the main <code>Makefile</code>.</li> </ul> <p><pre><code># Local libraries\n# default = empty = all\n#\nLOCAL_LIBS_LIST = LocalLibrary\n</code></pre></p> <p>In case of multiple local libraries,</p> <ul> <li>Mention one include with the name of the header file per line.</li> </ul> <p><pre><code>// Include application, user and local libraries\n#include \"LocalLibrary.h\"\n#include \"AnotherLibrary.h\"\n</code></pre></p> <ul> <li>Separate the names of the folders of the libraries with a space.</li> </ul> <p><pre><code># Local libraries\n# default = empty = all\n#\nLOCAL_LIBS_LIST = LocalLibrary AnotherLibrary\n</code></pre></p> <p>Remember, only the specified libraries are compiled.</p> <ul> <li> <p>Set <code>LOCAL_LIBS_LIST</code> to <code>0</code> to include no local library.</p> </li> <li> <p>Keep <code>LOCAL_LIBS_LIST</code> empty to include all the include no local libraries.</p> </li> <li> <p>Use the same procedure for pre-compiled libraries.</p> </li> </ul> <p>Warning</p> <p>A pre-compiled library can\u2019t be debugged, as the code source isn\u2019t provided.</p> <p>For more information on how to generate a pre-compiled library,</p> <ul> <li>Please refer to Generate a pre-compiled library .</li> </ul>"},{"location":"Develop/Libraries/#manage-non-standard-libraries","title":"Manage non-standard libraries","text":"<p>The libraries should comply with the Arduino IDE 1.5: Library specification .</p>"},{"location":"Develop/Libraries/#include-non-standard-folders","title":"Include non-standard folders","text":"<p>However, some libraries do not follow the Layout of folders and files  from the official Arduino library specification.</p> <p>This may raise issues during compilation.</p> <p>Example</p> <p>The TFT_eSPI library  includes header and code files in all those sub-folders.</p> <p><pre><code>TFT_eSPI/\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 ESP32 UNO board mod\n\u2502   \u251c\u2500\u2500 ESP-IDF\n\u2502   \u251c\u2500\u2500 PlatformIO\n\u2502   \u2514\u2500\u2500 RPi_TFT_connections\n\u251c\u2500\u2500 examples\n\u2502   \u251c\u2500\u2500 160 x 128\n\u2502   \u251c\u2500\u2500 320 x 240\n\u2502   \u251c\u2500\u2500 480 x 320\n\u2502   \u251c\u2500\u2500 DMA test\n\u2502   \u251c\u2500\u2500 ePaper\n\u2502   \u251c\u2500\u2500 Generic\n\u2502   \u251c\u2500\u2500 GUI Widgets\n\u2502   \u251c\u2500\u2500 PNG Images\n\u2502   \u251c\u2500\u2500 Smooth Fonts\n\u2502   \u251c\u2500\u2500 Smooth Graphics\n\u2502   \u251c\u2500\u2500 Sprite\n\u2502   \u2514\u2500\u2500 Test and diagnostics\n\u251c\u2500\u2500 Extensions\n\u251c\u2500\u2500 Fonts\n\u2502   \u251c\u2500\u2500 Custom\n\u2502   \u251c\u2500\u2500 GFXFF\n\u2502   \u2514\u2500\u2500 TrueType\n\u251c\u2500\u2500 Processors\n\u251c\u2500\u2500 TFT_Drivers\n\u251c\u2500\u2500 Tools\n\u2502   \u251c\u2500\u2500 bmp2array4bit\n\u2502   \u251c\u2500\u2500 Create_Smooth_Font\n\u2502   \u2514\u2500\u2500 Screenshot_client\n\u2514\u2500\u2500 User_Setups\n</code></pre></p> <ul> <li>List all the sub-folders after <code>USER_LIBS_LIST</code>.</li> </ul> <p>Example</p> <p><pre><code>USER_LIBS_LIST = \u200bTFT_eSPI TFT_eSPI/Extensions TFT_eSPI/Fonts TFT_eSPI/Fonts/Custom TFT_eSPI/Fonts/GFXFF TFT_eSPI/Fonts/TrueType TFT_eSPI/TFT_Drivers\n</code></pre></p>"},{"location":"Develop/Libraries/#exclude-non-standard-folders","title":"Exclude non-standard folders","text":"<p>Some libraries include additional folders and files which are not related with the Wiring / Arduino project and may interfere with the compilation.</p> <p>Example</p> <p>The ArduinoJSON library  contains the usual folders <code>src</code> and <code>examples</code>, which are consistent with the Arduino IDE 1.5 Library Specification .</p> <p><pre><code>ArduinoJson/\n\u251c\u2500\u2500 examples\n\u2502   \u251c\u2500\u2500 JsonConfigFile\n\u2502   \u251c\u2500\u2500 JsonFilterExample\n\u2502   \u251c\u2500\u2500 JsonGeneratorExample\n\u2502   \u251c\u2500\u2500 JsonHttpClient\n\u2502   \u251c\u2500\u2500 JsonParserExample\n\u2502   \u251c\u2500\u2500 JsonServer\n\u2502   \u251c\u2500\u2500 JsonUdpBeacon\n\u2502   \u251c\u2500\u2500 MsgPackParser\n\u2502   \u251c\u2500\u2500 ProgmemExample\n\u2502   \u2514\u2500\u2500 StringExample\n\u251c\u2500\u2500 fuzzing\n\u251c\u2500\u2500 scripts\n\u251c\u2500\u2500 third-party\n\u251c\u2500\u2500 tests\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 ArduinoJson\n</code></pre></p> <p>However, the same library also contains the additional folders <code>fuzzing</code>, <code>scripts</code>, <code>third-party</code> and <code>test</code>, which may interfere with the normal compilation.</p> <p>On a more recent version of this library, the non-standard folders have migrated under the <code>extras</code> folder.</p> <p>As a solution,</p> <ul> <li> <p>Zip the non-standard folders.</p> </li> <li> <p>Remove them.</p> </li> <li> <p>Create a new sub-folder <code>extras</code> and move the non-standard folders inside.</p> </li> </ul>"},{"location":"Develop/Libraries/#exclude-libraries","title":"Exclude libraries","text":"<p>Some libraries are specific to a platform but are included in a folder shared with other platforms, and some libraries may conflict with other ones.</p> <ul> <li>Edit the main <code>Makefile</code> and edit the variable <code>EXCLUDE_LIBS</code> with the libraries to be excluded.</li> </ul> <p>Example</p> <p>The <code>WiFi</code> library included among the core libraries is solely designed for the <code>Arduino WiFi Shield</code>.</p> <p>With the Arduino 1.0 and 1.5 IDE, the <code>WiFi</code> is included by default in the compilation process, and raises error and warning messages even with the official IDE.</p> <p>To exclude the <code>WiFi</code> library and avoid any unnecessary error,</p> <ul> <li>Mention its name <code>WiFi</code> after the variable <code>EXCLUDE_LIBS</code>.</li> </ul> <p><pre><code># List the libraries to be excluded\n# For example, WiFi may crash on Arduino 1.0.2\n#\nEXCLUDE_LIBS = WiFi\n</code></pre></p> <p>To use all the libraries,</p> <ul> <li>Leave the line empty after the <code>EXCLUDE_LIBS</code> variable.</li> </ul> <p><pre><code>EXCLUDE_LIBS =\n</code></pre></p> <p>By default, the <code>EXCLUDE_LIBS</code> is empty and the line has a leading <code>#</code> to comment it.</p> <p>The parameter impacts all libraries, core, application, user and local.</p>"},{"location":"Develop/Libraries/#manage-pre-compiled-libraries","title":"Manage pre-compiled libraries","text":""},{"location":"Develop/Libraries/#generate-a-pre-compiled-library","title":"Generate a pre-compiled library","text":"<p>Before generating a pre-compiled library from a local library,</p> <ul> <li>Check the header and code files are inside a sub-folder.</li> </ul> <p><pre><code>LocalLibrary/\n\u251c\u2500\u2500 library.properties\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 LocalLibrary.cpp\n    \u2514\u2500\u2500 LocalLibrary.h\n</code></pre></p> <p>In the example above, <code>LocalLibrary.h</code> and <code>LocalLibrary.cpp</code> are inside the sub-folder <code>LocalLibrary</code>.</p> <p>To generate a pre-compiled library,</p> <ul> <li> <p>Presss Ctrl+Shift+P and type <code>Tasks: Run Task</code>.</p> </li> <li> <p>Select the Archive target and launch it.</p> </li> </ul> <p><pre><code>==== Archive ====\n---- Generate ----\n7.1-ARCHIVE       LocalLibrary/src/cortex-m0plus\n---- Update ----\n7.3-ARCHIVE       LocalLibrary/library.properties\n==== Archive done ====\n</code></pre></p> <p>In the library sub-folder, the new folder <code>cortex-m0plus</code> has been created cortex-m0plus to include the new file <code>LocalLibrary.a</code>. This is the pre-compiled library.</p> <p><pre><code>LocalLibrary/\n\u251c\u2500\u2500 library.properties\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 cortex-m0plus\n    \u2502   \u2514\u2500\u2500 libLocalLibrary.a\n    \u251c\u2500\u2500 LocalLibrary.cpp\n    \u2514\u2500\u2500 LocalLibrary.h\n</code></pre></p> <p>The <code>library.properties</code> file has been updated with</p> <p><pre><code>precompiled=true\nldflags=-lLocalLibrary\n</code></pre></p> <p>The folder <code>cortex-m0plus</code> is specific for the Cortex-M0+: the pre-compiled library is valid for the board or MCU it has been compiled against. However, it may not work properly on other Cortex-M0+-based MCUs.</p> <p>For more information,</p> <ul> <li>Please refer to the Arduino specifications for Precompiled binaries .</li> </ul>"},{"location":"Develop/Libraries/#use-a-pre-compiled-library","title":"Use a pre-compiled library","text":"<p>The pre-compiled user\u2019s and local libraries are used the same way as user\u2019s and local libraries.</p>"},{"location":"Develop/Libraries/#share-a-pre-compiled-library","title":"Share a pre-compiled library","text":"<p>To share the pre-compiled library,</p> <ul> <li>Just take the folder with the header files and the pre-compiled library, here <code>LocalLibrary.h</code> and <code>LocalLibrary.a</code>, along with <code>library.properties</code>.</li> </ul> <p>Remember this pre-compiled library is only valid for the board or MCU it has been compiled against. Do not use it with another board or MCU as it may not work properly.</p>"},{"location":"Develop/Libraries/#remove-a-pre-compiled-library","title":"Remove a pre-compiled library","text":"<p>To remove the pre-compiled libraries,</p> <ul> <li>Check the header and code files are inside a sub-folder.</li> </ul> <p><pre><code>LocalLibrary/\n\u251c\u2500\u2500 library.properties\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 cortex-m0plus\n    \u2502   \u2514\u2500\u2500 libLocalLibrary.a\n    \u251c\u2500\u2500 LocalLibrary.cpp\n    \u2514\u2500\u2500 LocalLibrary.h\n</code></pre></p> <p>In the example above, the sub-folder <code>LocalLibrary</code> should contain <code>LocalLibrary.h</code> and <code>LocalLibrary.cpp</code>.</p> <ul> <li>Presss Ctrl+Shift+P and type <code>Tasks: Run Task</code>.</li> </ul> <p><pre><code>==== Unarchive ====\n---- Remove ----\n7.4-UNARCHIVE     LocalLibrary/src/cortex-m0plus\n---- Update ----\n7.5-UNARCHIVE     LocalLibrary/library.properties\n==== Unarchive done ====\n</code></pre></p> <ul> <li>Select the Unarchive target and launch it.</li> </ul> <p><pre><code>LocalLibrary/\n\u251c\u2500\u2500 library.properties\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 LocalLibrary.cpp\n    \u2514\u2500\u2500 LocalLibrary.h\n</code></pre></p> <p>The archive <code>LocalLibrary.a</code> has been removed and the <code>library.properties</code> file has been updated back to its initial content.</p>"},{"location":"Develop/New/","title":"Create a new project","text":""},{"location":"Develop/New/#create-a-new-project_1","title":"Create a new project","text":"<p>To create a new project,</p> <ul> <li> <p>Copy the folder <code>~/.emCode/Template</code> to a new location.</p> </li> <li> <p>Rename the folder.</p> </li> <li> <p>Open it with Visual Studio Code.</p> </li> </ul> <p>If you want to change the name of the main sketch <code>Template</code>, for example <code>MyProject</code>:</p> <ul> <li> <p>Rename the <code>Template.ino</code> file with the new name <code>MyProject.ino</code>;</p> </li> <li> <p>Edit the main <code>Makefile</code> and change the value of the <code>PROJECT_NAME_AS_IDENTIFIER</code> variable accordingly.</p> </li> </ul> <p><pre><code># C-compliant project name\nPROJECT_NAME_AS_IDENTIFIER = MyProject\n</code></pre></p> <p>Warning</p> <p>As for the standard Arduino IDE, avoid spaces and special characters in the path and name of the project.</p>"},{"location":"Develop/New/#select-the-board","title":"Select the board","text":"<ul> <li> <p>Select the main sketch on the left pane.</p> </li> <li> <p>Select the board on the drop-down list on the bottom line.</p> </li> </ul> <p>The names of the boards always starts with the platform and then the MCU, and ends with an option.</p> <p>As examples, <code>Adafruit_Feather_M0_USB</code>, <code>Raspberry_Pi_Pico_W_RP2040_PicoProbe</code> or <code>Teensy_4.1</code>.</p> <p>The board can be changed afterwards with the same procedure.</p> <p>Warning</p> <p>Visual Studio Code shows the list of the boards only when a sketch <code>.ino</code>, a header <code>.h</code> or a code file <code>.cpp</code> is selected.</p> <p>If your board is not listed, you can create a configuration file.</p> <ul> <li>Please refer to the section Add a board .</li> </ul>"},{"location":"Develop/New/#customise-the-project","title":"Customise the project","text":"<p>On the differnt files <code>ReadMe.md</code>, main sketch <code>Template.ino</code>, local library <code>LocalLibrary.cpp</code> and <code>LocalLibrary.h</code>:</p> <ul> <li>Adapt the fields <code>&lt;#project#&gt;</code> and <code>&lt;#details#&gt;</code>, <code>&lt;#author#&gt;</code>, <code>&lt;#date#&gt;</code> and <code>&lt;#version#&gt;</code>, <code>&lt;#copyright#&gt;</code> and <code>&lt;#licence#&gt;</code>.</li> </ul> <p>Alternatively, press Ctrl+Shift+H to use the find-and-replace function of Visual Studio Code.</p>"},{"location":"Develop/Run/","title":"Run and debug the project","text":""},{"location":"Develop/Run/#run","title":"Run","text":""},{"location":"Develop/Run/#manage-the-serial-console-after-upload","title":"Manage the serial console after upload","text":"<p>By default, the Fast target opens a serial console in a Terminal window once the sketch has been uploaded to the board.</p> <p>In case you prefer not to open the serial console,</p> <ul> <li> <p>Open the main <code>Makefile</code>.</p> </li> <li> <p>Set the variable <code>NO_SERIAL_CONSOLE</code> in the main <code>Makefile</code> to <code>true</code>.</p> </li> </ul> <p><pre><code># Serial console for Fast target\n# ----------------------------------\n# For Fast target, open serial console, false or true\n#\nNO_SERIAL_CONSOLE = true\n</code></pre></p> <ul> <li>Otherwise, comment the line with a leading <code>#</code>, set the value to <code>false</code> or leave it empty.</li> </ul> <p><pre><code>NO_SERIAL_CONSOLE = false\nNO_SERIAL_CONSOLE =\n</code></pre></p>"},{"location":"Develop/Run/#use-external-serial-console-applications","title":"Use external serial console applications","text":"<p>As an alternative to the serial console on a Terminal window, I recommend CoolTerm  and PuTTY .</p> <p>The variable <code>NO_SERIAL_CONSOLE</code> option only affects the Fast target. The All and Serial targets are not concerned.</p> <p>Some boards use the same serial port for upload and serial console.</p> <ul> <li>Ensure the serial console is disconnected before proceeding with the upload.</li> </ul>"},{"location":"Develop/Run/#debug","title":"Debug","text":"<p>Debugging involves two phases:</p> <ul> <li> <p>First, define the breakpoints with the associated conditions and actions within the standard Visual Studio Code interface.</p> </li> <li> <p>Then, launch the debugging session while the sketch is running on the board.</p> </li> </ul>"},{"location":"Develop/Run/#check-the-configuration","title":"Check the configuration","text":"<p>Debugging requires a board with a built-in debugger or a board connected to an external debugger.</p> <p>Examples of boards with a built-in debugger include Arduino M0 Pro, LaunchPad, BBC micro:bit, Microsoft Azure IoT DevKit.</p> <p>Examples of boards connected to an external debugger include ESP32 board with the external ESP-Prog programmer-debugger, Adafruit Feather nRF52840 with the Segger J-Link emulator.</p> <p>Debugging relies on the Cortex-Debug  extension.</p>"},{"location":"Develop/Run/#define-the-breakpoints","title":"Define the breakpoints","text":"<ul> <li>Use the Visual Studio Code interface to define breakpoints with the associated conditions and actions.</li> </ul> <p>For more information about debugging with Visual Studio Code,</p> <ul> <li>Please refer to Debug C++ in Visual Studio Code  and Configure C/C++ debugging .</li> </ul>"},{"location":"Develop/Run/#power-the-board-with-the-segger-j-link-debug-probe","title":"Power the board with the Segger J-Link debug probe","text":"<p>Some Segger J-Link debug probes can power the board with +5 V (300mA maximum, pin 19), while the logic level is set through <code>VTref</code> (target reference voltage, pin 1).</p> <ul> <li>On the main <code>Makefile</code>, set the variable <code>JLINK_POWER</code> to <code>1</code>.</li> </ul> <p><pre><code>JLINK_POWER = 1\n</code></pre></p> <ul> <li>Alternatively, launch JLinkExe.</li> </ul> <p><pre><code>JLinkExe\n</code></pre></p> <ul> <li>Enter the corresponding command.</li> </ul> <p><pre><code> power on\n exit\n</code></pre></p> <ul> <li>Or enter the corresponding command on Ozone.</li> </ul> <p><pre><code>Edit.SysVar(VAR_TARGET_POWER_ON,1);\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to the section JTAG Interface Connection (20 pin) on the page Interface Description .</li> </ul>"},{"location":"Develop/Run/#re-route-a-serial-console-through-the-segger-j-link-debug-probe","title":"Re-route a serial console through the Segger J-Link debug probe","text":"<p>Additionally, some Segger J-Link debug probes feature VCOM and re-route a serial console through J-Link <code>TX</code> (pin 5) and J-Link <code>RX</code> (pin 17).</p> <p>This feature is only valid with SWD and is disabled by default. To enable it,</p> <ul> <li> <p>Connect the Segger J-Link debug probe.</p> </li> <li> <p>Launch JLinkConfig.</p> </li> </ul> <p></p> <ul> <li>Select the debug probe and call the contextual menu Configure.</li> </ul> <p></p> <ul> <li> <p>Click on Enable below Virtual COM-Port, then on OK.</p> </li> <li> <p>Power-cycle the debug probe.</p> </li> </ul> <p>Alternatively,</p> <ul> <li> <p>Open a Terminal window,</p> </li> <li> <p>Launch J-Link.</p> </li> </ul> <p><pre><code>JLinkExe\n</code></pre></p> <ul> <li>Run the following commands after the <code>J-Link&gt;</code> prompt.</li> </ul> <p><pre><code>vcom enable\nexit\n</code></pre></p> <p>If the probe has the serial number <code>123456789</code>, the serial port is re-routed to <code>/dev/tty.usbmodem000123456789</code>.</p> <ul> <li>Just open a Terminal window and launch the following command with the correct speed.</li> </ul> <p><pre><code>screen /dev/tty.usbmodem000123456789 9600\n</code></pre></p> <p>To disable it,</p> <ul> <li>Proceed as before, but select Disable below Virtual COM-Port instead.</li> </ul> <p>Alternatively,</p> <ul> <li> <p>Open a Terminal window,</p> </li> <li> <p>Launch J-Link.</p> </li> </ul> <p><pre><code>JLinkExe\n</code></pre></p> <ul> <li>Run the following commands after the <code>J-Link&gt;</code> prompt.</li> </ul> <p><pre><code> vcom disable\n exit\n</code></pre></p> <p>For more information,</p> <ul> <li>Please refer to the section VCOM Functionality on the page J-Link Debug Probes .</li> </ul>"},{"location":"Develop/Run/#launch-the-debugging-session","title":"Launch the debugging session","text":"<p>To launch the debugging session, the first time,</p> <ul> <li> <p>Press Ctrl+Shift+D to display the debug pane;</p> </li> <li> <p>Select the configuration on the drop-down list;</p> </li> <li> <p>Hit Start Debugging or press F5.</p> </li> </ul> <p>After the first time,</p> <ul> <li>Press the short-key Ctrl+Shift+D.</li> </ul>"},{"location":"Develop/Run/#manage-specific-boards","title":"Manage specific boards","text":"<p>Some boards require a specific procedure.</p> <ul> <li>Please refer to the Debug section for the board under Manage the boards .</li> </ul>"},{"location":"Develop/Run/#debug-the-project-with-ozone","title":"Debug the project with Ozone","text":"<p> A great alternative for debugging is Ozone with a Segger J-Link debugger. Ozone provides a GUI to program and debug a board.</p> <p>For more information about the platforms and MCUs supported,</p> <ul> <li>Please refer to the page Supported Devices - J-Link :octicons-exernal-link-16:.</li> </ul> <p>For some boards running on FreeRTOS, Ozone manages FreeRTOS better than the command-line J-Link utility and is thus strongly recommended.</p> <p>For more information on how to use Ozone,</p> <ul> <li>Please refer to the Ozone User Manual (UM08025)  from Segger.</li> </ul> <p>For more information about the debugging tools,</p> <ul> <li>Please refer to the Segger J-Link  and Segger Ozone  documentations.</li> </ul>"},{"location":"Develop/Write/","title":"Write the project","text":""},{"location":"Develop/Write/#identify-the-folders-and-files","title":"Identify the folders and files","text":"<p>The newly created project contains the following folders and files:</p> <p><pre><code>Template/\n\u251c\u2500\u2500 .builds\n\u251c\u2500\u2500 .vscode\n\u251c\u2500\u2500 LocalLibrary\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Doxyfile.dox\n\u251c\u2500\u2500 main.cpp\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 ReadMe.md\n\u2514\u2500\u2500 Template.ino\n</code></pre></p> <ul> <li> <p>The folder <code>.builds</code> contains the build and link files, and the executables.</p> </li> <li> <p>The folder <code>.vscode</code> contains the parameters for Visual Studio Code.</p> </li> <li> <p>The folder <code>LocalLibrary</code> contains the <code>LocalLibrary.h</code> header and <code>LocalLibrary.cpp</code> code for the <code>LocalLibrary</code> library. They are provided as example.</p> </li> <li> <p>The file <code>.gitignore</code> lists the files and folders to omit for the source control manager Git.</p> </li> <li> <p>The file <code>Doxyfile.dox</code> lists the parameters for the documentation generator Doxygen.</p> </li> <li> <p>The file <code>main.cpp</code> calls the appropriate core libraries, initialises the board, includes the sketch. The <code>main()</code> function calls the <code>setup()</code> and <code>loop()</code> functions from the sketch. Do not alter this file.</p> </li> <li> <p>The file <code>Makefile</code> is the entry for the compilation processes.</p> </li> <li> <p>The file <code>ReadMe.md</code> is a notepad in Markdown.</p> </li> <li> <p>The <code>Template.ino</code> file is where you write the sketch, with the <code>setup()</code> and <code>loop()</code> functions and all the additional ones.</p> </li> </ul> <p>The files to edit are the <code>Template.ino</code> file for the sketch, the <code>LocalLibrary.h</code> header and <code>LocalLibrary.cpp</code> code for the <code>LocalLibrary</code> library.</p> <p>A project can only have one <code>.ino</code> file, except for multi-threaded platforms.</p>"},{"location":"Develop/Write/#activate-version-management","title":"Activate version management","text":"<p>To activate the version management,</p> <ul> <li> <p>Call the prompt Ctrl+Shift+P and then enter Git: Initialise Repository.</p> </li> <li> <p>Press Enter to accept the default folder.</p> </li> </ul> <p>The additional folder <code>.git</code> is added to the project.</p> <p><pre><code>Template/\n\u251c\u2500\u2500 .builds\n\u251c\u2500\u2500 .vscode\n\u251c\u2500\u2500 LocalLibrary\n\u251c\u2500\u2500 .git\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 Doxyfile.dox\n\u251c\u2500\u2500 main.cpp\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 ReadMe.md\n\u2514\u2500\u2500 Template.ino\n</code></pre></p>"},{"location":"Develop/Write/#include-arduino-on-the-main-sketch","title":"Include Arduino on the main sketch","text":"<p>The main sketch requires to include the Arduino library.</p> <p><pre><code>#include \"Arduino.h\"\n</code></pre></p>"},{"location":"Forewords/","title":"Forewords","text":""},{"location":"Forewords/#what-is-emcode","title":"What is emCode?","text":"<p>emCode is a set of tools to ease development for the most popular embedded computing boards. Those tools are designed to be used with the excellent Visual Studio Code IDE.</p> <p> </p> <p>For convenience, emCode relies on the Arduino SDK, as it packs and manages the tool-chains, frameworks and utilities for a large range of boards.</p> <p>emCode is the continuation of embedXcode , with two notable differences:</p> <ul> <li> <p>emCode is no longer designed for Xcode but for Visual Studio Code.</p> </li> <li> <p>emCode no longer targets macOS but Linux and Windows with Windows Sub-system for Linux (WSL).</p> </li> </ul> <p>Happy development!</p> <p>\u2014 Rei Vilo</p>"},{"location":"Forewords/#copyright","title":"Copyright","text":"<p>\u00a9 Rei Vilo, 2010-2023</p> <p>All rights reserved</p> <p>All brand names and trademarks mentioned in this website are the property of their respective owners.</p> <p>None of the brands mentioned in this website sponsor, authorise, or endorse emCode. Similarly, emCode does not sponsor, authorise, or endorse any of the brands mentioned in this website.</p>"},{"location":"Forewords/#links","title":"Links","text":"<p>Please find the main links for emCode.</p> emCode Website Download User manual RSS feed LinkedIn"},{"location":"Forewords/#conventions","title":"Conventions","text":"<p>This website uses the following typographic conventions:</p> <ul> <li>Keywords and folders names are in <code>Terminal</code> font:</li> </ul> <p>Download and install Arduino 2.0 under the <code>/Applications</code> folder.</p> <ul> <li>Code is displayed with <code>Terminal</code> font in a light grey box:</li> </ul> <p><pre><code>#include \"Arduino.h\"\n</code></pre></p> <ul> <li>Notes and warnings are displayed inside coloured boxes.</li> </ul> <p>Danger</p> <p>Warning</p> <p>Info</p> <p>Note</p> <p>Example</p> <ul> <li>Applications are in Sans Serif bold font.</li> </ul> <p>Open a Terminal window.</p> <ul> <li>Elements of the interface and menus are presented using Sans Serif bold font. Keyboard shortcuts and mouse actions are framed.</li> </ul> <p>Call the menu File &gt; New &gt; New Project\u2026 or press Shift+Cmd+N.</p> <ul> <li>A  mentions an internal link while a  mentions an external link to the web.</li> </ul> <p>Follow the procedure Create a new project .</p> <p>The local libraries should comply with the Arduino IDE 1.5: Library specification..</p> <ul> <li>Dates are stated as <code>DD MMM YYYY</code>, with <code>DD</code> for day, <code>MMM</code> for month in plain letters, and <code>YYYY</code> for year.</li> </ul> <p>10 Dec 2018 | 10.3.4 | Updated support for Arduino 1.8.8 IDE</p> <ul> <li>The  on top of the current page downloads it as a PDF document.</li> </ul> <p>The downloaded documents are subject to change without prior notice.</p>"},{"location":"Install/","title":"Install emCode","text":"<p>The installation of emCode includes different tools.</p> <ul> <li>Visual Studio Code  IDE and extensions;</li> <li>Arduino tools , CLI or IDE;</li> <li>emCode package .</li> </ul> <p>Boards may require installing additional packages with the Arduino tools.</p> <ul> <li>Please refer to Manage boards .</li> </ul>"},{"location":"Install/Arduino/","title":"Install the Arduino tools","text":"<p> Arduino offers two options to manage the boards and libraries.</p> <ul> <li> <p>The Arduino-CLI provides a command-line interface for Arduino.</p> </li> <li> <p>The Arduino IDE brings a GUI.</p> </li> </ul> <p>Note</p> <p>If emCode is used on Windows Sub-system for Linux, install the Arduino tools on the Linux environment.</p>"},{"location":"Install/Arduino/#use-the-arduino-cli","title":"Use the Arduino-CLI","text":""},{"location":"Install/Arduino/#install-the-arduino-cli","title":"Install the Arduino-CLI","text":"<p> To install the Arduino-CLI under <code>~/.local/bin</code>,</p> <ul> <li> <p>Open a Terminal window;</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>cd ~/.local\ncurl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh\n</code></pre></p> <ul> <li>Ensure that <code>~/.local/bin</code> is listed in <code>$PATH</code>.</li> </ul> <p><pre><code>echo $PATH\n</code></pre></p> <p>Otherwise,</p> <ul> <li>Edit  <code>~/.bashrc</code></li> </ul> <p><pre><code>nano ~/.bashrc\n</code></pre></p> <ul> <li>Add <code>~/.local/bin</code> to <code>$PATH</code></li> </ul> <p><pre><code>export PATH=$PATH:~/.local/bin\n</code></pre></p> <ul> <li>Save and close with Ctrl+O and Ctrl+X.</li> </ul> <p>For more information,</p> <ul> <li>Please refer to the Installation  and Getting started  pages.</li> </ul>"},{"location":"Install/Arduino/#configure-arduino-cli","title":"Configure Arduino-CLI","text":"<p>To configure Arduino-CLI,</p> <ul> <li> <p>Open a Terminal window;</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli config init\nConfig file written to: ~/.arduino15/arduino-cli.yaml\n</code></pre></p> <ul> <li>Edit it with</li> </ul> <p><pre><code>nano ~/.arduino15/arduino-cli.yaml\n</code></pre></p> <ul> <li>Set the sketchbook folder;</li> </ul> <p><pre><code>  user: ~/Projects/Arduino\n</code></pre></p> <ul> <li>Save and close with Ctrl+O and Ctrl+X.</li> </ul> <p>For more information,</p> <ul> <li>Please refer to the Configuration  page of Arduino-CLI.</li> </ul>"},{"location":"Install/Arduino/#install-additional-boards","title":"Install additional boards","text":"<ul> <li> <p>Open a Terminal window;</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli core install arduino:avr\n</code></pre></p> <p>The parameter <code>arduino:avr</code> refers to the name of the boards.</p>"},{"location":"Install/Arduino/#add-urls-for-new-boards","title":"Add URLs for new boards","text":"<ul> <li>Open the configuration file <code>arduino-cli.yaml</code>;</li> </ul> <p><pre><code>nano ~/.arduino15/arduino-cli.yaml\n</code></pre></p> <ul> <li>Add the other boards;</li> </ul> <p><pre><code>board_manager:\nadditional_urls:\n- https://adafruit.github.io/arduino-board-index/package_adafruit_index.json\n- http://downloads.arduino.cc/packages/package_mbed_index.json\n- https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n- https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json\n- https://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json\n- https://github.com/stm32duino/BoardManagerFiles/raw/main/package_stmicroelectronics_index.json\n- https://www.pjrc.com/teensy/package_teensy_index.json\n- https://github.com/ambiot/ambd_arduino/raw/master/Arduino_package/package_realtek.com_amebad_index.json\n</code></pre></p> <ul> <li>Save and close with Ctrl+O and Ctrl+X.</li> </ul>"},{"location":"Install/Arduino/#install-additional-libraries","title":"Install additional libraries","text":"<ul> <li> <p>Open a Terminal window;</p> </li> <li> <p>Run</p> </li> </ul> <p><pre><code>arduino-cli lib install ArduinoBLE\n</code></pre></p>"},{"location":"Install/Arduino/#check-and-update-the-boards","title":"Check and update the boards","text":"<ul> <li> <p>Open a Terminal window;</p> </li> <li> <p>Check the cores</p> </li> </ul> <p><pre><code>arduino-cli core update-index\narduino-cli core upgrade\n</code></pre></p>"},{"location":"Install/Arduino/#check-and-update-the-libraries","title":"Check and update the libraries","text":"<ul> <li> <p>Open a Terminal window;</p> </li> <li> <p>Check the libraries.</p> </li> </ul> <p><pre><code>arduino-cli lib update-index\narduino-cli lib upgrade\n</code></pre></p>"},{"location":"Install/Arduino/#use-the-arduino-ide","title":"Use the Arduino IDE","text":""},{"location":"Install/Arduino/#install-the-arduino-ide","title":"Install the Arduino IDE","text":"<p> To install the Arduino IDE,</p> <ul> <li> <p>Download and install Arduino 2.0 or later from Arduino  under the <code>~/Applications</code> folder.</p> </li> <li> <p>Launch it.</p> </li> </ul> <p>Warning</p> <p>All releases of Arduino prior to release 2.0, including 0023, 1.0 and 1.5, and series 1.6, 1.7 and 1.8, are deprecated and not longer supported.</p> <ul> <li> <p>Define the path of the sketchbook folder in the menu Arduino &gt; Preferences &gt; Sketchbook location.</p> </li> <li> <p>Avoid spaces in the name and path of the sketchbook folder.</p> </li> </ul> <p>In this example, the sketchbook folder is <code>~/Projects/Arduino</code>.</p> <p>The Arduino 2.0 IDE provides two procedures to manage additional boards and libraries.</p> <p>For more information,</p> <ul> <li>Please refer to the Getting Started with Arduino IDE 2  page of the Arduino IDE.</li> </ul>"},{"location":"Install/Arduino/#configure-the-arduino-ide","title":"Configure the Arduino IDE","text":"<p>To configure the Arduino IDE,</p> <ul> <li> <p>Call the menu File &gt; Preferences\u2026 or press Ctrl+, to open the Preferences window;</p> </li> <li> <p>Confirm the Sketchbook location, for example <code>~/Projects/Arduino</code>;</p> </li> <li> <p>Click on OK to close the window.</p> </li> </ul>"},{"location":"Install/Arduino/#install-additional-boards_1","title":"Install additional boards","text":"<p>The Arduino IDE includes a Boards Manager for downloading and installing additional boards. It relies on a list of URLs set in the Preferences pane.</p> <p>Either</p> <ul> <li>Select the board icon on the left pane.</li> </ul> <p>or</p> <ul> <li>Call the menu Tools &gt; Board &gt; Boards Manager\u2026</li> </ul> <p>A new pane lists all the boards available, already installed or ready for installation, based on a set of URLs.</p> <ul> <li>Select the board and click on Install.</li> </ul> <p>If the board isn\u2019t listed, the URL needs to be added manually.</p> <p>For more information on the installation of the additional boards on the Arduino IDE,</p> <ul> <li>Please refer to the Installing additional Arduino Cores  page on the Arduino website.</li> </ul> <p>For more information on the installation of the additional boards on the Arduino IDE,</p> <ul> <li>Please refer to the Boards Manager  page on the Arduino website.</li> </ul>"},{"location":"Install/Arduino/#add-urls-for-new-boards_1","title":"Add URLs for new boards","text":"<p>The Boards Manager lists the boards based on a set of URLs. To add a new board, the relevant URL should be added. The URL corresponds to a JSON file.</p> <p><pre><code>https://adafruit.github.io/arduino-board-index/package_adafruit_index.json\nhttp://downloads.arduino.cc/packages/package_mbed_index.json\nhttps://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\nhttps://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json\nhttps://files.seeedstudio.com/arduino/package_seeeduino_boards_index.json\nhttps://github.com/stm32duino/BoardManagerFiles/raw/main/package_stmicroelectronics_index.json\nhttps://www.pjrc.com/teensy/package_teensy_index.json\nhttps://github.com/ambiot/ambd_arduino/raw/master/Arduino_package/package_realtek.com_amebad_index.json\n</code></pre></p> <ul> <li>Call the menu Arduino &gt; Preferences or press Cmd+,.</li> </ul> <p>This is the preference window, with a list of URLs at Additional Boards Manager URLs.</p> <ul> <li> <p>Select the Settings pane.</p> </li> <li> <p>Click on the button at the right of Additional Boards Manager URLs.</p> </li> <li> <p>Paste the URL with the JSON file. There should be one URL per line.</p> </li> <li> <p>Click OK.</p> </li> <li> <p>Call the menu Tools &gt; Board &gt; Boards Manager\u2026</p> </li> </ul> <p>For more information on the installation of the additional boards on the Arduino IDE,</p> <ul> <li>Please refer to the Boards Manager  page on the Arduino website.</li> </ul>"},{"location":"Install/Arduino/#manage-specific-boards","title":"Manage specific boards","text":"<p>Some boards require a specific procedure.</p> <ul> <li>Please refer to the Install section for the board under Manage the boards .</li> </ul>"},{"location":"Install/Arduino/#update-the-boards","title":"Update the boards","text":"<p>To update the boards,</p> <ul> <li> <p>Call the menu Tools &gt; Board &gt; Boards Manager\u2026</p> </li> <li> <p>Set the Type to Upgradable.</p> </li> </ul> <p>The left pane displays all the boards to be updated.</p> <ul> <li> <p>Select the board and click on Update.</p> </li> <li> <p>Once all boards are updated, click on Close.</p> </li> </ul>"},{"location":"Install/Arduino/#install-additional-libraries_1","title":"Install additional libraries","text":"<p>The Arduino IDE includes a Libraries Manager for downloading and installing additional libraries. It relies on a list of URLs managed centrally by Arduino.</p> <p>Either</p> <ul> <li>Select the library icon on the left pane.</li> </ul> <p>or</p> <ul> <li>Call the menu Sketch &gt; Include Library &gt; Manage Libraries\u2026</li> </ul> <p>A new window lists all the libraries available, already installed or ready for installation, based on a set of URLs.</p> <ul> <li>Select the library and click on Install.</li> </ul> <p>For more information on the installation of the additional libraries on the Arduino IDE,</p> <ul> <li>Please refer to the Library Manager  page on the Arduino website.</li> </ul>"},{"location":"Install/Arduino/#update-the-libraries","title":"Update the libraries","text":"<p>To update the libraries,</p> <ul> <li> <p>Call the menu Sketch &gt; Include Library &gt; Manage Libraries\u2026</p> </li> <li> <p>Set the Type to Upgradable.</p> </li> </ul> <p>The left pane displays all the libraries to be updated.</p> <ul> <li> <p>Select the library and click on Update.</p> </li> <li> <p>Once all boards are updated, click on Close.</p> </li> </ul>"},{"location":"Install/Code/","title":"Install Visual Studio Code IDE and extensions","text":"<p> Visual Studio Code is the lightweight IDE from Microsoft.</p>"},{"location":"Install/Code/#install-visual-studio-code","title":"Install Visual Studio Code","text":"<p>To install Visual Studio Code,</p> <ul> <li> <p>Download Visual Studio Code .</p> </li> <li> <p>Install it.em</p> </li> </ul> <p>For more information on Visual Studio Code,</p> <ul> <li> <p>Call the menu Help &gt; Documentation: or</p> </li> <li> <p>Visit the Getting Started  page.</p> </li> </ul>"},{"location":"Install/Code/#install-the-recommended-extensions","title":"Install the recommended extensions","text":"<p>Visual Studio Code is based on extensions.</p> <p>To install an extension using the command line:</p> <p><pre><code>code --install-extension ms-vscode.cpptools\n</code></pre></p> <p>To install an extension using the IDE:</p> <ul> <li> <p>Call the menu View &gt; Extensions or press Ctrl+Shift+X.</p> </li> <li> <p>Type the name of the extension to search it.</p> </li> <li> <p>Select the extension and click on Install.</p> </li> </ul> <p>Note</p> <p>If emCode is used on Windows Sub-system for Linux, the extensions may need to be installed on both the Windows and the Linux environments. Visual Studio Code provides accurate recommendations.</p>"},{"location":"Install/Code/#install-the-extensions-for-cc","title":"Install the extensions for C/C++","text":"Extension Name C/C++ <code>ms-vscode.cpptools</code> IntelliCode <code>VisualStudioExptTeam.vscodeintellicode</code> Better C++ Syntax <code>jeff-hykin.better-cpp-syntax</code>"},{"location":"Install/Code/#install-the-extensions-for-code-check","title":"Install the extensions for code check","text":"Extension Name C/C++ Advanced Lint for Visual Studio Code <code>jbenden.c-cpp-flylint</code> Multilingual, Offline and Lightweight Spellchecker <code>ban.spellright</code> Shortcut Menu Bar <code>jerrygoyal.shortcut-menu-bar</code> Icons <code>vscode-icons-team.vscode-icons</code> Workspace Storage Cleanup <code>mehyaa.workspace-storage-cleanup</code> <p>The C/C++ Advanced Lint manages different static analysers as CLang, CppCheck, FlawFinder and Lizard.</p> <p>For download and documentation, please refer to</p> <ul> <li> <p>CLang ;</p> </li> <li> <p>CppCheck ;</p> </li> <li> <p>FlawFinder ;</p> </li> <li> <p>Lizard .</p> </li> </ul> <p>Visual Studio Code generates temporary files for each project. The Workspace Storage Cleanup extension manages them to save space.</p>"},{"location":"Install/Code/#install-the-extensions-to-format-the-code","title":"Install the extensions to format the code","text":"<p>The C/C++ extension includes a formatter. As an option, Artistic Style provides more parameters.</p> Extension Name Artistic Style Format <code>chiehyu.vscode-astyle</code> <p>Artistic Style is a utility to indent, format and improve the presentation of the code.</p> <p>The Artistic Style extension requires the prior installation of Artistic Style.</p> <p>For download and documentation,</p> <ul> <li>Please refer to Artistic Style .</li> </ul> <p>Artistic Style reads the <code>~/.astylerc</code> file for the parameters to use.</p> <p>For more information about the format options,</p> <ul> <li>Please refer to the Documentation  page on the Artistic Style website.</li> </ul>"},{"location":"Install/Code/#install-the-extensions-for-documentation","title":"Install the extensions for documentation","text":"Extension Name Doxygen Documentation Generator <code>cschlosser.doxdocgen</code> <p>The Doxygen extension provides tools to generate the documentation. It requires the prior installation of Doxygen and optionally, GraphViz to generate graphs and LaTex to generate PDFs.</p> <p>Doxygen generates all the help files based on comments added to the code. Output formats are HTML and LaTeX. Doxygen includes DoxyWizard, a GUI for an easy tweaking of the parameters. Doxygen requires Graphviz to draw elaborate dependency trees.</p> <p>Finally, TeXShop translates the generated Doxygen LaTeX files into a PDF document.</p> <p>For download and documentation, please refer to</p> <ul> <li>Doxygen ;</li> <li>GraphViz ;</li> <li>LaTeX ;</li> <li>TeXShop .</li> </ul>"},{"location":"Install/Code/#install-the-extensions-for-debugging","title":"Install the extensions for debugging","text":"Extension Name Cortex Debug <code>marus25.cortex-debug</code> Debug Tracker <code>mcu-debug.debug-tracker-vscode</code> RTOS View <code>mcu-debug.rtos-views</code> Memory View <code>mcu-debug.memory-view</code> Peripheral Viewer <code>mcu-debug.peripheral-viewer</code> <p>The Cortex Debug extension works with Segger J-Link, OpenOCD, STM32CubeProgrammer ST-Link and Texane ST-Util as GDB servers. The MCU-Debug extensions add services to the Cortex Debug extension.</p> <p>The Cortex Debug extension requires the prior installation of J-Link, OpenOCD, ST-Link and Texane ST-Util.</p> <p>For download and documentation, please refer to</p> <ul> <li> <p>Segger J-Link ;</p> </li> <li> <p>OpenOCD ;</p> </li> <li> <p>STMicroelectronic ST-Link , part of STM32CubeProgrammer;</p> </li> <li> <p>Texane ST-Util .</p> </li> </ul> <p>The Segger J-Link probe may need</p> <p><pre><code>nano 99-segger-vcom.rules\n</code></pre></p> <p><pre><code>ACTION!=\"add\", SUBSYSTEM!=\"usb_device\", GOTO=\"segger_rules_end\"\nATTRS{idVendor}==\"1366\" ENV{ID_MM_DEVICE_IGNORE}=\"1\"\n#ATTRS{idVendor}==\"1366\" ATTRS{idProduct}==\"0105\", ENV{ID_MM_DEVICE_IGNORE}=\"1\"\nLABEL=\"segger_rules_end\"\n</code></pre></p> <p>Save and close with Ctrl+O Ctrl+X</p> <p><pre><code>sudo su\n</code></pre></p> <p><pre><code>chown root 99-segger-vcom.rules\nchmod u=rw 99-segger-vcom.rules\nchmod a+r 99-segger-vcom.rules\nls -l 99-segger-vcom.rules\ncp 99-segger-vcom.rules /etc/udev/rules.d/99-segger-vcom.rules\nudevadm control --reload-rules\nexit\n</code></pre></p> <p>The Cortex Debug extension requires a modern GDB client, version <code>9</code> or later. Some boards packages include older versions of the GDB client.</p> <p><pre><code>sudo apt update\nsudo apt install gdb-multiarch\n</code></pre></p> <p>For more information on the Cortex Debug extension,</p> <ul> <li>Please refer to the Cortex-Debug  wiki.</li> </ul>"},{"location":"Install/Code/#install-the-extensions-for-windows-sub-system-for-linux","title":"Install the extensions for Windows Sub-system for Linux","text":"<p>The Windows Sub-system for Linux runs a Linux distribution in Windows. This option is faster and more stable than other options like MinGW, Cygwin or MSYS2.</p> Extension Name Visual Studio Code Remote \u2013 SSH <code>ms-vscode-remote.remote-ssh</code> Visual Studio Code Remote \u2013 WSL <code>ms-vscode-remote.remote-wsl</code> <p>For more information, please refer to</p> <ul> <li>Windows Subsystem for Linux Documentation ;</li> <li>Install Linux on Windows with WSL ;</li> <li>Visual Studio Code WSL  extension;</li> <li>Developing in WSL  with Visual Studio Code.</li> </ul>"},{"location":"Install/Code/#update-visual-studio-code","title":"Update Visual Studio Code","text":""},{"location":"Install/Code/#update-ide","title":"Update IDE","text":"<p>Visual Studio Code checks itself for updates. Alternatively,</p> <ul> <li>Call the menu Help &gt; Check for updates\u2026.</li> </ul>"},{"location":"Install/Code/#update-extensions","title":"Update extensions","text":"<p>Visual Studio Code checks itself for updates. Alternatively,</p> <ul> <li>Call the prompt Ctrl+Shift+P and then enter Extensions: Check for Extension Updates.</li> </ul>"},{"location":"Install/emCode/","title":"Install emCode","text":"<p> The emcode package includes the tools and a template for the Visual Studio Code projects.</p> <p>To install emCode,</p> <ul> <li>Download and unzip the emCode package .</li> </ul> <p>Note</p> <p>If case emCode is used on Windows Sub-system for Linux, install emCode on the Linux environment.</p> <ul> <li>Create the symbolic link <code>~/.emCode</code> to the actual location of emCode.</li> </ul> <p>For example, if emCode is located at <code>~/Projects/emCode</code>, create the symbolic link with</p> <p><pre><code>ln -s ~/Projects/emCode ~/.emCode\n</code></pre></p> <p>The emCode folder contains two sub-folders.</p> <p><pre><code>emCode\n\u251c\u2500\u2500 Template\n\u2514\u2500\u2500 Tools\n    \u251c\u2500\u2500 Configurations\n    \u251c\u2500\u2500 Cores\n    \u2514\u2500\u2500 Makefiles\n</code></pre></p> <p>The <code>Template</code> sub-folder contains a minimal Visual Studio Code project.</p> <p>The <code>Tools</code> sub-folder contains the configuration files of the boards, the pre-compiled core archives, and the makefiles.</p> <p>The pre-compiled core archives are generated during the first successful build against a board.</p> <p>For example, the first successful build and link against the Raspberry Pi Pico RP2040 board with core <code>3.3.0</code> generates <code>Raspberry_Pi_Pico_W_RP2040_MSD_3.3.0.a</code>.</p> <p>The following builds go faster as they use the archive.</p>"},{"location":"Issues/","title":"Find solutions to issues","text":"<ul> <li>Manage compatibility with Arduino </li> <li>Find solutions to common issues </li> <li>Transition from embedXcode to emCode </li> </ul>"},{"location":"Issues/Changes/","title":"Transition from embedXcode to emCode","text":"<p>This section lists all the changes introduced by emCode compared to embedXcode.</p>"},{"location":"Issues/Changes/#environment","title":"Environment","text":"<p>embedXcode was designed for Apple hardware and software, and used to run on Xcode up to <code>11</code> and macOS up to <code>10.15</code>.</p> <p>emCode targets the Visual Studio Code IDE and runs on Linux or Windows Linux Sub-system <code>2</code> (WSL).</p> <p>Tests are conducted on Debian <code>12</code> and Visual Studio Code <code>1.81.0</code>.</p>"},{"location":"Issues/Changes/#main-makefile-parameters","title":"Main <code>Makefile</code> parameters","text":""},{"location":"Issues/Changes/#default-values-for-parameters","title":"Default values for parameters","text":"<p>Default values are now set to the parameters.</p> <p>If the main <code>Makefile</code> doesn\u2019t define or doesn\u2019t set a value to a parameter, the following default values are used.</p> <p>All those parameters and default values are listed on the <code>emCode/Tools/Makefiles/Step0.mk</code> file.</p> Parameter Default value Comment <code>SKETCH_EXTENSION</code> <code>ino</code> Official extension <code>HIDE_NUMBER</code> <code>false</code> Display the summary <code>HIDE_COMMAND</code> <code>true</code> Hide the command line <code>KEEP_MAIN</code> <code>false</code> Update <code>main.cpp</code> <code>KEEP_TASKS</code> <code>false</code> Update the list of tasks <code>USE_ARCHIVES</code> <code>true</code> Use available pre-compile archives for local libraries <code>OPTIMISATION</code> <code>-Os -g3</code> Set optimisation and debugging <code>BINARY_SPECIFIC_NAME</code> <code>embeddedcomputing</code> Name of the generated executable <code>USER_LIB_PATH</code> Sketchbook Full path to the user\u2019s libraries <code>APPLICATIONS_PATH</code> <code>$(HOME)/Applications</code> Location of the Arduino IDE <code>SEGGER_PATH</code> <code>/opt/SEGGER</code> Location of the Segger tools <code>STM32_CUBE_PATH</code> <code>~/Applications/STM32CubeProgrammer</code> Location of the STM32CubeProgrammer tools <code>SERIAL_BAUDRATE</code> <code>115200</code> Serial speed <code>NO_SERIAL_CONSOLE</code> <code>true</code> Do not launch the serial console"},{"location":"Issues/Changes/#new-parameters","title":"New parameters","text":"<p>For building, the new <code>USE_ARCHIVES</code> parameter sets whether existing pre-compiled archives are used first for local libraries.</p> <ul> <li> <p>Empty and default value are <code>true</code> to use pre-compiled archives;</p> </li> <li> <p>Uncomment and set to <code>false</code> otherwise to build the libraries.</p> </li> </ul> <p>A serial port can be imposed by <code>SERIAL_PORT</code> over the default from board configuration file.</p> <p><pre><code>SERIAL_PORT = /dev/ttyACM1\n</code></pre></p>"},{"location":"Issues/Changes/#deprecated-parameters","title":"Deprecated parameters","text":"<p>The parameter <code>KEEP_BOARDS_CONFIGURATIONS</code> is deprecated.</p> <p>The parameter <code>KEEP_MAIN_CPP</code> for distributing the project is deprecated.</p> <p>The parameter <code>SELECTED_RESOURCES</code> for preparing the project is deprecated.</p> <p>The paramter <code>EMCODE_EDITION</code> is deprecated as set to <code>emCode</code>.</p>"},{"location":"Issues/Changes/#targets","title":"Targets","text":""},{"location":"Issues/Changes/#deprecated-targets","title":"Deprecated targets","text":"<p>The target Debug is deprecated and replaced by the built-in debugging features of Visual Studio Code.</p> <p>The target Document is deprecated and replaced by the Doxygen and Doxywizard utilities.</p> <p>The target Distribution is deprecated.</p>"},{"location":"Issues/Common/","title":"Find solutions to common issues","text":"<p>Here are listed the most common causes of errors and the most frequently asked questions.</p> <p>Before reporting an issue, there are basic checks to be performed.</p> <ul> <li> <p>Saying that compilation fails is not enough: more information is needed.</p> </li> <li> <p>If the sketch doesn\u2019t compile successfully with the standard Arduino IDE, the error isn\u2019t generated by Visual Studio Code and emCode alone.</p> </li> <li> <p>If the example or Blinky sketck compiles and runs successfully with Visual Studio Code, the error may come from the project.</p> </li> </ul>"},{"location":"Issues/Common/#solve-compilation-issues","title":"Solve compilation issues","text":"Symptom Compilation fails. Solution Does the name of your project include a space or a special character in its name or path? Reference See Avoid spaces and special characters in projects names and paths . Symptom Compilation fails. Solution Do the installed IDEs and compatible correspond to the expected versions? Reference Check the Index of boards and platforms . Symptom Compilation fails. Solution Are the installed IDEs compatible with the supported versions? Reference See Install the Arduino tools . Symptom Compilation fails. Solution By default, no library is compiled. If the project uses libraries, mention them in the main <code>Makefile</code> after the <code>APP_LIBS_LIST</code> and <code>USER_LIBS_LIST</code> variables. Reference See Add libraries to the project . Symptom Compilation fails. Solution Some user\u2019s libraries may be incompatible. Exclude the conflicting libraries. Reference See Manage non-standard libraries . Symptom Compilation fails. Solution Does the sketch compiles normally on the standard Arduino IDE? Reference If the sketch doesn\u2019t compile on the standard Arduino IDE, then the error isn\u2019t generated by Visual Studio Code or emCode alone. Symptom Compilation fails. Solution What is the selected target? The targets All, Upload and Fast require a board to be connected. Reference See Select a target . Symptom Compilation fails. Solution Compilation of an emCode project fails with the standard Arduino IDE. Use the <code>EMCODE</code> pre-processing variable. Reference See Use the <code>EMCODE</code> pre-processing variable Symptom Compilation fails with some with the message <code>'uint8_t' was not declared in this scope</code>. Solution Some boards ignore the C99 standard <code>[u]int{8|16|32|64}_t</code> types. Refer to the procedure to add them. Reference See the Install section for the board under Manage the boards ."},{"location":"Issues/Common/#solve-libraries-issues","title":"Solve libraries issues","text":"Symptom Visual Studio Code can\u2019t find the libraries. Solution Is the sketchbook directory defined? Reference See Configure Arduino-CLI  or Configure the Arduino IDE . Symptom Visual Studio Code can\u2019t find the libraries. Solution Is the library folder created inside the sketchbook folder? Reference See Use the user\u2019s libraries . Symptom Visual Studio Code can\u2019t find the libraries. Solution Is the library mentioned in the main <code>Makefile</code>? Or is the library excluded, as Wifi and ArduinoRobot? Reference See Use the libraries . Symptom Visual Studio Code can\u2019t find the libraries of the board. Solution Have the libraries for the boards been installed? Reference See Install additional boards on Arduino-CLI  or Install additional boards on Arduino IDE . Symptom Visual Studio Code can\u2019t find the libraries of the board. Solution Have the libraries for the boards been updated? Reference See Check and update the boards on Arduino-CLI  or Update the boards on Arduino IDE . Symptom Visual Studio Code can\u2019t find some sub-libraries of a library. Solution Some libraries do not follow the official Arduino library specification and include sub-libraries. Reference See Manage non-standard libraries ."},{"location":"Issues/Common/#solve-pre-compiled-libraries-issues","title":"Solve pre-compiled libraries issues","text":"Symptom Visual Studio Code fails to link one or more pre-compiled libraries. Solution The target if the pre-compiled library does not correspond to board of the project. Reference See Use a pre-compiled library ."},{"location":"Issues/Common/#solve-upload-issues","title":"Solve upload issues","text":"Symptom Upload fails. Solution Check the USB connection and the drivers. Reference Try with another USB cable. Symptom Upload fails. Solution Check the connection isn\u2019t already used by another application. Reference Close the other application. Symptom Upload fails. Solution The name of the USB port is different. Reference See Customise the serial port . Symptom Upload fails. Solution Some boards have specific upload procedures. Reference See the Upload section for the board under Manage the boards . Symptom Upload fails after having used a programmer. Solution The programmer has erased the boot-loader. You need to burn the boot-loader again. Reference See the Upload section for the board under Manage the boards ."},{"location":"Issues/Common/#solve-boards-and-platforms-issues","title":"Solve boards and platforms issues","text":"Symptom I want the same code for different platforms. Solution Use the conditional statements based on MCU or on IDE. Reference See Manage code for multiple platforms and MCUs . Symptom My board isn\u2019t listed. Solution Create a specific Board Configuration Settings File for your board. Reference See Add a board ."},{"location":"Issues/Common/#solve-compatibility-issues","title":"Solve compatibility issues","text":"Symptom The standard Arduino IDE fails to open or compile a project created with emCode. Solution Check the compatibility of the project. Reference See Manage compatibility with standard Arduino IDE . Symptom emCode fails to open or compile a project created with a standard Arduino IDE. Solution Check the compatibility of the project. Reference See Manage compatibility with the standard Arduino IDE . Symptom The standard Arduino IDE fails to compile a project with pre-compiled libraries created with emCode. Solution The standard Arduino IDE does not support pre-compiled local libraries. Check the compatibility of the project. Reference See Manage pre-compiled libraries ."},{"location":"Issues/Common/#solve-other-issues","title":"Solve other issues","text":"Symptom I need more information about Visual Studio Code. Solution Buy a book about Visual Studio Code. Symptom I need more information about Arduino. Solution Buy a book about Arduino. Symptom My issue is not listed. Solution Report an issue at the GitHub repository. Reference See Visit the official websites ."},{"location":"Issues/Compatibility/","title":"Manage compatibility with Arduino","text":"<p>Projects developed by emCode are highly compatible with the standard Arduino CLI or IDE.</p> <p>The standard Arduino IDE will open and compile most emCode projects successfully.</p> <ul> <li> <p>Double-click on the main sketch of the emCode project, <code>embed1.ino</code> on the example.</p> </li> <li> <p>Compile with the standard Arduino IDE.</p> </li> </ul> <p>However, unlike the standard Arduino IDE, code with emCode is true C++. The main difference is, emCode buils and links the code directly, while standard Arduino IDE processes the code before building and linking it.</p> <p>The table below lists the points to ensure compatibility betwen emCode and the standard Arduino IDE.</p> Category Point emCode Arduino Main sketch Functions prototypes If needed Optional Core library <code>#include</code> Required Optional All used libraries <code>#include</code> Optional Required Main <code>Makefile</code> All used libraries listed Required Not available Libraries Local libraries Optional Not available Pre-compiled libraries Optional Not available <code>.hpp</code> header files Optional Not available Energia MT <code>rtosGlobals.h</code> file Optional Dedicated <code>.ino</code> <code>setupRtos()</code> function Optional Dedicated <code>.ino</code> Portability Code for multiple MCUs Optional Optional Projects names and paths Spaces and special characters Not recommended Not recommended emCode Pre-processing variable Available Optional"},{"location":"Issues/Compatibility/#ensure-compatibility-for-the-main-sketch","title":"Ensure compatibility for the main sketch","text":""},{"location":"Issues/Compatibility/#declare-functions-prototypes-on-main-sketch","title":"Declare functions prototypes on main sketch","text":"<p>The main consequence of true C++ is the need for declaring prototypes of the functions in the main sketch.</p> <p>In the example provided below, the prototype for <code>functionB()</code> is required, as <code>functionB()</code> is called by <code>functionA()</code> but defined after.</p> <p><pre><code>// Prototypes\nvoid functionA();\nvoid functionB();\n\n// Functions\nvoid functionA()\n{\nSerial.println(\"functionA\");\nfunctionB();\n}\n\nvoid functionB()\n{\nSerial.println(\"functionB\");\n}\n</code></pre></p> <p>Without prototyping <code>functionB()</code>, compilation would raise an error. The Arduino IDE adds the prototypes on the main sketch.</p> <p>Prototypes aren\u2019t required for libraries as they are already included in the header file.</p> <p>Prototypes are fully compatible with the standard Arduino IDE.</p>"},{"location":"Issues/Compatibility/#include-core-library-on-main-sketch","title":"Include core library on main sketch","text":"<p>The same <code>#include</code> statement to the core library is required on each header file of each library, as it is recommended for the standard Arduino IDE.</p> <p><pre><code>// SDK\n#include \"Arduino.h\"\n</code></pre></p> <p>For more information on library development,</p> <ul> <li>Please refer to Writing a Library for Arduino .</li> </ul>"},{"location":"Issues/Compatibility/#include-all-used-libraries-in-main-sketch","title":"Include all used libraries in main sketch","text":"<p>The standard Arduino IDE requires including all the libraries in the main sketch, even those not used by the main sketch but used in libraries, while emCode allows naming only the libraries which are directly called by the main sketch.</p> <p>In order to ensure compatibility with the standard Arduino IDE, including all the libraries in the main sketch is thus highly recommended, as the standard Arduino IDE requires it. It doesn\u2019t affect emCode.</p> <ul> <li>Please refer to Use the libraries .</li> </ul>"},{"location":"Issues/Compatibility/#list-all-the-used-libraries-in-main-makefile","title":"List all the used libraries in main Makefile","text":"<p>The standard Arduino IDE includes an automatic procedure to list the libraries used by a project, while emCode requires a list of those libraries in the main <code>Makefile</code>.</p> <p>Three variable are provided: the <code>APP_LIBS_LIST</code> variable lists the application libraries, the <code>USER_LIBS_LIST</code> variable the user\u2019s libraries, and the <code>LOCAL_LIBS_LIST</code> variable selects the local libraries, if they are located inside sub-folders on the project folder.</p> <ul> <li>Please refer to Use the libraries .</li> </ul>"},{"location":"Issues/Compatibility/#ensure-compatibility-for-libraries","title":"Ensure compatibility for libraries","text":""},{"location":"Issues/Compatibility/#manage-local-libraries","title":"Manage local libraries","text":"<p>The standard Arduino IDE does not manage sub-folders for libraries. The content of the sub-folders should be moved to the main folder of the project.</p> <p>For more information on using local libraries,</p> <ul> <li>Please refer to Use the local libraries .</li> </ul>"},{"location":"Issues/Compatibility/#manage-pre-compiled-libraries","title":"Manage pre-compiled libraries","text":"<p>emCode allows to include pre-compiled libraries with extension <code>.a</code> along with their header files for both user\u2019s and local libraries.</p> <p>The standard Arduino IDE now manages pre-compiled user\u2019s libraries but not pre-compiled local library. The pre-compiled local library should be unarchived by running the Unarchive target to obtain the source code files.</p> <p>For more information on pre-compiled libraries,</p> <ul> <li>Please refer to Manage pre-compiled libraries .</li> </ul>"},{"location":"Issues/Compatibility/#manage-hpp-extension-for-header-files","title":"Manage <code>.hpp</code> extension for header files","text":"<p>emCode supports the <code>.hpp</code> extension for header files.</p> <p>The standard Arduino IDE now manages the <code>.hpp</code> extension for header files.</p> <ul> <li> <p>Change the <code>.hpp</code> extension of all the header files for <code>.h</code>.</p> </li> <li> <p>Update the <code>#include</code> statements accordingly.</p> </li> </ul>"},{"location":"Issues/Compatibility/#ensure-compatibility-for-energia-mt","title":"Ensure compatibility for Energia MT","text":"<p>emCode includes some exclusive features for the Energia MT framework.</p>"},{"location":"Issues/Compatibility/#check-the-name-of-the-functions-of-the-tasks","title":"Check the name of the functions of the tasks","text":"<p>Each task includes its own <code>setup()</code> and <code>loop()</code> functions with the name of the task.</p> <p>When emCode allows any combinations of <code>setup</code> and <code>loop</code> in the names of the functions,</p> <p><pre><code>void TaskCode_setup()\nvoid setup_TaskCode()\nvoid setupTaskCode()\n</code></pre></p> <p>The latest release of Energia requires <code>loop</code> and <code>setup</code> to be mentioned as prefixes.</p> <p><pre><code>void setup_TaskCode()\nvoid setupTaskCode()\n</code></pre></p> <ul> <li>Rename the <code>setup()</code> and <code>loop()</code> functions of the tasks with <code>loop</code> and <code>setup</code> mentioned as prefixes.</li> </ul>"},{"location":"Issues/Compatibility/#delete-the-setuprtos-function","title":"Delete the setupRtos() function","text":"<p>The <code>setupRtos()</code> function isn\u2019t supported by Energia MT yet.</p> <p>To make the project compatible,</p> <ul> <li> <p>Create a new sketch <code>rtosGlobals.ino</code>.</p> </li> <li> <p>Copy-paste the <code>setupRtos()</code> function.</p> </li> <li> <p>Add an empty <code>LoopRtos()</code> function.</p> </li> </ul> <p><pre><code>void LoopRtos()\n{\n;\n}\n</code></pre></p>"},{"location":"Issues/Compatibility/#delete-the-rtosglobalsh-file","title":"Delete the rtosGlobals.h file","text":"<p>Similarly, global variables and constants are defined on the main sketch in Energia, while emCode relies on the <code>rtosGlobals.h</code> header file.</p> <p>If global variables and constants are defined,</p> <ul> <li> <p>Move the global variables and constants from the <code>rtosGlobals.h</code> header file into the main sketch. The main sketch has the same name as the project.</p> </li> <li> <p>Delete the <code>rtosGlobals.h</code> file.</p> </li> </ul> <p>Finally, emCode uses the specific variable <code>ENERGIA_MT</code>, which is not available on the standard IDE.</p> <p>If the specific variable <code>ENERGIA_MT</code> is used,</p> <ul> <li>Add the pre-processing statement on the impacted header files.</li> </ul> <p><pre><code>#define ENERGIA_MT\n</code></pre></p> <p>Because an Energia MT project has <code>ARDUINO</code> and <code>ENERGIA</code> already defined, those variables need to be tested in a given order.</p> <p><pre><code>#if defined(ENERGIA_MT)\n// Energia MT specific\n#elif defined(ENERGIA)\n// Energia specific\n#elif defined(ARDUINO)\n// Arduino specific\n#endif\n</code></pre></p> <p>For more information about Energia MT,</p> <ul> <li>Please refer to the Multi-tasking page  at the Energia website.</li> </ul>"},{"location":"Issues/Compatibility/#manage-code-for-multiple-platforms-and-mcus","title":"Manage code for multiple platforms and MCUs","text":"<p>emCode allows great flexibility on customising the code, especially when developing for different platforms and MCUs.</p> <p>The different platforms share most of the framework in common, except limited but annoying differences. Most of the code is the same, except a small number of lines. So we use pre-processing statements to write code for different platforms.</p> <p>The most pre-processing used statements are <code>#if #elif #endif</code> and <code>#defined()</code>.</p> <p>One example is the number of the pin for the LED,</p> <p><pre><code>// myLED pin number\n#if defined(ENERGIA) // All LaunchPad boards supported by Energia\nmyLED = RED_LED;\n#elif defined(DIGISPARK) // Digispark specific\nmyLED = 1; // assuming model A\n#elif defined(MAPLE_IDE) // Maple specific\nmyLED = BOARD_LED_PIN;\n#elif defined(MPIDE) // MPIDE specific\nmyLED = PIN_LED1;\n#elif defined(WIRING) // Wiring specific\nmyLED = 15;\n#elif defined(ROBOTIS) // Robotis specific\nmyLED = BOARD_LED_PIN;\n#elif defined(RFDUINO) // RFduino specific\nmyLED = 3;\n#elif defined(LITTLEROBOTFRIENDS) // LittleRobotFriends specific\nmyLED = 10;\n#elif defined(SPARK) || defined(PARTICLE) // Particle / Spark specific\nmyLED = D7;\n#elif defined(PANSTAMP_AVR) // panStamp AVR specific\nmyLED = 7;\n#elif defined(PANSTAMP_NRG) // panStamp NRG specific\nmyLED = ONBOARD_LED;\n#elif defined(ESP8266) // ESP8266 specific\nmyLED = 16;\n#else // Arduino, chipKIT, Teensy specific\nmyLED = LED_BUILTIN;\n#endif\n</code></pre></p> <p>The name of the board is queried to select the right pin number. This example uses the MCU-based approach.</p>"},{"location":"Issues/Compatibility/#use-the-mcu-based-approach","title":"Use the MCU-based approach","text":"<p>The first approach is MCU-based and relies solely on the micro-controller type.</p> <p>This approach is compatible with the respective IDEs, as no new environment variable is created or required.</p> <p>In the Arduino case, two frameworks exist so the IDE variable <code>ARDUINO</code> is required for disambiguation.</p> <p><pre><code>// Core library for code-sense - MCU-based\n#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega32U4__) || defined(__SAM3X8E__) || defined(__AVR_ATmega168__) // Arduino specific\n#include \"Arduino.h\"\n#elif defined(i586) // Galileo specific\n#include \"Arduino.h\"\n#elif defined(__32MX320F128H__) || defined(__32MX795F512L__) || defined(__32MX340F512H__) // chipKIT specific\n#include \"WProgram.h\"\n#elif defined(__AVR_ATtinyX5__) // Digispark specific\n#include \"Arduino.h\"\n#elif defined(__AVR_ATmega644P__) // Wiring specific\n#include \"Wiring.h\"\n#elif defined(__MSP430G2452__) || defined(__MSP430G2553__) || defined(__MSP430G2231__) || defined(__MSP430F5529__) || defined(__MSP430FR5739__) || defined(__MSP430F5969__) // LaunchPad MSP430 specific\n#include \"Energia.h\"\n#elif defined(__LM4F120H5QR__) || defined(__TM4C123GH6PM__) || defined(__TM4C129XNCZAD__) || defined(__CC3200R1M1RGC__) // LaunchPad LM4F TM4C CC3200 specific\n#include \"Energia.h\"\n#elif defined(__MK20DX128__) || defined(__MK20DX256__) // Teensy 3.0 3.1 specific\n#include \"WProgram.h\"\n#elif defined(__RFduino__) // RFduino specific\n#include \"Arduino.h\"\n#elif defined(MCU_STM32F103RB) || defined(MCU_STM32F103ZE) || defined(MCU_STM32F103CB) || defined(MCU_STM32F103RE) // Maple specific\n#include \"WProgram.h\"\n#else // error\n#error Platform not defined or not supported\n#endif\n</code></pre></p>"},{"location":"Issues/Compatibility/#use-the-ide-based-approach","title":"Use the IDE-based approach","text":"<p>The second approach is IDE-based.</p> <p>Each IDE defines a specific environment variable which includes the boards type it supports, and optionally the framework version.</p> <p>For example, the Arduino IDE defines <code>ARDUINO=23</code>, <code>ARDUINO=101</code> or <code>ARDUINO=150</code>, depending on the version installed.</p> <p>The variable is then passed on to the tool-chain with <code>-D</code>, as <code>-DARDUINO=101</code> or <code>-DARDUINO=150</code>.</p> <p><pre><code>// Core library for code-sense - IDE-based\n#if defined(WIRING) // Wiring specific\n#include \"Wiring.h\"\n#elif defined(MAPLE_IDE) // Maple specific\n#include \"WProgram.h\"\n#elif defined(ROBOTIS) // Robotis specific\n#include \"libpandora_types.h\"\n#include \"pandora.h\"\n#elif defined(MPIDE) // chipKIT specific\n#include \"WProgram.h\"\n#elif defined(DIGISPARK) // Digispark specific\n#include \"Arduino.h\"\n#elif defined(ENERGIA) // LaunchPad specific\n#include \"Energia.h\"\n#elif defined(LITTLEROBOTFRIENDS) // LittleRobotFriends specific\n#include \"LRF.h\"\n#elif defined(MICRODUINO) // Microduino specific\n#include \"Arduino.h\"\n#elif defined(TEENSYDUINO) // Teensy specific\n#include \"Arduino.h\"\n#elif defined(REDBEARLAB) // RedBearLab specific\n#include \"Arduino.h\"\n#elif defined(RFDUINO) // RFduino specific\n#include \"Arduino.h\"\n#elif defined(SPARK) // Spark specific\n#include \"application.h\"\n#elif defined(ARDUINO) // Arduino 1.0 and 1.5 specific\n#include \"Arduino.h\"\n#else // error\n#error Platform not defined\n#endif // end IDE\n</code></pre></p> <p>The Arduino IDE sets one single environment variable, <code>ARDUINO=101</code>.</p> <p>The standard Arduino IDE often require to close one IDE and open another.</p>"},{"location":"Issues/Compatibility/#avoid-spaces-and-special-characters-in-projects-names-and-paths","title":"Avoid spaces and special characters in projects names and paths","text":"<p>The standard Arduino IDE now, as well as the tool-chains and utilities they use, do not support spaces and special characters in the name and path of the project, although emCode manages them.</p> <p>A good idea is to replace spaces by underscores. For example, rename <code>embed 1</code> to <code>embed_1</code>.</p> <p>In order to ensure compatibility, it is highly recommended to avoid spaces and special characters in the name and path of the projects.</p> <p>Similarly, avoid spaces in the name and path of the sketchbook folder.</p>"},{"location":"Issues/Compatibility/#use-the-emcode-pre-processing-variable","title":"Use the <code>EMCODE</code> pre-processing variable","text":"<p>emCode exposes the pre-processing variable <code>EMCODE</code> with the release number as value.</p> <p><pre><code>EMCODE = 140104\n</code></pre></p> <p>The variable and the value are passed on to the compiler and the linker as a <code>-D</code> parameter.</p> <p><pre><code>-DEMCODE=140104\n</code></pre></p> <p>This allows to manage conditional pre-processing statements as <code>#define</code> and <code>#include</code> based on the IDE used, either Visual Studio Code with emCode or the standard Arduino IDE.</p> <p>This also allows to open an emCode project with the standard Arduino IDE and compile it.</p> <p>The <code>main.cpp</code> code file already includes the <code>EMCODE</code> variable so <code>main.cpp</code> is only considered when compiled with emCode, and ignored by the standard Arduino IDE.</p>"},{"location":"Appendixes/Indexes/","title":"Index of boards and platforms","text":"<p>This index lists the boards and platforms and provides links to the related pages.</p> <ul> <li> <p>Active boards are under active development and fully supported by emCode.</p> </li> <li> <p>Legacy boards are usually declared end-of-life by the manufacturer. emCode supports them but development is halted.</p> </li> <li> <p>Boards on hold are those for which the hardware and software provided by the manufacturer do not meet the expected quality and stabilty. Development is halted and may resume when the manufacturer improves the hardware and software.</p> </li> </ul>"},{"location":"Appendixes/Indexes/#active","title":"Active","text":"<ul> <li>Feather M0 and M4</li> <li>Feather ESP32</li> <li>Feather RP2040</li> <li>Feather nRF52832 and nRF52840</li> <li>Arduino ESP32</li> <li>Arduino Mbed-OS</li> <li>Arduino MegaAVR</li> <li>Arduino RP2040</li> <li>Arduino SAM</li> <li>Arduino SAMD</li> <li>Espressif ESP32</li> <li>Raspberry Pi Pico RP2040</li> <li>STM32</li> <li>Teensy</li> </ul>"},{"location":"Appendixes/Indexes/#legacy","title":"Legacy","text":"<ul> <li>Trinket and Trinket Pro AVR</li> <li>Feather ESP8266</li> <li>Arduino AVR</li> <li>Manage the Arduino Y\u00fa boards</li> <li>Arduino nRF52</li> <li>Espressif ESP8266</li> <li>Index</li> <li>Microsoft AZ3166</li> </ul>"},{"location":"Appendixes/Indexes/#on-hold","title":"On hold","text":"<ul> <li>Grove Beginner Kit for Arduino</li> <li>SenseCAP Indicator</li> <li>Xiao ESP32-C3</li> <li>Xiao expansion board</li> <li>Xiao M0 and Wio Terminal</li> <li>Xiao RP2040</li> <li>Xiao nRF52840 Mbed-OS</li> <li>Xiao nRF52840</li> </ul>"}]}